"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var package_json_1 = require("../package.json");
var check_version_1 = require("./utils/check-version");
var create_1 = __importDefault(require("./commands/create"));
var debug_1 = __importDefault(require("./commands/debug"));
var publish_1 = __importDefault(require("./commands/publish"));
var proxy_1 = __importDefault(require("./commands/proxy"));
var upload_1 = __importDefault(require("./commands/upload"));
check_version_1.checkNodeVersion();
commander_1.default
    .version(package_json_1.version, '-v, --version')
    .command('create [name]')
    .option('-t, --template <template>', 'choose a suite template')
    .description('create project')
    .action(function (name, options) {
    if (options === void 0) { options = {}; }
    check_version_1.checkSwapCliVersion().then(function () {
        create_1.default(name, options.template);
    });
});
commander_1.default
    .command('upgrade')
    .description('upgrade swap-cli')
    .action(function () {
    check_version_1.checkSwapCliVersion();
});
commander_1.default
    .command('debug')
    .description('build template')
    .action(function (argv) {
    check_version_1.checkSwapCliVersion().then(function () {
        debug_1.default(argv);
    });
});
commander_1.default
    .command('build')
    .description('build suite code')
    .action(function (argv) {
    check_version_1.checkSwapCliVersion().then(function () {
        publish_1.default(argv);
    });
});
commander_1.default
    .command('proxy')
    .description('proxy http')
    .action(function (argv) {
    check_version_1.checkSwapCliVersion().then(function () {
        proxy_1.default(argv);
    });
});
commander_1.default
    .command('upload')
    .description('zip upload')
    .action(function (argv) {
    check_version_1.checkSwapCliVersion().then(function () {
        upload_1.default(argv);
    });
});
commander_1.default.parse(process.argv);
if (commander_1.default.args.length < 1) {
    commander_1.default.help();
}
