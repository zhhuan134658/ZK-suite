var path = require('path');
var CleanWebpackPlugin = require('clean-webpack-plugin').CleanWebpackPlugin;
var entry = {};
var output = {
    path: path.resolve(__dirname, '../dist'),
    filename: '[name].bundle.js',
    libraryTarget: 'umd',
    library: 'home',
};
var externals = {
    react: {
        root: 'React',
        commonjs: 'react',
        commonjs2: 'react',
        amd: 'react',
    },
    'react-dom': {
        root: 'ReactDOM',
        commonjs2: 'react-dom',
        commonjs: 'react-dom',
        amd: 'react-dom',
    },
    'react-router-dom': {
        root: 'ReactRouterDOM',
        commonjs: 'react-router-dom',
        commonjs2: 'react-router-dom',
        amd: 'react-router-dom',
    },
    antd: {
        root: 'antd',
        commonjs: 'antd',
        commonjs2: 'antd',
        amd: 'antd',
    },
};
var rules = [
    {
        test: /\.(t|j)sx?$/,
        loader: require.resolve('babel-loader'),
        exclude: /node_modules/,
        options: {
            presets: [
                require.resolve('@babel/preset-env'),
                require.resolve('@babel/preset-react'),
                require.resolve('@babel/preset-typescript'),
            ],
            plugins: [
                require.resolve('@babel/plugin-syntax-dynamic-import'),
                [
                    require.resolve('@babel/plugin-proposal-decorators'),
                    {
                        legacy: true,
                    },
                ],
                [
                    require.resolve('babel-plugin-import'),
                    {
                        libraryName: 'antd',
                        libraryDirectory: 'lib',
                        style: true,
                    },
                    'antd',
                ],
                require.resolve('@babel/plugin-syntax-import-meta'),
                require.resolve('@babel/plugin-proposal-class-properties'),
                require.resolve('@babel/plugin-proposal-json-strings'),
                require.resolve('@babel/plugin-proposal-function-sent'),
                require.resolve('@babel/plugin-proposal-export-namespace-from'),
                require.resolve('@babel/plugin-proposal-numeric-separator'),
                require.resolve('@babel/plugin-proposal-throw-expressions'),
                require.resolve('@babel/plugin-proposal-export-default-from'),
                require.resolve('@babel/plugin-proposal-logical-assignment-operators'),
                require.resolve('@babel/plugin-proposal-optional-chaining'),
                [
                    require.resolve('@babel/plugin-proposal-pipeline-operator'),
                    {
                        proposal: 'minimal',
                    },
                ],
                require.resolve('@babel/plugin-proposal-nullish-coalescing-operator'),
                require.resolve('@babel/plugin-proposal-function-bind'),
                [
                    require.resolve('@babel/plugin-transform-runtime'),
                    {
                        helpers: false,
                    },
                ],
            ],
        },
    },
    {
        test: /\.less$/,
        use: [
            require.resolve('style-loader'),
            require.resolve('css-loader'),
            // 'postcss-loader',
            {
                loader: require.resolve('less-loader'),
                options: {
                    javascriptEnabled: true,
                },
            },
        ],
    },
    {
        test: /\.css$/,
        loader: [
            require.resolve('style-loader'),
            require.resolve('css-loader'),
        ],
    },
    {
        test: /\.svg$/,
        use: [
            {
                loader: require.resolve('@svgr/webpack'),
            },
        ],
        exclude: /src/,
    },
];
var alias = {};
var extensions = [
    '.js',
    '.json',
    '.jsx',
    '.ts',
    '.tsx',
    '.less',
    '.css',
    '.ttf',
];
var plugins = [new CleanWebpackPlugin()];
module.exports = {
    entry: entry,
    output: output,
    externals: externals,
    module: {
        rules: rules,
    },
    resolve: {
        extensions: extensions,
        alias: alias,
    },
    plugins: plugins,
};
