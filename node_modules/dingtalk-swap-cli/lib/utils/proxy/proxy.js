"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// 本地代理
// anyproxy --intercept --rule proxy.js
var fs_1 = __importDefault(require("fs"));
var anyproxy_1 = __importDefault(require("anyproxy"));
var rule_1 = __importDefault(require("./rule"));
function closeProxy() {
    anyproxy_1.default.utils.systemProxyMgr.disableGlobalProxy('https');
}
function default_1() {
    // 系统全局代理
    anyproxy_1.default.utils.systemProxyMgr.enableGlobalProxy('127.0.0.1', '8001', 'https');
    var configPath = './src/config.json';
    var configContent = fs_1.default.readFileSync(configPath, 'utf-8');
    var bizType = '';
    try {
        var config = JSON.parse(configContent);
        bizType = config.bizType;
    }
    catch (error) {
        console.log("parse config.json error: " + error + ", run " + yellow('swap debug') + " restart parse.");
    }
    var options = {
        port: 8001,
        rule: rule_1.default({ bizType: bizType }),
        webInterface: {
            enable: true,
            webPort: 8002
        },
        throttle: 10000,
        forceProxyHttps: true,
        wsIntercept: false,
        silent: true,
        dangerouslyIgnoreUnauthorized: true
    };
    var proxyServer = new anyproxy_1.default.ProxyServer(options);
    proxyServer.on('ready', function () { });
    proxyServer.on('error', function (e) {
        closeProxy();
    });
    proxyServer.start();
    process.on('exit', function (code) {
        try {
            closeProxy();
            proxyServer && proxyServer.close();
        }
        catch (e) {
            console.error(e);
        }
        process.exit();
    });
    //exit cause ctrl+c
    process.on('SIGINT', function () {
        try {
            closeProxy();
            proxyServer && proxyServer.close();
        }
        catch (e) {
            console.error(e);
        }
        process.exit();
    });
    process.on('uncaughtException', function (err) {
        try {
            closeProxy();
            proxyServer && proxyServer.close();
        }
        catch (e) {
            console.error(e);
        }
        process.exit();
    });
}
exports.default = default_1;
