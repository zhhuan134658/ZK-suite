"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var semver_1 = __importDefault(require("semver"));
var chalk_1 = __importDefault(require("chalk"));
var request_1 = __importDefault(require("request"));
var inquirer_1 = __importDefault(require("inquirer"));
var get_1 = __importDefault(require("lodash/get"));
var package_json_1 = require("../../../package.json");
var red = chalk_1.default.red, yellow = chalk_1.default.yellow, green = chalk_1.default.green;
function checkNodeVersion() {
    if (!semver_1.default.satisfies(process.version, package_json_1.engines.node)) {
        console.log(red("   You must upgrade node to " + package_json_1.engines.node + ".x to use " + package_json_1.name + "."));
        process.exit(1);
    }
}
exports.checkNodeVersion = checkNodeVersion;
// 自动更新 dingtalk-swap-cli 问答
function upgradeCliYesOrNo() {
    return __awaiter(this, void 0, void 0, function () {
        var question, answers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    question = [
                        {
                            type: 'input',
                            name: 'yesOrNo',
                            message: '自动升级 dingtalk-swap-cli? Input [Y/N]:',
                            default: 'Y',
                            filter: function (value) {
                                return value.trim();
                            },
                        },
                    ];
                    return [4 /*yield*/, inquirer_1.default.prompt(question)];
                case 1:
                    answers = _a.sent();
                    return [2 /*return*/, answers];
            }
        });
    });
}
// 检查 swap-cli 是否需要升级
function checkSwapCliVersion() {
    var _this = this;
    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var url;
        var _this = this;
        return __generator(this, function (_a) {
            try {
                url = package_json_1.publishConfig.registry + "/" + package_json_1.name;
                request_1.default.get({
                    url: url,
                    json: true,
                }, function (err, res) { return __awaiter(_this, void 0, void 0, function () {
                    var latestVersion;
                    return __generator(this, function (_a) {
                        latestVersion = get_1.default(res, 'body.dist-tags.latest');
                        if (semver_1.default.lt(package_json_1.version, latestVersion)) {
                            console.log(yellow("[" + package_json_1.name + " \u7248\u672C\u5347\u7EA7\u63D0\u793A] \u6700\u65B0\u7248\u672C\u4E3A " + green(latestVersion) + "\uFF0C\u672C\u5730\u7248\u672C\u4E3A " + package_json_1.version + "\uFF0C\u8BF7\u5C3D\u5FEB\u5347\u7EA7\u5230\u6700\u65B0\u7248\u672C\u3002"));
                            console.log(yellow('你可以手动执行 npm install -g dingtalk-swap-cli@latest 来安装此版本'));
                            //TODO:xhf-测试
                            console.log(yellow('警告:该版本为新功能测试版本，谨慎升级!!!'));
                            // 自动安装
                            // const answers = await upgradeCliYesOrNo();
                            // if (answers?.yesOrNo === 'Y') {
                            //   await spawn.sync(
                            //     'npm',
                            //     ['install', '-g', 'dingtalk-swap-cli@latest'],
                            //     {
                            //       stdio: 'inherit',
                            //     },
                            //   );
                            // }
                            resolve();
                        }
                        else {
                            resolve();
                        }
                        return [2 /*return*/];
                    });
                }); });
            }
            catch (error) {
                reject(error);
                console.log(red('Error' + error));
            }
            return [2 /*return*/];
        });
    }); });
}
exports.checkSwapCliVersion = checkSwapCliVersion;
