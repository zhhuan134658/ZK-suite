"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var chalk_1 = __importDefault(require("chalk"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var isArray_1 = __importDefault(require("lodash/isArray"));
var has_1 = __importDefault(require("lodash/has"));
var get_1 = __importDefault(require("lodash/get"));
var yellow = chalk_1.default.yellow;
// componentName 转义
function getComponentName(name) {
    var cpnsMap = {
        SelectField: 'DDSelectField',
        DateField: 'DDDateField',
        MultiSelectField: 'DDMultiSelectField',
        DateRangeField: 'DDDateRangeField',
        PhotoField: 'DDPhotoField',
        Attachment: 'DDAttachment',
    };
    return cpnsMap[name];
}
function getChildren(children) {
    var transformChildren = [];
    if (isArray_1.default(children) && children.length > 0) {
        transformChildren = (children || []).map(function (item) {
            // 自定义控件
            if (item.type === 'custom') {
                return {
                    componentName: 'CommonField',
                    props: __assign({ bizAlias: item.bizAlias, 
                        // 和罗戈确认，不必和 bizAlias保持一致
                        commonBizType: item.componentName }, item.props),
                };
            }
            if (has_1.default(item, 'children')) {
                return {
                    componentName: getComponentName(item.componentName) || item.componentName,
                    props: __assign({ bizAlias: item.bizAlias }, item.props),
                    children: getChildren(get_1.default(item, 'children', [])),
                };
            }
            return {
                componentName: getComponentName(item.componentName) || item.componentName,
                props: __assign({ bizAlias: item.bizAlias }, item.props),
            };
        });
    }
    return transformChildren;
}
/**
 * 生成 config.ts
 * @returns
 */
function generateConfigContent() {
    var configPath = './src/config.json';
    var configContent = fs_1.default.readFileSync(configPath, 'utf-8');
    var transformConfigStr = '';
    try {
        var config = JSON.parse(configContent);
        var name_1 = config.name, description = config.description, icon = config.icon, bizType = config.bizType, props = config.props, children = config.children, setters = config.setters, category = config.category, appId = config.appId, childrenSortEnable = config.childrenSortEnable;
        // 套件props
        var suiteProps = __assign({ bizType: bizType, bizAlias: bizType, extract: true, isThirdSuite: true }, props);
        var transformChildren = getChildren(children);
        var transformConfig = {
            isUnique: true,
            isSuite: true,
            componentName: 'DDBizSuite',
            category: category || 'suite_test',
            name: name_1,
            description: description,
            icon: icon,
            appId: appId,
            props: suiteProps,
            children: transformChildren,
        };
        // 子项目是否可拖曳顺序
        if (childrenSortEnable) {
            transformConfig.childrenSortEnable = true;
        }
        if (!isEmpty_1.default(setters) && isArray_1.default(setters) && setters.length > 0) {
            var setterName_1 = bizType.replace(/[^a-zA-Z0-9]/gi, "") + "Setter";
            // 找出自定义setter
            var settersFilter = setters.map(function (item) {
                var _a;
                if (((_a = item) === null || _a === void 0 ? void 0 : _a.type) === 'custom') {
                    item.setterName = setterName_1;
                }
                return item;
            });
            transformConfig.setters = settersFilter;
        }
        transformConfigStr = "export default " + JSON.stringify(transformConfig, null, 2) + ";";
    }
    catch (error) {
        console.log("parse config.json error: " + error + ", run " + yellow('swap debug') + " restart parse.");
    }
    return transformConfigStr;
}
exports.default = generateConfigContent;
