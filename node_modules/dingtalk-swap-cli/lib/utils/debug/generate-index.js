"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var fs_1 = __importDefault(require("fs"));
var isArray_1 = __importDefault(require("lodash/isArray"));
var filter_1 = __importDefault(require("lodash/filter"));
// 生成 .debug/index.ts 文件
function generateDebugEntry() {
    var isSimple = index_1.isSimpleTemplate();
    // 查看config.json是否存在 customSetter
    var configPath = './src/config.json';
    var configContent = fs_1.default.readFileSync(configPath, 'utf-8');
    var isCustomSetterExist = false;
    var setterName = '';
    try {
        var config = JSON.parse(configContent);
        var setters = config.setters, bizType = config.bizType;
        setterName = bizType.replace(/[^a-zA-Z0-9]/gi, "") + "Setter";
        if (isArray_1.default(setters) && setters.length > 0) {
            // 找出所有自定义setter
            var customSetter_1 = filter_1.default(setters, function (item) { var _a; return ((_a = item) === null || _a === void 0 ? void 0 : _a.type) === 'custom'; });
            if (isArray_1.default(customSetter_1) && customSetter_1.length > 0) {
                isCustomSetterExist = true;
            }
        }
    }
    catch (error) { }
    // notify debug mode
    var notifyContent = "import notification from 'antd/lib/notification';\n  import 'antd/lib/notification/style';\n  import loadScript from './utils/loadScript';\n  \n  notification.info({\n    message: 'Swap Debug Mode',\n    description: '\u5F53\u524D\u73AF\u5883\uFF1A\u5957\u4EF6\u8C03\u8BD5\u73AF\u5883',\n    duration: 5,\n  });\n  \n  // eruda dev-tools\n  loadScript('https://g.alicdn.com/code/lib/eruda/2.4.1/eruda.min.js').then(\n    () => {\n      eruda.init();\n      console.log('eruda init success');\n    },\n  );\n  //TODO:xhf-\u672C\u5730\u8C03\u8BD5\u751F\u6548\uFF0C\u7EBF\u4E0A\u4E0D\u751F\u6548\n  window.__isDebug = true;\n  ";
    // 自定义 setter, 简单模式不需要
    var customSetter = "// \u81EA\u5B9A\u4E49setter\n  import " + setterName + " from './designer/setter/CustomSetter';\n  const CustomSetterSet = { " + setterName + " };";
    var entryFileContent = "\n  // \u8FD0\u884C\u6001\u89C6\u56FE\n  import PCRender from './runtime/pc';\n  import MobileRender from './runtime/mobile';\n  \n  // \u5957\u4EF6\u914D\u7F6E\n  import BizSuiteConfig from './config';\n  \n  " + ((!isSimple && isCustomSetterExist) ? customSetter : '') + "\n  \n  console.warn('swap cli debug mode start');\n  \n  window.thirdSuitemMaterialSet = {\n    PCRender,\n    MobileRender,\n    BizSuiteConfig,\n    " + ((!isSimple && isCustomSetterExist) ? 'CustomSetterSet' : '') + "\n  };\n\n  export default {\n    PCRender,\n    MobileRender,\n    BizSuiteConfig,\n    " + ((!isSimple && isCustomSetterExist) ? 'CustomSetterSet' : '') + "\n  };";
    return notifyContent + "\n  " + entryFileContent;
}
exports.default = generateDebugEntry;
