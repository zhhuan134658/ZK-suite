"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var chalk_1 = __importDefault(require("chalk"));
var validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
var child_process_1 = require("child_process");
var inquirer_1 = __importDefault(require("inquirer"));
var constants_1 = require("../constants");
var red = chalk_1.default.red, green = chalk_1.default.green, yellow = chalk_1.default.yellow;
function isSafeDirectory(projectName) {
    var projectPath = path_1.default.resolve(projectName);
    var validFiles = ['package.json', '.git'];
    var conflicts = fs_extra_1.default
        .readdirSync(projectPath)
        .filter(function (file) { return !validFiles.includes(file); });
    if (conflicts.length > 0) {
        console.log("The directory " + green(projectName) + " contains files that could conflict:");
        console.log();
        for (var _i = 0, conflicts_1 = conflicts; _i < conflicts_1.length; _i++) {
            var file = conflicts_1[_i];
            console.log("  " + red(file));
        }
        console.log();
        return false;
    }
    return true;
}
exports.isSafeDirectory = isSafeDirectory;
function isValidPackageName(name) {
    var validForNewPackages = validate_npm_package_name_1.default(name).validForNewPackages;
    if (!validForNewPackages) {
        console.error("" + yellow('请输入正确的项目名称，你可以执行 swap create test-suite --template=[simple/standard/advanced] 来初始化项目模板'));
        return false;
    }
    return true;
}
exports.isValidPackageName = isValidPackageName;
function createAppDir(name) {
    var root = path_1.default.resolve(name);
    fs_extra_1.default.ensureDirSync(root);
}
exports.createAppDir = createAppDir;
function getPackageManager() {
    try {
        child_process_1.execSync('yarnpkg --version', { stdio: 'ignore' });
        return 'yarn';
    }
    catch (e) {
        return 'npm';
    }
}
exports.getPackageManager = getPackageManager;
function getGitAuthor() {
    var name = '';
    var email = '';
    try {
        name = child_process_1.execSync('git config --get user.name')
            .toString()
            .trim();
        email = child_process_1.execSync('git config --get user.email')
            .toString()
            .trim();
    }
    catch (e) { }
    return { name: name, email: email };
}
exports.getGitAuthor = getGitAuthor;
// 获取问答式输入的信息（名称、template、description等）
function getProjectInfo(name) {
    return __awaiter(this, void 0, void 0, function () {
        var question, answers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    question = getQuestion(name);
                    return [4 /*yield*/, inquirer_1.default.prompt(question)];
                case 1:
                    answers = _a.sent();
                    return [2 /*return*/, answers];
            }
        });
    });
}
exports.getProjectInfo = getProjectInfo;
function getQuestion(name) {
    var author = getGitAuthor();
    var choices = Object.keys(constants_1.TEMPLATE).map(function (name) { return ({
        name: name + " (" + constants_1.TEMPLATE[name].desc + ")",
        value: constants_1.TEMPLATE[name],
    }); });
    return [
        {
            type: 'input',
            name: 'name',
            message: 'Project name',
            default: name,
            filter: function (value) {
                return value.trim();
            },
        },
        {
            type: 'list',
            name: 'template',
            message: 'Please select a template for the project',
            choices: choices,
            default: choices[0],
        },
        {
            type: 'input',
            name: 'componentName',
            message: 'Component name',
            default: toCamel(name),
            filter: function (value) {
                return value.trim();
            },
            when: function (answers) {
                if (answers.template.category === 'Suite') {
                    return false;
                }
                return true;
            },
        },
        {
            type: 'input',
            name: 'description',
            message: 'Description',
            filter: function (value) {
                return value.trim();
            },
        },
        {
            type: 'input',
            name: 'repository',
            message: 'Repository',
            filter: function (value) {
                return value.trim();
            },
        },
        {
            type: 'input',
            name: 'version',
            message: 'Project version',
            default: '0.0.1',
            filter: function (value) {
                return value.trim();
            },
        },
        {
            type: 'input',
            name: 'author',
            message: 'Author',
            default: author.name + " <" + author.email + ">",
            filter: function (value) {
                return value.trim();
            },
        },
        {
            type: 'input',
            name: 'license',
            message: 'License',
            default: 'MIT',
            filter: function (value) {
                return value.trim();
            },
        },
        {
            type: 'confirm',
            name: 'confirm',
            message: 'Is this ok?',
            default: true,
        },
    ];
}
function isValidTemplateType(template) {
    if (constants_1.TEMPLATE_LEVEL.indexOf(template) === -1) {
        console.error("" + yellow('请输入正确的模板类型，你可以执行 swap create test-suite --template=[simple/standard/advanced] 来指定template'));
        return false;
    }
    return true;
}
exports.isValidTemplateType = isValidTemplateType;
function isFile(filePath) {
    try {
        var stat = fs_extra_1.default.statSync(filePath);
        if (stat.isFile()) {
            return true;
        }
    }
    catch (err) {
        return false;
    }
}
exports.isFile = isFile;
function getTemplateType() {
    var configPath = './src/config.json';
    var configContent = fs_extra_1.default.readFileSync(configPath, 'utf-8');
    var config = {};
    try {
        config = JSON.parse(configContent);
    }
    catch (error) { }
    return config.templateType || 'standard';
}
exports.getTemplateType = getTemplateType;
function isSimpleTemplate() {
    var templateType = getTemplateType();
    return templateType === 'simple';
}
exports.isSimpleTemplate = isSimpleTemplate;
function toCamel(str) {
    if (!str) {
        return '';
    }
    var rsStr = str.replace(/([^-])(?:-+([^-]))/g, function ($0, $1, $2) {
        return $1 + $2.toUpperCase();
    });
    return rsStr.charAt(0).toUpperCase() + rsStr.substr(1);
}
exports.default = toCamel;
