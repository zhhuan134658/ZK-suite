"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var download_git_repo_1 = __importDefault(require("download-git-repo"));
var cross_spawn_1 = __importDefault(require("cross-spawn"));
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var ejs_1 = __importDefault(require("ejs"));
var isArray_1 = __importDefault(require("lodash/isArray"));
var filter_1 = __importDefault(require("lodash/filter"));
var index_1 = require("../index");
var constants_1 = require("../../constants");
var appPath = process.cwd();
var extensions = [
    '.js',
    '.jsx',
    '.ts',
    '.tsx',
    '.json',
    '.md',
    '.json',
    '.less',
];
var fileArr = ['demo/usage', 'package', 'HISTORY'];
var baseFileArr = ['designer', 'runtime', 'utils', 'package.json'];
/**
 * 从gitlab、github、bucket导入
 * @param repository
 * @param destination
 */
function download(repository, destination) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    download_git_repo_1.default(repository, destination, { clone: true }, function (error, data) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(data);
                        }
                    });
                })];
        });
    });
}
exports.default = download;
/**
 * swap create clone & cp
 * @param projectInfo
 * @param templateType
 */
function downloadTemplate(projectInfo, suiteDir, templateType) {
    return __awaiter(this, void 0, void 0, function () {
        var template, repository, dir, destination, templateRepoPath, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    template = projectInfo.template;
                    repository = "" + constants_1.NPM_REGISTER_URL + template.path;
                    dir = template.dir;
                    destination = "./" + suiteDir;
                    templateRepoPath = path_1.default.join(appPath, './swap');
                    // 先 clone http://gitlab.alibaba-inc.com/ding-swap/swap-templates.git
                    return [4 /*yield*/, cross_spawn_1.default.sync('git', ['clone', repository, templateRepoPath], {
                            stdio: 'inherit',
                        })];
                case 1:
                    // 先 clone http://gitlab.alibaba-inc.com/ding-swap/swap-templates.git
                    _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, cross_spawn_1.default.sync('cp', [
                            '-R',
                            templateRepoPath + "/" + dir + "/" + templateType + "/.",
                            "" + destination,
                        ])];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    console.error(error_1);
                    return [3 /*break*/, 5];
                case 5: 
                // 删掉 clone 下来的 swap-templates
                return [4 /*yield*/, cross_spawn_1.default.sync('rm', ['-rf', templateRepoPath])];
                case 6:
                    // 删掉 clone 下来的 swap-templates
                    _a.sent();
                    fileArr.forEach(function (file) {
                        try {
                            for (var i = 0, len = extensions.length; i < len; i++) {
                                var filePath = destination + "/" + file + extensions[i];
                                if (index_1.isFile(filePath)) {
                                    var Str = fs_1.default.readFileSync(filePath, { encoding: 'utf-8' });
                                    Str = ejs_1.default.render(Str, projectInfo);
                                    fs_1.default.writeFileSync(filePath, Str, { encoding: 'utf-8' });
                                }
                            }
                        }
                        catch (err) {
                            console.error(err);
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.downloadTemplate = downloadTemplate;
/**
 * swap debug 时 clone & cp
 */
function downloadDebugTemplate() {
    return __awaiter(this, void 0, void 0, function () {
        var repository, templateRepoPath, debugPath, templateType, configPath, configContent, isCustomSetterExist, config, setters, customSetter;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    repository = constants_1.NPM_REGISTER_URL + "dd-swap/swap-templates.git";
                    templateRepoPath = path_1.default.join(appPath, './swap');
                    debugPath = './.debug';
                    templateType = index_1.getTemplateType();
                    return [4 /*yield*/, cross_spawn_1.default.sync('git', ['clone', repository, templateRepoPath], {
                            stdio: 'inherit',
                        })];
                case 1:
                    _a.sent();
                    configPath = './src/config.json';
                    configContent = fs_1.default.readFileSync(configPath, 'utf-8');
                    isCustomSetterExist = false;
                    config = {};
                    try {
                        config = JSON.parse(configContent);
                        setters = config.setters;
                        if (isArray_1.default(setters) && setters.length > 0) {
                            customSetter = filter_1.default(setters, function (item) { var _a; return ((_a = item) === null || _a === void 0 ? void 0 : _a.type) === 'custom'; });
                            if (isArray_1.default(customSetter) && customSetter.length > 0) {
                                isCustomSetterExist = true;
                            }
                        }
                    }
                    catch (error) { }
                    // 如果不存在customSetter,移除.debug/designer文件夹
                    if (!isCustomSetterExist) {
                        baseFileArr.splice(0, 1);
                    }
                    baseFileArr.map(function (item) { return __awaiter(_this, void 0, void 0, function () {
                        var setterPath, files, result, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!fs_1.default.existsSync(templateRepoPath + "/templates/suite/debug-template/" + templateType + "/" + item)) return [3 /*break*/, 4];
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, cross_spawn_1.default.sync('cp', [
                                            '-R',
                                            templateRepoPath + "/templates/suite/debug-template/" + templateType + "/" + item,
                                            "" + debugPath,
                                        ])];
                                case 2:
                                    _a.sent();
                                    setterPath = debugPath + "/designer/setter/CustomSetter/index.tsx";
                                    if (item === 'designer' && fs_1.default.existsSync(setterPath)) {
                                        files = fs_1.default.readFileSync(setterPath, 'utf8');
                                        result = files.replace(/\<Setter \{\.\.\.props\} \/\>\;/g, "<div className=\"" + config.bizType.replace(/[^a-zA-Z0-9]/gi, "") + "\"><Setter {...props} /></div>;");
                                        fs_1.default.writeFileSync(setterPath, result);
                                    }
                                    return [3 /*break*/, 4];
                                case 3:
                                    error_2 = _a.sent();
                                    console.error(error_2);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [4 /*yield*/, cross_spawn_1.default.sync('rm', ['-rf', templateRepoPath])];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.downloadDebugTemplate = downloadDebugTemplate;
