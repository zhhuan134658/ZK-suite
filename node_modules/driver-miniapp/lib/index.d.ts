/**
 * Driver for Miniapp
 **/
declare function createBody(): HTMLElement;
declare function createEmpty(): Comment;
declare function createText(text: any): Text;
declare function updateText(node: any, text: string): void;
/**
* @param {string} type node type
* @param {object} props element properties
*/
declare function createElement(type: string, props: object): any;
declare function appendChild(node: any, parent: any): any;
declare function removeChild(node: any, parent: any): void;
declare function replaceChild(newChild: any, oldChild: any, parent: any): void;
declare function insertAfter(node: any, after: any, parent: any): void;
declare function insertBefore(node: any, before: any, parent: any): void;
declare function addEventListener(node: any, eventName: string, eventHandler: any): any;
declare function removeEventListener(node: any, eventName: string, eventHandler: any): any;
declare function removeAttribute(node: any, propKey: string): void;
declare function setAttribute(node: any, propKey: string, propValue: any): void;
/**
* @param {object} node target node
* @param {object} style target node style value
*/
declare function setStyle(node: any, style: object): void;
declare function beforeRender(): void;
declare function afterRender(): void;
/**
* Remove all children from node.
* @NOTE: Optimization at web.
*/
declare function removeChildren(node: any): void;
declare const _default: {
    createBody: typeof createBody;
    createEmpty: typeof createEmpty;
    createText: typeof createText;
    updateText: typeof updateText;
    createElement: typeof createElement;
    appendChild: typeof appendChild;
    removeChild: typeof removeChild;
    replaceChild: typeof replaceChild;
    insertAfter: typeof insertAfter;
    insertBefore: typeof insertBefore;
    addEventListener: typeof addEventListener;
    removeEventListener: typeof removeEventListener;
    removeAttribute: typeof removeAttribute;
    setAttribute: typeof setAttribute;
    setStyle: typeof setStyle;
    beforeRender: typeof beforeRender;
    afterRender: typeof afterRender;
    removeChildren: typeof removeChildren;
};
export default _default;
