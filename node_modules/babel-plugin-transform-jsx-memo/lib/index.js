"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _crc = _interopRequireDefault(require("./crc32"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var DIRECTIVE = 'x-memo';
var helperImportedFrom = 'babel-runtime-jsx-plus';
var helperImportedName = 'createJSXMemo';
var helperLocalName = '__create_jsx_memo__';

function _default(_ref) {
  var t = _ref.types;
  var callee = t.identifier(helperLocalName);
  return {
    visitor: {
      Program: function Program(path) {
        path.__memoHelperImported = false;
      },
      JSXElement: {
        exit: function exit(path, state) {
          var node = path.node,
              parentPath = path.parentPath;

          if (node.__jsxmemo) {
            node.__jsxmemo = false;
            var replacer = t.callExpression(callee, [t.arrowFunctionExpression([], node), t.stringLiteral(getUniqueIdentifier(state))]);

            if (parentPath.isJSXElement()) {
              path.replaceWith(t.jsxExpressionContainer(replacer));
            } else {
              path.replaceWith(replacer);
            }
          }
        }
      },
      JSXAttribute: function JSXAttribute(path) {
        var node = path.node;

        if (t.isJSXIdentifier(node.name, {
          name: DIRECTIVE
        })) {
          var rootPath = path.findParent(function (p) {
            return p.isProgram();
          });
          var parentJSXEl = path.findParent(function (p) {
            return p.isJSXElement();
          });
          parentJSXEl.node.__jsxmemo = true;

          if (rootPath.__memoHelperImported === false) {
            var imported = t.identifier(helperImportedName);
            var local = t.identifier(helperLocalName);
            var importDeclaration = t.importDeclaration([t.importSpecifier(local, imported)], t.stringLiteral(helperImportedFrom));
            rootPath.unshiftContainer('body', importDeclaration);
            rootPath.__memoHelperImported = true;
          }

          path.remove();
        }
      }
    }
  };
} // Generate unique identifier, avoid id conflicts.
// https://github.com/jsx-plus/babel-plugin-transform-jsx-memo/issues/3


var uidCount = 0;

function getUniqueIdentifier(state) {
  return (0, _crc["default"])(state.filename) + '@' + uidCount++;
}