"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * babel config
 */
function resolvePlugin(plugins) {
    return plugins.filter(Boolean).map(function (plugin) {
        if (Array.isArray(plugin)) {
            var pluginName = plugin[0], args = plugin.slice(1);
            return __spreadArray([require.resolve(pluginName)], args);
        }
        return require.resolve(plugin);
    });
}
exports.default = (function (opts) {
    if (opts === void 0) { opts = {}; }
    var plugins = [
        // Stage 0
        '@babel/plugin-proposal-function-bind',
        // Stage 1
        '@babel/plugin-proposal-export-default-from',
        '@babel/plugin-proposal-logical-assignment-operators',
        ['@babel/plugin-proposal-optional-chaining', { loose: false }],
        ['@babel/plugin-proposal-pipeline-operator', { proposal: 'minimal' }],
        ['@babel/plugin-proposal-nullish-coalescing-operator', { loose: false }],
        '@babel/plugin-proposal-do-expressions',
        // Stage 2
        ['@babel/plugin-proposal-decorators', { legacy: true }],
        '@babel/plugin-proposal-function-sent',
        '@babel/plugin-proposal-export-namespace-from',
        '@babel/plugin-proposal-numeric-separator',
        '@babel/plugin-proposal-throw-expressions',
        // Stage 3
        '@babel/plugin-syntax-dynamic-import',
        '@babel/plugin-syntax-import-meta',
        '@babel/plugin-proposal-json-strings',
    ];
    return {
        presets: resolvePlugin([
            opts.env && [
                '@babel/preset-env', opts.env,
            ],
            opts.typescript && '@babel/preset-typescript',
            opts.react && (typeof opts.react === 'boolean'
                ? '@babel/preset-react'
                : ['@babel/preset-react', opts.react]),
        ]),
        plugins: resolvePlugin(plugins),
    };
});
