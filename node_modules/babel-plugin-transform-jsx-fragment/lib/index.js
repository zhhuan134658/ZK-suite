"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
var FRAGMENT = 'Fragment';

function _default(_ref) {
  var t = _ref.types;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$moduleName = options.moduleName,
      moduleName = _options$moduleName === void 0 ? 'rax' : _options$moduleName;
  return {
    visitor: {
      Program: function Program(path) {
        path.__jsxfragment = false;
      },
      ImportDeclaration: function ImportDeclaration(path) {
        var node = path.node;
        var specifiers = node.specifiers,
            source = node.source;
        var rootPath = path.findParent(function (p) {
          return p.isProgram();
        });

        if (source && source.value === moduleName && specifiers) {
          specifiers.some(function (s) {
            if (s.local.name === FRAGMENT) {
              rootPath.__jsxfragment = true;
              return true;
            }
          });
        }
      },
      // jsx short syntax <>...</>
      JSXFragment: function JSXFragment(path) {
        var rootPath = path.findParent(function (p) {
          return p.isProgram();
        });

        if (rootPath.__jsxfragment === false) {
          addImportStatement(rootPath, moduleName, t);
          rootPath.__jsxfragment = true;
        }
      },
      // <Fragment>...</Fragment>
      JSXOpeningElement: function JSXOpeningElement(path) {
        var rootPath = path.findParent(function (p) {
          return p.isProgram();
        });
        var node = path.node;

        if (t.isJSXIdentifier(node.name, {
          name: FRAGMENT
        })) {
          if (rootPath.__jsxfragment === false) {
            addImportStatement(rootPath, moduleName, t);
            rootPath.__jsxfragment = true;
          }
        }
      }
    }
  };
}

function addImportStatement(rootPath, moduleName, t) {
  var id = t.identifier(FRAGMENT);
  var importDeclaration = t.importDeclaration([t.importSpecifier(id, id)], t.stringLiteral(moduleName));
  rootPath.unshiftContainer('body', importDeclaration);
}