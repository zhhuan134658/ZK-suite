{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./packages/universal-panresponder/src/index.js","webpack:///./packages/universal-env/lib/index.js","webpack:///./packages/universal-panresponder/src/TouchHistoryMath.js","webpack:///./packages/universal-panresponder/src/ResponderTouchHistoryStore.js"],"names":["currentCentroidXOfTouchesChangedAfter","TouchHistoryMath","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","stateID","Math","random","setHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","undefined","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","ResponderTouchHistoryStore","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","responderHandlers","onResponderGrant","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","isPanStart","panHandlers","onTouchStart","recordTouchTrack","onPanResponderStart","onTouchMove","onPanResponderMove","onTouchEnd","onPanResponderEnd","isWeb","window","onMouseDown","onMouseMove","onMouseUp","module","exports","Object","defineProperty","value","default","isReactNative","isWeex","isNode","_typeof","obj","Symbol","iterator","constructor","prototype","navigator","appCodeName","product","process","versions","node","callNative","WXEnvironment","platform","__fbBatchedBridgeConfig","_default","centroidDimension","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","touchTrack","toAdd","noCentroid","initializeTouchData","touch","startTimeStamp","timestamp","startPageX","pageX","startPageY","pageY","previousTimeStamp","reinitializeTouchTrack","recordStartTouchData","identifier","recordMoveTouchData","recordEndTouchData","toArray","collection","Array","slice","call","normalizeTouches","timeStamp","map","clientX","clientY","force","screenX","screenY","radiusX","radiusY","rotationAngle","target","topLevelType","changedTouches","forEach","touchTrackToCheck"],"mappings":"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","file":"panresponder.factory.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {isWeex, isWeb} from 'universal-env';\nimport TouchHistoryMath from './TouchHistoryMath';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nconst currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The guesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.{x,y}0 will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in UIExplorer](https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/PanResponderExample.js)\n */\n\nconst PanResponder = {\n\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState: function(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const nextDX = gestureState.dx + (x - prevX);\n    const nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    const dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function(config) {\n    const gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n    };\n    PanResponder._initializeGestureState(gestureState);\n\n    let setHandlers = {\n      // Ask to be the responder:\n      onStartShouldSetResponder: function(e) {\n        return config.onStartShouldSetPanResponder === undefined ?\n          false :\n          config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function(e) {\n        return config.onMoveShouldSetPanResponder === undefined ?\n          false :\n          config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function(e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ?\n          config.onStartShouldSetPanResponderCapture(e, gestureState) :\n          false;\n      },\n\n      onMoveShouldSetResponderCapture: function(e) {\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ?\n          config.onMoveShouldSetPanResponderCapture(e, gestureState) :\n          false;\n      },\n    };\n\n    let responderHandlers = {\n      onResponderGrant: function(e) {\n        gestureState.x0 = currentCentroidX(ResponderTouchHistoryStore.touchHistory);\n        gestureState.y0 = currentCentroidY(ResponderTouchHistoryStore.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder === undefined ?\n          true :\n          config.onShouldBlockNativeResponder();\n      },\n\n      onResponderReject: function(e) {\n        config.onPanResponderReject && config.onPanResponderReject(e, gestureState);\n      },\n\n      onResponderRelease: function(e) {\n        config.onPanResponderRelease && config.onPanResponderRelease(e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminate: function(e) {\n        config.onPanResponderTerminate && config.onPanResponderTerminate(e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest: function(e) {\n        return config.onPanResponderTerminationRequest === undefined ?\n          true :\n          config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n\n    // Track for mouse event\n    let isPanStart = false;\n\n    // Default\n    let panHandlers = {\n      onTouchStart: function(e) {\n        isPanStart = true;\n\n        ResponderTouchHistoryStore.recordTouchTrack('start', e);\n\n        responderHandlers.onResponderGrant(e);\n\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (!setHandlers.onStartShouldSetResponder(e)) {\n          return responderHandlers.onResponderReject(e);\n        }\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n\n      onTouchMove: function(e) {\n        if (!isPanStart) return;\n\n        ResponderTouchHistoryStore.recordTouchTrack('move', e);\n\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (!setHandlers.onMoveShouldSetResponder(e)) {\n          return;\n        }\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n\n      onTouchEnd: function(e) {\n        isPanStart = false;\n\n        ResponderTouchHistoryStore.recordTouchTrack('end', e);\n\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderEnd) {\n          config.onPanResponderEnd(e, gestureState);\n        }\n\n        responderHandlers.onResponderRelease(e);\n      },\n    };\n\n    if (isWeb) {\n      if ('ontouchstart' in window) {\n        panHandlers = {\n          onTouchStart: panHandlers.onTouchStart,\n          onTouchMove: panHandlers.onTouchMove,\n          onTouchEnd: panHandlers.onTouchEnd\n        };\n      } else {\n        panHandlers = {\n          onMouseDown: panHandlers.onTouchStart,\n          onMouseMove: panHandlers.onTouchMove,\n          onMouseUp: panHandlers.onTouchEnd\n        };\n      }\n    }\n\n    return { panHandlers: panHandlers };\n  }\n};\n\nmodule.exports = PanResponder;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.isReactNative = exports.isWeex = exports.isNode = exports.isWeb = void 0;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// https://www.w3.org/TR/html5/webappapis.html#dom-navigator-appcodename\nvar isWeb = (typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) === 'object' && (navigator.appCodeName === 'Mozilla' || navigator.product === 'Gecko');\nexports.isWeb = isWeb;\nvar isNode = typeof process !== 'undefined' && !!(process.versions && process.versions.node);\nexports.isNode = isNode;\nvar isWeex = typeof callNative === 'function' || (typeof WXEnvironment === \"undefined\" ? \"undefined\" : _typeof(WXEnvironment)) === 'object' && WXEnvironment.platform !== 'Web';\nexports.isWeex = isWeex;\nvar isReactNative = typeof __fbBatchedBridgeConfig !== 'undefined';\nexports.isReactNative = isReactNative;\nexports[\"default\"] = module.exports;\nvar _default = module.exports;\nexports.default = _default;","var TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ?\n      touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX :\n          ofCurrent && !isXAxis ? oneTouchData.currentPageY :\n            !ofCurrent && isXAxis ? oneTouchData.previousPageX :\n              oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i in touchBank) {\n        var touchTrack = touchBank[i];\n        if (touchTrack !== null &&\n            touchTrack !== undefined &&\n            touchTrack.touchActive &&\n            touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd; // Yuck, program temporarily in invalid state.\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n\n  currentCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  currentCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  previousCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      false // ofCurrent\n    );\n  },\n\n  previousCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      false // ofCurrent\n    );\n  },\n\n  currentCentroidX: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      true, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  currentCentroidY: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      false, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  noCentroid: -1,\n};\n\nmodule.exports = TouchHistoryMath;\n","/**\n * Touch position/time tracking information by touchID. Typically, we'll only\n * see IDs with a range of 1-20 (they are recycled when touches end and then\n * start again). This data is commonly needed by many different interaction\n * logic modules so precomputing it is very helpful to do once.\n * Each touch object in `touchBank` is of the following form:\n * { touchActive: boolean,\n *   startTimeStamp: number,\n *   startPageX: number,\n *   startPageY: number,\n *   currentPageX: number,\n *   currentPageY: number,\n *   currentTimeStamp: number\n * }\n */\nvar touchHistory = {\n  touchBank: {},\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0,\n};\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n * @param {Touch} touch Native touch object.\n */\nvar initializeTouchData = function(touch) {\n  return {\n    touchActive: true,\n    startTimeStamp: touch.timestamp,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: touch.timestamp,\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: touch.timestamp,\n  };\n};\n\nvar reinitializeTouchTrack = function(touchTrack, touch) {\n  touchTrack.touchActive = true;\n  touchTrack.startTimeStamp = touch.timestamp;\n  touchTrack.startPageX = touch.pageX;\n  touchTrack.startPageY = touch.pageY;\n  touchTrack.currentPageX = touch.pageX;\n  touchTrack.currentPageY = touch.pageY;\n  touchTrack.currentTimeStamp = touch.timestamp;\n  touchTrack.previousPageX = touch.pageX;\n  touchTrack.previousPageY = touch.pageY;\n  touchTrack.previousTimeStamp = touch.timestamp;\n};\n\nvar recordStartTouchData = function(touch) {\n  var touchBank = touchHistory.touchBank;\n  var identifier = touch.identifier;\n  var touchTrack = touchBank[identifier];\n  if (touchTrack) {\n    reinitializeTouchTrack(touchTrack, touch);\n  } else {\n    touchBank[touch.identifier] = initializeTouchData(touch);\n  }\n  touchHistory.mostRecentTimeStamp = touch.timestamp;\n};\n\nvar recordMoveTouchData = function(touch) {\n  var touchBank = touchHistory.touchBank;\n  var touchTrack = touchBank[touch.identifier];\n  touchTrack.touchActive = true;\n  touchTrack.previousPageX = touchTrack.currentPageX;\n  touchTrack.previousPageY = touchTrack.currentPageY;\n  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;\n  touchTrack.currentPageX = touch.pageX;\n  touchTrack.currentPageY = touch.pageY;\n  touchTrack.currentTimeStamp = touch.timestamp;\n  touchHistory.mostRecentTimeStamp = touch.timestamp;\n};\n\nvar recordEndTouchData = function(touch) {\n  var touchBank = touchHistory.touchBank;\n  var touchTrack = touchBank[touch.identifier];\n  touchTrack.previousPageX = touchTrack.currentPageX;\n  touchTrack.previousPageY = touchTrack.currentPageY;\n  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;\n  touchTrack.currentPageX = touch.pageX;\n  touchTrack.currentPageY = touch.pageY;\n  touchTrack.currentTimeStamp = touch.timestamp;\n  touchTrack.touchActive = false;\n  touchHistory.mostRecentTimeStamp = touch.timestamp;\n};\n\nfunction toArray(collection) {\n  return collection && Array.prototype.slice.call(collection) || [];\n}\n\nfunction normalizeTouches(touches, nativeEvent) {\n  // Weex is timestamp\n  let timeStamp = nativeEvent.timeStamp || nativeEvent.timestamp;\n\n  return toArray(touches).map((touch) => {\n    // Cloned touch\n    return {\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      force: touch.force,\n      // FIXME: In weex android pageX/Y return a error value\n      pageX: touch.screenX,\n      pageY: touch.screenY,\n      radiusX: touch.radiusX,\n      radiusY: touch.radiusY,\n      rotationAngle: touch.rotationAngle,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n      target: touch.target || nativeEvent.target,\n      timestamp: timeStamp,\n      identifier: touch.identifier || 1 // MouseEvent without identifier\n    };\n  });\n};\n\nvar ResponderTouchHistoryStore = {\n  recordTouchTrack: function(topLevelType, nativeEvent) {\n    var touchBank = touchHistory.touchBank;\n    var changedTouches = normalizeTouches(nativeEvent.changedTouches || [nativeEvent], nativeEvent);\n    if (topLevelType === 'move') {\n      changedTouches.forEach(recordMoveTouchData);\n    } else if (topLevelType === 'start') {\n      changedTouches.forEach(recordStartTouchData);\n      touchHistory.numberActiveTouches = changedTouches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = changedTouches[0].identifier;\n      }\n    } else if (topLevelType === 'end') {\n      changedTouches.forEach(recordEndTouchData);\n      touchHistory.numberActiveTouches = changedTouches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        for (var i in touchBank) {\n          var touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n      }\n    }\n  },\n\n  touchHistory: touchHistory,\n};\n\nmodule.exports = ResponderTouchHistoryStore;\n"],"sourceRoot":""}