{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./packages/universal-panresponder/src/index.js","webpack:///./packages/universal-env/lib/index.js","webpack:///./packages/universal-panresponder/src/TouchHistoryMath.js","webpack:///./packages/universal-panresponder/src/ResponderTouchHistoryStore.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_universalEnv","_TouchHistoryMath","_interopRequireDefault","_ResponderTouchHistoryStore","currentCentroidXOfTouchesChangedAfter","TouchHistoryMath","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","config","stateID","Math","random","setHandlers","e","undefined","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","responderHandlers","ResponderTouchHistoryStore","onPanResponderGrant","onShouldBlockNativeResponder","onPanResponderReject","onPanResponderRelease","isPanStart","panHandlers","onTouchStart","recordTouchTrack","onPanResponderStart","onTouchMove","onPanResponderMove","onTouchEnd","onPanResponderEnd","isWeb","window","onMouseDown","onMouseMove","onMouseUp","_typeof","obj","_typeof2","iterator","constructor","default","isReactNative","isWeex","isNode","navigator","appCodeName","product","process","versions","node","callNative","WXEnvironment","platform","__fbBatchedBridgeConfig","_default","centroidDimension","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","touchTrack","noCentroid","recordStartTouchData","touch","identifier","startTimeStamp","timestamp","startPageX","pageX","startPageY","pageY","previousTimeStamp","reinitializeTouchTrack","initializeTouchData","recordMoveTouchData","recordEndTouchData","normalizeTouches","touches","nativeEvent","timeStamp","collection","Array","slice","toArray","map","clientX","clientY","force","screenX","screenY","radiusX","radiusY","rotationAngle","target","topLevelType","changedTouches","forEach","length","touchTrackToCheck"],"mappings":"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","file":"panresponder.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {isWeex, isWeb} from 'universal-env';\nimport TouchHistoryMath from './TouchHistoryMath';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nconst currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The guesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.{x,y}0 will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in UIExplorer](https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/PanResponderExample.js)\n */\n\nconst PanResponder = {\n\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState: function(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const nextDX = gestureState.dx + (x - prevX);\n    const nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    const dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function(config) {\n    const gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n    };\n    PanResponder._initializeGestureState(gestureState);\n\n    let setHandlers = {\n      // Ask to be the responder:\n      onStartShouldSetResponder: function(e) {\n        return config.onStartShouldSetPanResponder === undefined ?\n          false :\n          config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function(e) {\n        return config.onMoveShouldSetPanResponder === undefined ?\n          false :\n          config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function(e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ?\n          config.onStartShouldSetPanResponderCapture(e, gestureState) :\n          false;\n      },\n\n      onMoveShouldSetResponderCapture: function(e) {\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ?\n          config.onMoveShouldSetPanResponderCapture(e, gestureState) :\n          false;\n      },\n    };\n\n    let responderHandlers = {\n      onResponderGrant: function(e) {\n        gestureState.x0 = currentCentroidX(ResponderTouchHistoryStore.touchHistory);\n        gestureState.y0 = currentCentroidY(ResponderTouchHistoryStore.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder === undefined ?\n          true :\n          config.onShouldBlockNativeResponder();\n      },\n\n      onResponderReject: function(e) {\n        config.onPanResponderReject && config.onPanResponderReject(e, gestureState);\n      },\n\n      onResponderRelease: function(e) {\n        config.onPanResponderRelease && config.onPanResponderRelease(e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminate: function(e) {\n        config.onPanResponderTerminate && config.onPanResponderTerminate(e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest: function(e) {\n        return config.onPanResponderTerminationRequest === undefined ?\n          true :\n          config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n\n    // Track for mouse event\n    let isPanStart = false;\n\n    // Default\n    let panHandlers = {\n      onTouchStart: function(e) {\n        isPanStart = true;\n\n        ResponderTouchHistoryStore.recordTouchTrack('start', e);\n\n        responderHandlers.onResponderGrant(e);\n\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (!setHandlers.onStartShouldSetResponder(e)) {\n          return responderHandlers.onResponderReject(e);\n        }\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n\n      onTouchMove: function(e) {\n        if (!isPanStart) return;\n\n        ResponderTouchHistoryStore.recordTouchTrack('move', e);\n\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (!setHandlers.onMoveShouldSetResponder(e)) {\n          return;\n        }\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n\n      onTouchEnd: function(e) {\n        isPanStart = false;\n\n        ResponderTouchHistoryStore.recordTouchTrack('end', e);\n\n        const touchHistory = ResponderTouchHistoryStore.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderEnd) {\n          config.onPanResponderEnd(e, gestureState);\n        }\n\n        responderHandlers.onResponderRelease(e);\n      },\n    };\n\n    if (isWeb) {\n      if ('ontouchstart' in window) {\n        panHandlers = {\n          onTouchStart: panHandlers.onTouchStart,\n          onTouchMove: panHandlers.onTouchMove,\n          onTouchEnd: panHandlers.onTouchEnd\n        };\n      } else {\n        panHandlers = {\n          onMouseDown: panHandlers.onTouchStart,\n          onMouseMove: panHandlers.onTouchMove,\n          onMouseUp: panHandlers.onTouchEnd\n        };\n      }\n    }\n\n    return { panHandlers: panHandlers };\n  }\n};\n\nmodule.exports = PanResponder;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.isReactNative = exports.isWeex = exports.isNode = exports.isWeb = void 0;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// https://www.w3.org/TR/html5/webappapis.html#dom-navigator-appcodename\nvar isWeb = (typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) === 'object' && (navigator.appCodeName === 'Mozilla' || navigator.product === 'Gecko');\nexports.isWeb = isWeb;\nvar isNode = typeof process !== 'undefined' && !!(process.versions && process.versions.node);\nexports.isNode = isNode;\nvar isWeex = typeof callNative === 'function' || (typeof WXEnvironment === \"undefined\" ? \"undefined\" : _typeof(WXEnvironment)) === 'object' && WXEnvironment.platform !== 'Web';\nexports.isWeex = isWeex;\nvar isReactNative = typeof __fbBatchedBridgeConfig !== 'undefined';\nexports.isReactNative = isReactNative;\nexports[\"default\"] = module.exports;\nvar _default = module.exports;\nexports.default = _default;","var TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ?\n      touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX :\n          ofCurrent && !isXAxis ? oneTouchData.currentPageY :\n            !ofCurrent && isXAxis ? oneTouchData.previousPageX :\n              oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i in touchBank) {\n        var touchTrack = touchBank[i];\n        if (touchTrack !== null &&\n            touchTrack !== undefined &&\n            touchTrack.touchActive &&\n            touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd; // Yuck, program temporarily in invalid state.\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n\n  currentCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  currentCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  previousCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      false // ofCurrent\n    );\n  },\n\n  previousCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      false // ofCurrent\n    );\n  },\n\n  currentCentroidX: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      true, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  currentCentroidY: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      false, // isXAxis\n      true // ofCurrent\n    );\n  },\n\n  noCentroid: -1,\n};\n\nmodule.exports = TouchHistoryMath;\n","/**\n * Touch position/time tracking information by touchID. Typically, we'll only\n * see IDs with a range of 1-20 (they are recycled when touches end and then\n * start again). This data is commonly needed by many different interaction\n * logic modules so precomputing it is very helpful to do once.\n * Each touch object in `touchBank` is of the following form:\n * { touchActive: boolean,\n *   startTimeStamp: number,\n *   startPageX: number,\n *   startPageY: number,\n *   currentPageX: number,\n *   currentPageY: number,\n *   currentTimeStamp: number\n * }\n */\nvar touchHistory = {\n  touchBank: {},\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0,\n};\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n * @param {Touch} touch Native touch object.\n */\nvar initializeTouchData = function(touch) {\n  return {\n    touchActive: true,\n    startTimeStamp: touch.timestamp,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: touch.timestamp,\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: touch.timestamp,\n  };\n};\n\nvar reinitializeTouchTrack = function(touchTrack, touch) {\n  touchTrack.touchActive = true;\n  touchTrack.startTimeStamp = touch.timestamp;\n  touchTrack.startPageX = touch.pageX;\n  touchTrack.startPageY = touch.pageY;\n  touchTrack.currentPageX = touch.pageX;\n  touchTrack.currentPageY = touch.pageY;\n  touchTrack.currentTimeStamp = touch.timestamp;\n  touchTrack.previousPageX = touch.pageX;\n  touchTrack.previousPageY = touch.pageY;\n  touchTrack.previousTimeStamp = touch.timestamp;\n};\n\nvar recordStartTouchData = function(touch) {\n  var touchBank = touchHistory.touchBank;\n  var identifier = touch.identifier;\n  var touchTrack = touchBank[identifier];\n  if (touchTrack) {\n    reinitializeTouchTrack(touchTrack, touch);\n  } else {\n    touchBank[touch.identifier] = initializeTouchData(touch);\n  }\n  touchHistory.mostRecentTimeStamp = touch.timestamp;\n};\n\nvar recordMoveTouchData = function(touch) {\n  var touchBank = touchHistory.touchBank;\n  var touchTrack = touchBank[touch.identifier];\n  touchTrack.touchActive = true;\n  touchTrack.previousPageX = touchTrack.currentPageX;\n  touchTrack.previousPageY = touchTrack.currentPageY;\n  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;\n  touchTrack.currentPageX = touch.pageX;\n  touchTrack.currentPageY = touch.pageY;\n  touchTrack.currentTimeStamp = touch.timestamp;\n  touchHistory.mostRecentTimeStamp = touch.timestamp;\n};\n\nvar recordEndTouchData = function(touch) {\n  var touchBank = touchHistory.touchBank;\n  var touchTrack = touchBank[touch.identifier];\n  touchTrack.previousPageX = touchTrack.currentPageX;\n  touchTrack.previousPageY = touchTrack.currentPageY;\n  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;\n  touchTrack.currentPageX = touch.pageX;\n  touchTrack.currentPageY = touch.pageY;\n  touchTrack.currentTimeStamp = touch.timestamp;\n  touchTrack.touchActive = false;\n  touchHistory.mostRecentTimeStamp = touch.timestamp;\n};\n\nfunction toArray(collection) {\n  return collection && Array.prototype.slice.call(collection) || [];\n}\n\nfunction normalizeTouches(touches, nativeEvent) {\n  // Weex is timestamp\n  let timeStamp = nativeEvent.timeStamp || nativeEvent.timestamp;\n\n  return toArray(touches).map((touch) => {\n    // Cloned touch\n    return {\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      force: touch.force,\n      // FIXME: In weex android pageX/Y return a error value\n      pageX: touch.screenX,\n      pageY: touch.screenY,\n      radiusX: touch.radiusX,\n      radiusY: touch.radiusY,\n      rotationAngle: touch.rotationAngle,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n      target: touch.target || nativeEvent.target,\n      timestamp: timeStamp,\n      identifier: touch.identifier || 1 // MouseEvent without identifier\n    };\n  });\n};\n\nvar ResponderTouchHistoryStore = {\n  recordTouchTrack: function(topLevelType, nativeEvent) {\n    var touchBank = touchHistory.touchBank;\n    var changedTouches = normalizeTouches(nativeEvent.changedTouches || [nativeEvent], nativeEvent);\n    if (topLevelType === 'move') {\n      changedTouches.forEach(recordMoveTouchData);\n    } else if (topLevelType === 'start') {\n      changedTouches.forEach(recordStartTouchData);\n      touchHistory.numberActiveTouches = changedTouches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = changedTouches[0].identifier;\n      }\n    } else if (topLevelType === 'end') {\n      changedTouches.forEach(recordEndTouchData);\n      touchHistory.numberActiveTouches = changedTouches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        for (var i in touchBank) {\n          var touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n      }\n    }\n  },\n\n  touchHistory: touchHistory,\n};\n\nmodule.exports = ResponderTouchHistoryStore;\n"],"sourceRoot":""}