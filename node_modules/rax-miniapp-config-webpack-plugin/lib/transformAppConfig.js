"use strict";

var _excluded = ["icon", "activeIcon", "path", "pageName"];

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _require = require('path'),
    relative = _require.relative;

var adaptAppConfig = require('./adaptConfig');

var handleIcon = require('./handleIcon');

var _require2 = require('miniapp-builder-shared'),
    normalizeOutputFilePath = _require2.pathHelper.normalizeOutputFilePath;

module.exports = function transformAppConfig(outputPath, originalAppConfig, target, subPackages) {
  var appConfig = {};

  for (var configKey in originalAppConfig) {
    var config = originalAppConfig[configKey];

    switch (configKey) {
      case 'routes':
      case 'applications':
        // filter routes and applications
        break;

      case 'window':
        appConfig[configKey] = adaptAppConfig(config, 'window', target);
        break;

      case 'tabBar':
        // Handle tab item
        if (config.items) {
          config.items = config.items.map(function (itemConfig) {
            var icon = itemConfig.icon,
                activeIcon = itemConfig.activeIcon,
                itemPath = itemConfig.path,
                pageName = itemConfig.pageName,
                others = _objectWithoutPropertiesLoose(itemConfig, _excluded);

            var newItemConfig = {};

            if (icon) {
              newItemConfig.icon = handleIcon(icon, outputPath);
            }

            if (activeIcon) {
              newItemConfig.activeIcon = handleIcon(activeIcon, outputPath);
            }

            if (!itemConfig.pagePath) {
              var targetRoute = originalAppConfig.routes.find(function (_ref) {
                var path = _ref.path;
                return path === itemPath || path === pageName;
              });

              if (targetRoute) {
                newItemConfig.pagePath = targetRoute.source;
              }
            }

            return adaptAppConfig(Object.assign(newItemConfig, others), 'items', target);
          });
        }

        appConfig[configKey] = adaptAppConfig(config, 'tabBar', target);
        break;

      case 'subAppRoot':
        appConfig.root = config;
        break;

      case 'pages':
        if (subPackages) {
          appConfig[configKey] = config.map(function (page) {
            return normalizeOutputFilePath(relative(originalAppConfig.subAppRoot, page));
          });
          break;
        }

      default:
        appConfig[configKey] = config;
        break;
    }
  }

  return appConfig;
};