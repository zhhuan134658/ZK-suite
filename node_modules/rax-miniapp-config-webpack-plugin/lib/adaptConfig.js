"use strict";

var _configKeyMap, _configValueMap;

var _require = require('miniapp-builder-shared'),
    _require$constants = _require.constants,
    MINIAPP = _require$constants.MINIAPP,
    WECHAT_MINIPROGRAM = _require$constants.WECHAT_MINIPROGRAM,
    BYTEDANCE_MICROAPP = _require$constants.BYTEDANCE_MICROAPP,
    QUICKAPP = _require$constants.QUICKAPP;

var configKeyMap = (_configKeyMap = {}, _configKeyMap[MINIAPP] = {
  window: {
    title: 'defaultTitle',
    pullRefresh: 'pullRefresh',
    titleBarColor: 'titleBarColor'
  },
  tabBar: {
    textColor: 'textColor',
    items: 'items'
  },
  items: {
    name: 'name',
    icon: 'icon',
    activeIcon: 'activeIcon',
    text: 'name'
  }
}, _configKeyMap[WECHAT_MINIPROGRAM] = {
  window: {
    title: 'navigationBarTitleText',
    pullRefresh: 'enablePullDownRefresh',
    titleBarColor: 'navigationBarBackgroundColor'
  },
  tabBar: {
    textColor: 'color',
    items: 'list'
  },
  items: {
    name: 'text',
    icon: 'iconPath',
    activeIcon: 'selectedIconPath'
  }
}, _configKeyMap[BYTEDANCE_MICROAPP] = {
  window: {
    title: 'navigationBarTitleText',
    pullRefresh: 'enablePullDownRefresh',
    titleBarColor: 'navigationBarBackgroundColor'
  },
  tabBar: {
    textColor: 'color',
    items: 'list'
  },
  items: {
    name: 'text',
    icon: 'iconPath',
    activeIcon: 'selectedIconPath'
  }
}, _configKeyMap[QUICKAPP] = {
  window: {
    title: 'titleBarText',
    titleBarColor: 'titleBarTextColor'
  }
}, _configKeyMap);
var configValueMap = (_configValueMap = {}, _configValueMap[MINIAPP] = {
  window: {
    allowsBounceVertical: {
      true: 'YES',
      false: 'NO'
    },
    titlePenetrate: {
      true: 'YES',
      false: 'NO'
    },
    showTitleLoading: {
      true: 'YES',
      false: 'NO'
    },
    gestureBack: {
      true: 'YES',
      false: 'NO'
    },
    enableScrollBar: {
      true: 'YES',
      false: 'NO'
    }
  }
}, _configValueMap);

module.exports = function adaptConfig(originalConfig, property, target) {
  var config = {};
  var configKeyAdapter = configKeyMap[target] && configKeyMap[target][property];
  var configValueAdapter = configValueMap[target] && configValueMap[target][property];
  Object.keys(originalConfig).forEach(function (configKey) {
    // configKey, like title
    var key = configKey;
    var value = originalConfig[configKey];

    if (configKeyAdapter && configKeyAdapter[configKey] && configKey !== configKeyAdapter[configKey]) {
      key = configKeyAdapter[configKey];
    }

    if (configValueAdapter && configValueAdapter[configKey] && configValueAdapter[configKey][value] !== undefined) {
      value = configValueAdapter[configKey][value];
    }

    config[key] = value;
  });
  return config;
};