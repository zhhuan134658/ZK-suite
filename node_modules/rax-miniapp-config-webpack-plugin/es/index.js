"use strict";

var transformAppConfig = require('./transformAppConfig');

var _require = require('path'),
    join = _require.join;

var _require2 = require('fs-extra'),
    ensureDirSync = _require2.ensureDirSync;

var safeWriteFile = require('./safeWriteFile');

var adaptConfig = require('./adaptConfig');

var transformNativeConfig = require('./transformNativeConfig');

var PluginName = 'MiniAppConfigPlugin';

module.exports = /*#__PURE__*/function () {
  function MiniAppConfigPlugin(passedOptions) {
    this.options = passedOptions;
  }

  var _proto = MiniAppConfigPlugin.prototype;

  _proto.apply = function apply(compiler) {
    // Currently there is no watch app.json capacity, so use first render flag handle repeatly write config
    var isFirstRender = true;
    var _this$options = this.options,
        subPackages = _this$options.subPackages,
        outputPath = _this$options.outputPath,
        appConfig = _this$options.appConfig,
        subAppConfigList = _this$options.subAppConfigList,
        target = _this$options.target,
        type = _this$options.type,
        nativeConfig = _this$options.nativeConfig;
    compiler.hooks.beforeCompile.tapAsync(PluginName, function (compilation, callback) {
      if (isFirstRender) {
        transformConfig(compilation, callback);
        isFirstRender = false;
      } else {
        callback();
      }
    });

    function transformConfig(compilation, callback) {
      var config = transformAppConfig(outputPath, appConfig, target);

      if (subPackages) {
        // Transform subpackages
        config.subPackages = subAppConfigList.filter(function (subAppConfig) {
          return !subAppConfig.miniappMain;
        }).map(function (subAppConfig) {
          return transformAppConfig(outputPath, subAppConfig, target, subPackages);
        });

        if (subPackages.shareMemory) {
          config.subPackageBuildType = 'shared';
        } // Transform main package pages


        var mainPackageConfig = subAppConfigList.filter(function (subAppConfig) {
          return subAppConfig.miniappMain;
        })[0];
        config.pages = mainPackageConfig.pages;
        config.preloadRule = {}; // Transform page config

        subAppConfigList.map(function (subAppConfig) {
          subAppConfig.routes.map(function (route) {
            if (route && route.window) {
              ensureDirSync(outputPath);
              safeWriteFile(join(outputPath, route.source + '.json'), adaptConfig(route.window, 'window', target), true);
            }

            if (route && route.miniappPreloadRule) {
              config.preloadRule[route.source] = route.miniappPreloadRule;
            }
          });
        });
      } else {
        // Transform page config
        appConfig.routes.map(function (route) {
          if (route && route.window) {
            ensureDirSync(outputPath);
            safeWriteFile(join(outputPath, route.source + '.json'), adaptConfig(route.window, 'window', target), true);
          }
        });
      }

      safeWriteFile(join(outputPath, 'app.json'), config, true);

      if (type === 'complie') {
        safeWriteFile(join(outputPath, target === 'quickapp' ? 'appConfig.js' : 'app.config.js'), "module.exports = " + JSON.stringify(subPackages ? config : appConfig, null, 2));
      } // Transform native config


      transformNativeConfig(outputPath, nativeConfig, target);
      callback();
    }
  };

  return MiniAppConfigPlugin;
}();