"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var processPrefersColorScheme_1 = require("../processPrefersColorScheme");
describe('prefersColorScheme', function () {
    it('isPrefersColorScheme detect @media prefers-color-scheme', function () {
        var mediaRules = [
            { key: '(prefers-color-scheme: dark)', data: {} },
            { key: '(prefers-color-scheme: light)', data: {} },
            { key: 'screen and (max-width: 300px)', data: {} },
        ];
        expect(processPrefersColorScheme_1.isPrefersColorScheme(mediaRules[0].key)).toBe(true);
        expect(processPrefersColorScheme_1.isPrefersColorScheme(mediaRules[1].key)).toBe(true);
        expect(processPrefersColorScheme_1.isPrefersColorScheme(mediaRules[2].key)).toBe(false);
    });
    it('processPrefersColorScheme compile weex to `-weex-xxx-scheme-xxx`', function () {
        var mediaRules = [
            {
                key: '(prefers-color-scheme: dark)',
                data: {
                    test: { color: 'rgb(0,0,0)' },
                },
            },
            {
                key: '(prefers-color-scheme: light)',
                data: {
                    test: { color: 'rgb(255,255,255)' },
                },
            },
        ];
        var webResult = processPrefersColorScheme_1.processPrefersColorScheme(mediaRules, {}, 'web');
        var weexResult = processPrefersColorScheme_1.processPrefersColorScheme(mediaRules, {}, 'weex');
        // do nothing in web
        expect(webResult).toEqual({});
        expect(weexResult).toMatchObject({
            test: {
                '-weex-dark-scheme-color': 'rgb(0,0,0)',
                '-weex-light-scheme-color': 'rgb(255,255,255)',
            },
        });
    });
});
//# sourceMappingURL=prefersColorScheme.js.map