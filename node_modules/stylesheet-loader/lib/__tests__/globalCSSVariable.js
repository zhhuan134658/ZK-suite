"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var globalCSSVariable_1 = require("../globalCSSVariable");
jest.mock('loader-utils', function () {
    return {
        getOptions: function () {
            return {
                theme: true,
            };
        },
    };
});
var mockStyleHeaderString = "let __globalObject = typeof window === 'object' ? window : typeof global === 'object' ? global : {};\n  if (typeof __globalObject === \"object\") {\n    __globalObject.__RootCSSVariable = __globalObject.__RootCSSVariable || {};__globalObject.__RootCSSVariable[\"colorName\"] = \"hsl(240, 100%, 50%)\";}\n  function __getValue(name){\n    return (typeof __globalObject.__RootCSSVariable === \"object\")\n      ? window.__RootCSSVariable[name]\n      : \"\";\n  }";
var mockStyleString = "let __globalObject = typeof window === 'object' ? window : typeof global === 'object' ? global : {};\n  if (typeof __globalObject === \"object\") {\n    __globalObject.__RootCSSVariable = __globalObject.__RootCSSVariable || {};__globalObject.__RootCSSVariable[\"colorName\"] = \"blue\";}\n  function __getValue(name){\n    return (typeof __globalObject.__RootCSSVariable === \"object\")\n      ? window.__RootCSSVariable[name]\n      : \"\";\n  }\n  var _styles = {\n  \"__CSSVariables\": {\n    \"colorName\": \"blue\"\n  },\n  \"text1\": {\n    get color(){return __getValue(\"colorName\")}\n  }\n};\n\n\n\n  module.exports = _styles;\n  ";
describe('globalCSSVariable', function () {
    it('should build code to create writes and reads to runtime global css variables', function () {
        var styleString = ':root { --color-name: blue; }.text1 { color: var(--color-name); }';
        var createdString = index_1.default(styleString);
        expect(createdString).toEqual(mockStyleString);
    });
    it('should be initialized in the runtime inline style', function () {
        var styleString = globalCSSVariable_1.default({
            globalCSSVarName: '__CSSVariables',
            styles: {
                __CSSVariables: {
                    colorName: 'hsl(240, 100%, 50%)',
                },
                text1: {
                    color: 'var(colorName)',
                },
            },
        });
        expect(styleString).toEqual(mockStyleHeaderString);
    });
});
//# sourceMappingURL=globalCSSVariable.js.map