"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
var DIRECTIVE = 'x-class';
var helperImportedFrom = 'babel-runtime-jsx-plus';
var helperImportedName = 'classnames';
var helperLocalName = '__classnames__';

function _default(_ref) {
  var t = _ref.types;
  return {
    visitor: {
      Program: function Program(path) {
        path.__classHelperImported = false;
      },
      JSXOpeningElement: function JSXOpeningElement(parentPath) {
        var attributePaths = parentPath.get('attributes') || [];
        var attributes = parentPath.node.attributes || [];
        attributePaths.some(function (path) {
          var node = path.node;

          if (t.isJSXIdentifier(node.name, {
            name: DIRECTIVE
          })) {
            var params = [];
            if (t.isJSXExpressionContainer(node.value)) params.push(node.value.expression);else if (t.isStringLiteral(node.value)) params.push(node.value);
            var callExp = t.callExpression(t.identifier(helperLocalName), params);
            var classNameAttribute;

            for (var i = 0, l = attributes.length; i < l; i++) {
              if (t.isJSXIdentifier(attributes[i].name, {
                name: 'className'
              })) classNameAttribute = attributes[i];
            }

            if (classNameAttribute) {
              var prevVal;
              if (t.isJSXExpressionContainer(classNameAttribute.value)) prevVal = classNameAttribute.value.expression;else if (t.isStringLiteral(classNameAttribute.value)) prevVal = classNameAttribute.value;else prevVal = t.stringLiteral('');
              classNameAttribute.value = t.jsxExpressionContainer(t.binaryExpression('+', t.binaryExpression('+', prevVal, t.stringLiteral(' ')), callExp));
            } else {
              attributes.push(t.jsxAttribute(t.jsxIdentifier('className'), t.jsxExpressionContainer(callExp)));
            }

            path.remove();
            var rootPath = path.findParent(function (p) {
              return p.isProgram();
            });

            if (rootPath.__classHelperImported === false) {
              var imported = t.identifier(helperImportedName);
              var local = t.identifier(helperLocalName);
              var importDeclaration = t.importDeclaration([t.importSpecifier(local, imported)], t.stringLiteral(helperImportedFrom));
              rootPath.unshiftContainer('body', importDeclaration);
              rootPath.__classHelperImported = true;
            }

            return true;
          }
        });
      }
    }
  };
}