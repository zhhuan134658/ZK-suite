"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _universalEnv = require("universal-env");

var _dedupe = _interopRequireDefault(require("classnames/dedupe"));

var _omit = _interopRequireDefault(require("omit.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Video = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      style = props.style,
      controls = props.controls,
      playControl = props.playControl,
      autoPlay = props.autoPlay;
  var refEl = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return refEl.current;
  });
  var common = (0, _omit["default"])(props, ['className', 'controls', 'style', 'playControl']);

  if (controls == undefined || controls === true) {
    common.controls = true;
  } else {
    common.controls = _universalEnv.isWeex ? 'nocontrols' : false;
  }

  common.autoPlay = playControl === 'play' || autoPlay;

  if (_universalEnv.isWeb && common.autoPlay === false) {
    delete common.autoPlay;
  }

  if (_universalEnv.isWeChatMiniProgram || _universalEnv.isMiniApp) {
    common.autoplay = common.autoPlay;
    delete common.autoPlay;
  }

  (0, _react.useEffect)(function () {
    if (!_universalEnv.isWeex) {
      var node = refEl.current;

      if (playControl !== undefined) {
        playControl === 'play' ? node.play() : node.pause();
      }
    }
  }, [playControl]);
  return _universalEnv.isWeex ? /*#__PURE__*/_react["default"].createElement("video", Object.assign({}, common, {
    ref: refEl,
    className: (0, _dedupe["default"])('rax-video', className),
    style: style,
    playStatus: playControl
  })) : /*#__PURE__*/_react["default"].createElement("video", Object.assign({}, common, {
    ref: refEl,
    className: (0, _dedupe["default"])('rax-video', className),
    style: style,
    "webkit-playsinline": true,
    playsinline: true,
    src: props.src
  }));
});
Video.displayName = 'Video';
var _default = Video;
exports["default"] = _default;