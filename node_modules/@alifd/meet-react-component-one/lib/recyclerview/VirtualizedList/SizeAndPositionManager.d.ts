export default class SizeAndPositionManager {
    constructor({ itemCount, itemSizeGetter, estimatedItemSize }: {
        itemCount: any;
        itemSizeGetter: any;
        estimatedItemSize: any;
    });
    itemSizeGetter: any;
    itemCount: any;
    estimatedItemSize: any;
    lastMeasuredIndex: number;
    itemSizeAndPositionData: {};
    updateConfig({ itemCount, itemSizeGetter, estimatedItemSize, }: {
        itemCount: any;
        itemSizeGetter: any;
        estimatedItemSize: any;
    }): void;
    getLastMeasuredIndex(): number;
    getSizeAndPositionForIndex(index: any): any;
    getSizeAndPositionOfLastMeasuredItem(): any;
    getTotalSize(totalSize: any): any;
    getUpdatedOffsetForIndex({ align, containerSize, currentOffset, targetIndex, }: {
        align?: string;
        containerSize: any;
        currentOffset: any;
        targetIndex: any;
    }): number;
    getVisibleRange({ containerSize, offset, overscanCount, }: {
        containerSize: any;
        offset: any;
        overscanCount: any;
    }): {
        start?: undefined;
        stop?: undefined;
    } | {
        start: number;
        stop: number;
    };
    resetItem(index: any): void;
    findNearestItem(offset: any): number;
    binarySearch({ low, high, offset, }: {
        low: any;
        high: any;
        offset: any;
    }): number;
    exponentialSearch({ index, offset }: {
        index: any;
        offset: any;
    }): number;
}
