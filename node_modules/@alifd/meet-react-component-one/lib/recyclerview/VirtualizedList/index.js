"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ScrollDirection", {
  enumerable: true,
  get: function get() {
    return _constants.DIRECTION;
  }
});
exports["default"] = void 0;

var _tslib = require("tslib");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _BaseList2 = _interopRequireDefault(require("./BaseList"));

var _constants = require("./constants");

var _timer = _interopRequireDefault(require("./timer"));

var _NestedList = _interopRequireDefault(require("./NestedList"));

var _throttle = _interopRequireDefault(require("./throttle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var STYLE_NODE_ID = 'rax-virtualized-list-style';
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
var DEFAULT_END_REACHED_THRESHOLD = 500;
var STYLE_WRAPPER = {
  overflow: 'auto',
  willChange: 'transform',
  WebkitOverflowScrolling: 'touch'
};

var VirtualizedList = /*#__PURE__*/function (_BaseList) {
  _inherits(VirtualizedList, _BaseList);

  var _super = _createSuper(VirtualizedList);

  function VirtualizedList() {
    var _this;

    _classCallCheck(this, VirtualizedList);

    _this = _super.apply(this, arguments);
    _this.lastScrollDistance = 0;
    _this.lastScrollContentSize = 0;
    _this.loadmoreretry = 1;

    _this.getRef = function (node) {
      _this.rootNode = node;
    };

    _this.resetScroll = function () {
      _this.lastScrollContentSize = 0;
      _this.lastScrollDistance = 0;
    };

    _this.handleScroll = function (event) {
      var _this$props = _this.props,
          onScroll = _this$props.onScroll,
          onEndReached = _this$props.onEndReached,
          onEndReachedThreshold = _this$props.onEndReachedThreshold,
          totalSize = _this$props.totalSize,
          isHorizontal = _this$props.horizontal,
          nestedList = _this$props.nestedList;

      var offset = _this.getNodeOffset();

      var realOffset = offset * _this.pixelRatio;

      if (offset < 0 || _this.state.offset === realOffset || event.target !== _this.rootNode) {
        return;
      }

      if (!nestedList) {
        _this.setState({
          offset: realOffset,
          scrollChangeReason: _constants.SCROLL_CHANGE_REASON.OBSERVED
        });
      }

      if (typeof onScroll === 'function') {
        onScroll(event, offset);
      }

      if (typeof onEndReached === 'function') {
        var _this$rootNode = _this.rootNode,
            scrollLeft = _this$rootNode.scrollLeft,
            scrollTop = _this$rootNode.scrollTop,
            scrollHeight = _this$rootNode.scrollHeight,
            scrollWidth = _this$rootNode.scrollWidth,
            offsetWidth = _this$rootNode.offsetWidth,
            offsetHeight = _this$rootNode.offsetHeight;
        var scrollerNodeSize = isHorizontal ? offsetWidth : offsetHeight;
        var scrollContentSize = totalSize / _this.pixelRatio || (isHorizontal ? scrollWidth : scrollHeight);
        var scrollDistance = isHorizontal ? scrollLeft : scrollTop;
        var isScrollToEnd = scrollDistance > _this.lastScrollDistance;
        var isLoadedMoreContent = scrollContentSize != _this.lastScrollContentSize;

        if (scrollContentSize - scrollDistance - scrollerNodeSize < onEndReachedThreshold && isScrollToEnd && isLoadedMoreContent) {
          _this.lastScrollContentSize = scrollContentSize;

          _this.props.onEndReached();
        }

        _this.lastScrollDistance = scrollDistance;
        window.dispatchEvent(new CustomEvent('recyclerViewEndReached'));
      }

      window.dispatchEvent(new CustomEvent('recyclerViewScroll', {
        detail: {
          offset: realOffset
        }
      }));
    };

    return _this;
  }

  _createClass(VirtualizedList, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          scrollOffset = _this$props2.scrollOffset,
          scrollToIndex = _this$props2.scrollToIndex,
          scrollEventThrottle = _this$props2.scrollEventThrottle;
      var handleScroll = this.handleScroll;

      if (scrollEventThrottle) {
        handleScroll = (0, _throttle["default"])(handleScroll, scrollEventThrottle);
      }

      this.rootNode.addEventListener('scroll', handleScroll, {
        passive: true
      });

      if (scrollOffset != null) {
        this.scrollTo(scrollOffset);
      } else if (scrollToIndex != null) {
        this.scrollTo(this.getOffsetForIndex(scrollToIndex));
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      var _this$state = this.state,
          offset = _this$state.offset,
          scrollChangeReason = _this$state.scrollChangeReason;

      if (prevState.offset !== offset && scrollChangeReason === _constants.SCROLL_CHANGE_REASON.REQUESTED) {
        this.scrollTo(offset);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.rootNode.removeEventListener('scroll', this.handleScroll);
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(value, animated) {
      var _this2 = this;

      if (animated) {
        var timer = new _timer["default"]({
          duration: 400,
          easing: 'easeOutSine',
          onRun: function onRun(e) {
            if (value >= 0) {
              var currentValue = _this2.rootNode[_constants.scrollProp[_this2.scrollDirection]];
              _this2.rootNode[_constants.scrollProp[_this2.scrollDirection]] = currentValue + e.percent * (value / _this2.pixelRatio - currentValue);
            }
          }
        });
        timer.run();
      } else {
        this.rootNode[_constants.scrollProp[this.scrollDirection]] = value / this.pixelRatio;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _a = this.props,
          children = _a.children,
          _a$style = _a.style,
          style = _a$style === void 0 ? {} : _a$style,
          width = _a.width,
          horizontal = _a.horizontal,
          showsHorizontalScrollIndicator = _a.showsHorizontalScrollIndicator,
          showsVerticalScrollIndicator = _a.showsVerticalScrollIndicator,
          className = _a.className,
          nestedList = _a.nestedList,
          props = (0, _tslib.__rest)(_a, ["children", "style", "width", "horizontal", "showsHorizontalScrollIndicator", "showsVerticalScrollIndicator", "className", "nestedList"]);
      var offset = this.state.offset;
      var wrapperStyle = Object.assign(Object.assign(Object.assign({}, STYLE_WRAPPER), style), {
        width: width
      });
      var showsScrollIndicator = horizontal ? showsHorizontalScrollIndicator : showsVerticalScrollIndicator;

      if (!showsScrollIndicator && typeof document !== 'undefined' && !document.getElementById(STYLE_NODE_ID)) {
        var styleNode = document.createElement('style');
        styleNode.id = STYLE_NODE_ID;
        document.head.appendChild(styleNode);
        styleNode.innerHTML = ".".concat(this.props.className, "::-webkit-scrollbar{display: none;}");
      }

      if (nestedList) {
        return React.createElement("div", {
          ref: this.getRef,
          style: wrapperStyle,
          className: className
        }, children);
      }

      var _this$getRenderProps = this.getRenderProps(Object.assign(Object.assign({}, this.props), {
        offset: offset
      })),
          innerStyle = _this$getRenderProps.innerStyle,
          nodeItems = _this$getRenderProps.nodeItems;

      return React.createElement("div", {
        ref: this.getRef,
        style: wrapperStyle,
        className: className
      }, React.createElement("div", {
        style: innerStyle
      }, nodeItems));
    }
  }, {
    key: "getNodeOffset",
    value: function getNodeOffset() {
      return this.rootNode[_constants.scrollProp[this.scrollDirection]];
    }
  }]);

  return VirtualizedList;
}(_BaseList2["default"]);

exports["default"] = VirtualizedList;
VirtualizedList.defaultProps = {
  width: '100%',
  scrollEventThrottle: DEFAULT_SCROLL_CALLBACK_THROTTLE,
  onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
  showsHorizontalScrollIndicator: true,
  showsVerticalScrollIndicator: true,
  className: 'rax-virtualized-list',
  nestedList: false
};
VirtualizedList.propTypes = {
  onScroll: _propTypes["default"].func,
  style: _propTypes["default"].object,
  width: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  onEndReached: _propTypes["default"].func,
  onEndReachedThreshold: _propTypes["default"].number,
  scrollEventThrottle: _propTypes["default"].number,
  className: _propTypes["default"].string,
  nestedList: _propTypes["default"].bool
};
VirtualizedList.NestedList = _NestedList["default"];