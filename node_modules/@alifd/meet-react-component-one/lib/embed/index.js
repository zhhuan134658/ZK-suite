"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _universalEnv = require("universal-env");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function isWeexUrl(url) {
  return /(_wx_tpl=[^\s&]|wh_weex=true)/.test(url);
}

function genFixedUrl(props) {
  var fixedUrl = props.src;
  var prefix = fixedUrl.indexOf('?') >= 0 ? '&' : '?';

  if (typeof props.urlParam == 'string') {
    fixedUrl += prefix + props.urlParam;
  } else {
    var paramsStrArr = [];
    var assignUrlParam = Object.assign({}, props.urlParam, props.defaultUrlParam);

    for (var k in assignUrlParam) {
      paramsStrArr.push(k + '=' + assignUrlParam[k]);
    }

    fixedUrl += prefix + paramsStrArr.join('&');
  }

  return fixedUrl;
}

var defaultProps = {
  defaultUrlParam: {
    _page_inside_embed_: 'true',
    _page_home_isweex_: _universalEnv.isWeex,
    useIframeInWeb: false
  },
  urlParam: {},
  src: ''
};

var Embed = function (props) {
  props = Object.assign(Object.assign({}, defaultProps), props);
  var _props = props,
      useIframeInWeb = _props.useIframeInWeb;
  var url = genFixedUrl(props);

  if (_universalEnv.isMiniApp || _universalEnv.isWeChatMiniProgram) {
    return /*#__PURE__*/_react["default"].createElement("web-view", {
      src: url,
      onMessage: props.onMessage
    });
  }

  if (useIframeInWeb && _universalEnv.isWeb) {
    return /*#__PURE__*/_react["default"].createElement("iframe", Object.assign({}, props, {
      type: _universalEnv.isWeex ? 'weex' : '',
      itemId: 1,
      src: url,
      style: Object.assign(Object.assign({
        borderWidth: 0
      }, props.style), {
        visibility: 'visible'
      })
    }));
  }

  if (_universalEnv.isWeex && isWeexUrl(url) || _universalEnv.isWeb) {
    return /*#__PURE__*/_react["default"].createElement("embed", Object.assign({}, props, {
      type: '',
      itemId: 1,
      src: url,
      style: Object.assign(Object.assign({}, props.style), {
        visibility: 'visible'
      })
    }));
  } else {
    return /*#__PURE__*/_react["default"].createElement("web", Object.assign({}, props, {
      src: url,
      style: props.style
    }));
  }
};

var _default = Embed;
exports["default"] = _default;