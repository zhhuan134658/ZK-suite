"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _view = _interopRequireDefault(require("../view"));

var PanResponder = _interopRequireWildcard(require("universal-panresponder"));

var _isValidSwipe = _interopRequireDefault(require("./isValidSwipe"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var directions = {
  SWIPE_UP: 'SWIPE_UP',
  SWIPE_DOWN: 'SWIPE_DOWN',
  SWIPE_LEFT: 'SWIPE_LEFT',
  SWIPE_RIGHT: 'SWIPE_RIGHT'
};

var SwipeEvent = /*#__PURE__*/function (_Component) {
  _inherits(SwipeEvent, _Component);

  var _super = _createSuper(SwipeEvent);

  function SwipeEvent(props) {
    var _this;

    _classCallCheck(this, SwipeEvent);

    _this = _super.call(this, props);
    _this.state = {
      swipe: {
        direction: null,
        distance: 0,
        velocity: 0
      }
    };
    _this.swipeDetected = false;
    _this.velocityProp = null;
    _this.distanceProp = null;
    _this.swipeDirection = null;
    _this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
        return true;
      },
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
        return true;
      },
      onPanResponderMove: function onPanResponderMove(evt, gestureState) {
        var dx = gestureState.dx,
            dy = gestureState.dy,
            vx = gestureState.vx,
            vy = gestureState.vy;
        var _this$props = _this.props,
            onSwipeBegin = _this$props.onSwipeBegin,
            onSwipe = _this$props.onSwipe,
            horizontal = _this$props.horizontal,
            vertical = _this$props.vertical,
            initialVelocityThreshold = _this$props.initialVelocityThreshold,
            horizontalThreshold = _this$props.horizontalThreshold,
            verticalThreshold = _this$props.verticalThreshold,
            left = _this$props.left,
            right = _this$props.right,
            up = _this$props.up,
            down = _this$props.down;

        if (!_this.props.continuous && _this.swipeDetected) {
          return;
        }

        var initialDetection = false;
        var validHorizontal = false;
        var validVertical = false;

        if (!_this.swipeDetected) {
          initialDetection = true;
          validHorizontal = horizontal ? (0, _isValidSwipe["default"])(vx, dy, initialVelocityThreshold, verticalThreshold) : false;
          validVertical = vertical ? (0, _isValidSwipe["default"])(vy, dx, initialVelocityThreshold, horizontalThreshold) : false;

          if (validHorizontal) {
            (evt.cancelable === undefined || evt.cancelable) && evt.preventDefault && evt.preventDefault();
            _this.velocityProp = 'vx';
            _this.distanceProp = 'dx';

            if ((horizontal || left) && dx < 0) {
              _this.swipeDirection = directions.SWIPE_LEFT;
            } else if ((horizontal || right) && dx > 0) {
              _this.swipeDirection = directions.SWIPE_RIGHT;
            }
          } else if (validVertical) {
            _this.velocityProp = 'vy';
            _this.distanceProp = 'dy';

            if ((vertical || up) && dy < 0) {
              _this.swipeDirection = directions.SWIPE_UP;
            } else if ((vertical || down) && dy > 0) {
              _this.swipeDirection = directions.SWIPE_DOWN;
            }
          }

          if (_this.swipeDirection) {
            _this.swipeDetected = true;
          }
        }

        if (_this.swipeDetected) {
          var distance = gestureState[_this.distanceProp];
          var velocity = gestureState[_this.velocityProp];
          var swipeState = {
            direction: _this.swipeDirection,
            distance: distance,
            velocity: velocity
          };

          if (initialDetection) {
            onSwipeBegin && onSwipeBegin(swipeState);
          } else {
            onSwipe && onSwipe(swipeState);
          }

          if (_this.props.setGestureState) {
            _this.setState({
              swipe: swipeState
            });
          }
        }
      },
      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
        return true;
      },
      onPanResponderTerminate: _this.handleTerminationAndRelease.bind(_assertThisInitialized(_this)),
      onPanResponderRelease: _this.handleTerminationAndRelease.bind(_assertThisInitialized(_this))
    });
    return _this;
  }

  _createClass(SwipeEvent, [{
    key: "render",
    value: function render() {
      var _a = this.props,
          onSwipeBegin = _a.onSwipeBegin,
          onSwipe = _a.onSwipe,
          onSwipeEnd = _a.onSwipeEnd,
          props = (0, _tslib.__rest)(_a, ["onSwipeBegin", "onSwipe", "onSwipeEnd"]);
      var state = this.props.setGestureState ? this.state : null;
      return /*#__PURE__*/_react["default"].createElement(_view["default"], Object.assign({}, this.panResponder.panHandlers, {
        style: Object.assign(Object.assign({}, {
          alignSelf: 'flex-start'
        }), props.handlerStyle)
      }), /*#__PURE__*/_react["default"].createElement(_view["default"], Object.assign({}, props, state), this.props.children));
    }
  }, {
    key: "handleTerminationAndRelease",
    value: function handleTerminationAndRelease() {
      if (this.swipeDetected) {
        var onSwipeEnd = this.props.onSwipeEnd;
        onSwipeEnd && onSwipeEnd({
          direction: this.swipeDirection,
          distance: this.state.swipe.distance,
          velocity: this.state.swipe.velocity
        });
      }

      this.swipeDetected = false;
      this.velocityProp = null;
      this.distanceProp = null;
      this.swipeDirection = null;
    }
  }]);

  return SwipeEvent;
}(_react.Component);

SwipeEvent.propTypes = {
  onSwipeBegin: PropTypes.func,
  onSwipe: PropTypes.func,
  onSwipeEnd: PropTypes.func,
  swipeDecoratorStyle: PropTypes.object
};
SwipeEvent.defaultProps = {
  horizontal: true,
  vertical: true,
  left: false,
  right: false,
  up: false,
  down: false,
  continuous: true,
  initialVelocityThreshold: 0.2,
  verticalThreshold: 1,
  horizontalThreshold: 5,
  setGestureState: true,
  handlerStyle: {}
};
var _default = SwipeEvent;
exports["default"] = _default;