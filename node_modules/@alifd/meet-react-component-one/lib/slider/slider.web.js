"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _view = _interopRequireDefault(require("../view"));

var _SwipeEvent = _interopRequireDefault(require("./SwipeEvent"));

var _classnames = _interopRequireDefault(require("classnames"));

var _rpx2vw = _interopRequireDefault(require("./rpx2vw"));

require("./index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SWIPE_LEFT = 'SWIPE_LEFT';
var SWIPE_RIGHT = 'SWIPE_RIGHT';

var Slider = /*#__PURE__*/function (_Component) {
  _inherits(Slider, _Component);

  var _super = _createSuper(Slider);

  function Slider(props) {
    var _this;

    _classCallCheck(this, Slider);

    _this = _super.call(this, props);

    _this.onSwipeBegin = function () {
      _this.isSwiping = true;
      clearInterval(_this.autoPlayTimer);
    };

    _this.onSwipe = function (_ref) {
      var direction = _ref.direction,
          distance = _ref.distance,
          velocity = _ref.velocity;
      if (_this.isLoopEnd()) return;
      var changeX = distance / document.documentElement.clientWidth * 750 - _this.offsetX;
      var swipeView = (0, _reactDom.findDOMNode)(_this.swipeView.current);
      var styleText = "translate3d(".concat((0, _rpx2vw["default"])(changeX + 'rpx'), ", 0, 0)");
      swipeView.style.transform = styleText;
      swipeView.style.webkitTransform = styleText;
    };

    _this.onSwipeEnd = function (_ref2) {
      var direction = _ref2.direction,
          distance = _ref2.distance,
          velocity = _ref2.velocity;
      _this.isSwiping = false;
      var num = _this.total;

      var realIndex = _this.loopedIndex();

      if (!(_this.isLoopEnd() && (realIndex === num - 1 && direction === SWIPE_LEFT || realIndex === 0 && direction === SWIPE_RIGHT))) {
        _this.slideTo(_this.index, direction);
      }

      if (_this.props.autoPlay) {
        _this.autoPlay();
      }
    };

    _this.getPages = function () {
      var children = _this.props.children;
      return _react.Children.map(children, function (child, i) {
        var ref = /*#__PURE__*/(0, _react.createRef)();
        var translateStyle = {
          width: (0, _rpx2vw["default"])(_this.width + 'rpx'),
          height: (0, _rpx2vw["default"])(_this.height + 'rpx'),
          left: (0, _rpx2vw["default"])(i * _this.width + 'rpx')
        };
        _this.childRefs[i] = ref;
        return /*#__PURE__*/_react["default"].createElement(_view["default"], {
          ref: ref,
          className: (0, _classnames["default"])('one-slider-children', 'childWrap' + i),
          style: translateStyle,
          key: i
        }, child);
      });
    };

    _this.index = props.index;
    _this.height = parseFloat(props.height);
    _this.width = parseFloat(props.width);
    _this.loopIdx = props.index;
    _this.offsetX = _this.index * _this.width;
    _this.isSwiping = false;
    _this.swipeView = /*#__PURE__*/(0, _react.createRef)();
    _this.childRefs = [];
    _this.total = 0;
    _this.autoPlayTimer = null;
    _this.isAutoPlay = false;
    return _this;
  }

  _createClass(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.autoPlay && this.total > 1) {
        this.isAutoPlay = true;
        this.autoPlay();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (!this.isAutoPlay && this.props.autoPlay && this.total > 1) {
        this.isAutoPlay = true;
        this.autoPlay();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.autoPlayTimer && clearInterval(this.autoPlayTimer);
    }
  }, {
    key: "autoPlay",
    value: function autoPlay() {
      var _this2 = this;

      var autoPlayInterval = this.props.autoPlayInterval;
      if (this.isSwiping) return;
      this.autoPlayTimer && clearInterval(this.autoPlayTimer);
      this.autoPlayTimer = setInterval(function interval() {
        if (_this2.isLoopEnd()) return;

        _this2.slideTo(_this2.index, SWIPE_LEFT);
      }, autoPlayInterval);
    }
  }, {
    key: "slideTo",
    value: function slideTo(index, direction) {
      if (this.isSwiping) return;

      if (direction) {
        this.index = direction === SWIPE_LEFT ? index + 1 : index - 1;
      } else {
        this.index = index;
      }

      this.offsetX = this.index * this.width;
      var realIndex = this.loopedIndex();
      var swipeView = (0, _reactDom.findDOMNode)(this.swipeView.current);
      var styleText = "translate3d(".concat((0, _rpx2vw["default"])(-1 * this.offsetX + 'rpx'), ", 0, 0)");
      swipeView.style.transform = styleText;
      swipeView.style.webkitTransform = styleText;
      this.loopIdx = this.index < 0 && realIndex !== 0 ? this.total - realIndex : realIndex;
      this.childRefs[this.loopIdx].current.style.left = this.offsetX / 750 * document.documentElement.clientWidth + 'px';

      if (this.props.onChange) {
        this.props.onChange({
          index: this.loopIdx
        });
      }

      this.forceUpdate();

      if (this.props.autoPlay) {
        this.autoPlay();
      }
    }
  }, {
    key: "isLoopEnd",
    value: function isLoopEnd() {
      var realIndex = this.loopedIndex();
      var num = this.total;

      if (!this.props.loop && (realIndex === num - 1 || realIndex === 0)) {
        return true;
      }

      return false;
    }
  }, {
    key: "loopedIndex",
    value: function loopedIndex() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.total;
      return Math.abs(index) % total;
    }
  }, {
    key: "renderPagination",
    value: function renderPagination() {
      if (this.total <= 1) return null;
      var _this$props = this.props,
          _this$props$paginatio = _this$props.paginationStyle,
          paginationStyle = _this$props$paginatio === void 0 ? {} : _this$props$paginatio,
          activeDot = _this$props.activeDot,
          normalDot = _this$props.normalDot;
      var dots = [];
      var itemSize = paginationStyle.itemSize,
          itemColor = paginationStyle.itemColor,
          itemSelectedColor = paginationStyle.itemSelectedColor,
          otherStyle = (0, _tslib.__rest)(paginationStyle, ["itemSize", "itemColor", "itemSelectedColor"]);
      var size = {
        width: itemSize,
        height: itemSize
      };

      var ActiveDot = activeDot || /*#__PURE__*/_react["default"].createElement(_view["default"], {
        className: "one-slider-dot one-slider-dot-active",
        style: Object.assign({
          backgroundColor: itemSelectedColor
        }, size)
      });

      var NormalDot = normalDot || /*#__PURE__*/_react["default"].createElement(_view["default"], {
        className: "one-slider-dot",
        style: Object.assign({
          backgroundColor: itemColor
        }, size)
      });

      var realIndex = this.loopIdx;

      for (var i = 0; i < this.total; i++) {
        dots.push(i === realIndex ? /*#__PURE__*/(0, _react.cloneElement)(ActiveDot, {
          key: i
        }) : /*#__PURE__*/(0, _react.cloneElement)(NormalDot, {
          key: i
        }));
      }

      return /*#__PURE__*/_react["default"].createElement(_view["default"], {
        className: "one-slider-pagination",
        style: otherStyle
      }, dots);
    }
  }, {
    key: "renderSwipeView",
    value: function renderSwipeView(pages) {
      var _this$props2 = this.props,
          initialVelocityThreshold = _this$props2.initialVelocityThreshold,
          verticalThreshold = _this$props2.verticalThreshold,
          vertical = _this$props2.vertical,
          horizontalThreshold = _this$props2.horizontalThreshold;
      var style = {
        width: (0, _rpx2vw["default"])(this.width + 'rpx'),
        height: (0, _rpx2vw["default"])(this.height + 'rpx')
      };
      return this.total > 1 ? /*#__PURE__*/_react["default"].createElement(_SwipeEvent["default"], {
        className: "one-slider-swipe-wrapper",
        style: style,
        onSwipeBegin: this.onSwipeBegin,
        onSwipeEnd: this.onSwipeEnd,
        onSwipe: this.onSwipe,
        initialVelocityThreshold: initialVelocityThreshold,
        verticalThreshold: verticalThreshold,
        vertical: vertical,
        horizontalThreshold: horizontalThreshold
      }, /*#__PURE__*/_react["default"].createElement(_view["default"], {
        ref: this.swipeView,
        className: "one-slider-swipe",
        style: Object.assign(Object.assign({}, style), {
          transform: "translate3d(".concat((0, _rpx2vw["default"])(-1 * this.offsetX + 'rpx'), ", 0, 0)")
        })
      }, pages)) : /*#__PURE__*/_react["default"].createElement(_view["default"], {
        ref: this.swipeView,
        className: "one-slider-swipe",
        style: style
      }, pages);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          _this$props3$showsPag = _this$props3.showsPagination,
          showsPagination = _this$props3$showsPag === void 0 ? true : _this$props3$showsPag,
          className = _this$props3.className,
          children = _this$props3.children;
      this.total = _react.Children.toArray(children).length;
      return /*#__PURE__*/_react["default"].createElement(_view["default"], {
        style: style,
        className: (0, _classnames["default"])('one-slider', className)
      }, this.renderSwipeView(this.getPages()), showsPagination && this.renderPagination());
    }
  }]);

  return Slider;
}(_react.Component);

Slider.defaultProps = {
  horizontal: true,
  showsPagination: true,
  loop: true,
  autoPlay: false,
  autoPlayInterval: 3000,
  index: 0,
  paginationStyle: {},
  initialVelocityThreshold: 0.7,
  verticalThreshold: 10,
  horizontalThreshold: 10,
  vertical: false
};
Slider.propTypes = {
  onChange: PropTypes.func,
  paginationStyle: PropTypes.object
};
var _default = Slider;
exports["default"] = _default;