"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _view = _interopRequireDefault(require("../view"));

var _universalTransition = _interopRequireDefault(require("universal-transition"));

var _universalEnv = require("universal-env");

require("./index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var bodyEl, originalBodyOverflow;
var modalCount = 0;

if (_universalEnv.isWeb) {
  bodyEl = document.body;
}

function stopPropagation(event) {
  if (_universalEnv.isWeb) {
    event.stopPropagation();
  }
}

function stopEventEffect(event) {
  if (_universalEnv.isWeb) {
    event.preventDefault();
    event.stopPropagation();
  }
}

function Modal(props) {
  var visible = props.visible,
      onMaskClick = props.onMaskClick,
      _props$maskCanBeClick = props.maskCanBeClick,
      maskCanBeClick = _props$maskCanBeClick === void 0 ? true : _props$maskCanBeClick,
      _props$maskStyle = props.maskStyle,
      maskStyle = _props$maskStyle === void 0 ? {} : _props$maskStyle,
      _props$contentStyle = props.contentStyle,
      contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle,
      onShow = props.onShow,
      onHide = props.onHide,
      children = props.children,
      _props$animation = props.animation,
      animation = _props$animation === void 0 ? true : _props$animation,
      _props$delay = props.delay,
      delay = _props$delay === void 0 ? 0 : _props$delay;
  var _props$duration = props.duration,
      duration = _props$duration === void 0 ? [300, 300] : _props$duration;

  if (typeof duration === 'number') {
    duration = [duration, duration];
  } else if (duration.length === 1) {
    duration = [duration[0], duration[0]];
  }

  var maskRef = {
    current: null,
    __animationValid: false,
    __timer: null,
    __pendingShow: null,
    __pendingHide: null
  };

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      visibleState = _useState2[0],
      setVisibleState = _useState2[1];

  var animate = function (show, callback) {
    maskRef.__animationValid = true;
    var animateDuration = show ? duration[0] : duration[1];
    maskRef.__timer = setTimeout(function () {
      maskRef.__animationValid = false;

      if (show && maskRef.current) {
        maskRef.current.style.opacity = '1';
      }

      callback && callback();
    }, animateDuration);
    (0, _universalTransition["default"])(maskRef.current, {
      opacity: show ? 1 : 0
    }, {
      timingFunction: 'ease',
      delay: delay,
      duration: animateDuration
    }, function () {
      if (maskRef.__animationValid) {
        clearTimeout(maskRef.__timer);

        if (show && maskRef.current) {
          maskRef.current.style.opacity = '1';
        }

        callback && callback();
      }
    });
  };

  var show = function () {
    if (!maskRef.__pendingShow) {
      maskRef.__pendingShow = true;

      if (maskRef.__pendingHide) {
        maskRef.__pendingHide = false;
      } else {
        modalCount++;
      }

      if (_universalEnv.isWeb) {
        if (modalCount === 1) {
          originalBodyOverflow = bodyEl.style.overflow;
        }

        bodyEl.style.overflow = 'hidden';
      }

      setVisibleState(true);

      if (animation) {
        maskRef.current.style.opacity = '0';
        animate(true, function () {
          onShow && onShow();
        });
      } else {
        maskRef.current.style.opacity = '1';
        onShow && onShow();
      }
    }
  };

  var hideAction = function () {
    if (_universalEnv.isWeb && modalCount === 1) {
      bodyEl.style.overflow = originalBodyOverflow;
    }

    modalCount--;
    setVisibleState(false);
    onHide && onHide();
  };

  var hide = function () {
    var withAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : animation;

    if (visibleState && !maskRef.__pendingHide) {
      maskRef.__pendingHide = true;
      maskRef.__pendingShow = false;

      if (withAnimate) {
        animate(false, function () {
          if (maskRef.__pendingHide) {
            hideAction();
          }
        });
      } else {
        hideAction();
      }
    }
  };

  (0, _react.useEffect)(function () {
    return function () {
      clearTimeout(maskRef.__timer);
      hide(false);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (visible !== visibleState) {
      visible ? show() : hide();
    } else if (visible) {
      show();
    }
  }, [visible]);
  (0, _react.useEffect)(function () {
    maskRef.__pendingShow = false;
    maskRef.__pendingHide = false;
  }, [visibleState]);
  return /*#__PURE__*/_react["default"].createElement(_view["default"], {
    className: "react-modal-mask",
    style: Object.assign(Object.assign({}, maskStyle), {
      visibility: visibleState ? 'visible' : 'hidden',
      height: '100vh' || 0
    }),
    onTouchMove: stopEventEffect,
    onClick: function onClick() {
      if (props.hasOwnProperty('onMaskClick')) {
        onMaskClick && onMaskClick();
      } else if (maskCanBeClick) {
        hide();
      }
    },
    ref: maskRef
  }, /*#__PURE__*/_react["default"].createElement(_view["default"], {
    className: "react-modal-main",
    style: contentStyle,
    onClick: stopPropagation,
    onTouchMove: stopPropagation
  }, children));
}

Modal.displayName = 'Modal';
var _default = Modal;
exports["default"] = _default;