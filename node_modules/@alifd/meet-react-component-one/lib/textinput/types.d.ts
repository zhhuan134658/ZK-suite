import * as React from 'react';
import keyboardTypeMap from './keyboardTypeMap';
export interface InputDeviceCapabilities {
    readonly firesTouchEvents: boolean;
}
export interface NativeEvent {
    readonly text: string;
}
export declare type TextInputElement = HTMLInputElement | HTMLTextAreaElement;
export interface FocusEvent extends React.FocusEvent {
    readonly sourceCapabilities: InputDeviceCapabilities;
    readonly path: Element[];
}
export declare type ChangeEvent = React.ChangeEvent<TextInputElement>;
export interface InputEvent extends ChangeEvent {
    readonly data: string;
    readonly dataTransfer: string;
    readonly detail: number;
    readonly inputType: string;
    readonly isComposing: boolean;
    readonly sourceCapabilities: InputDeviceCapabilities;
}
export interface EventObject {
    nativeEvent: NativeEvent;
    originalEvent: FocusEvent | ChangeEvent | InputEvent;
    value: string;
    target: TextInputElement;
    data?: any;
}
export declare type TextInputKeyboardType = keyof (typeof keyboardTypeMap);
export interface TextInputProps extends React.RefAttributes<{
    _nativeNode: TextInputElement;
    focus: () => void;
    blur: () => void;
    clear: () => void;
}>, Omit<React.InputHTMLAttributes<HTMLInputElement> & React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'onBlur' | 'onChange' | 'onInput' | 'onFocus' | 'onCompositionStart' | 'onCompositionEnd'> {
    multiline?: boolean;
    accessibilityLabel?: string;
    editable?: boolean;
    keyboardType?: TextInputKeyboardType;
    maxLength?: number;
    maxNumberOfLines?: number;
    numberOfLines?: number;
    placeholder?: string;
    password?: boolean;
    secureTextEntry?: boolean;
    value?: string;
    defaultValue?: string;
    controlled?: boolean;
    placeholderColor?: string;
    confirmType?: any;
    randomNumber?: boolean;
    showCount?: boolean;
    selectionStart?: number;
    selectionEnd?: number;
    composition?: boolean;
    onBlur?: (event: EventObject) => void;
    onFocus?: (event: EventObject) => void;
    onChange?: (event: EventObject) => void;
    onChangeText?: (text: string) => void;
    onInput?: (event: EventObject) => void;
    onCompositionStart?: (event: EventObject) => void;
    onCompositionEnd?: (event: EventObject) => void;
}
