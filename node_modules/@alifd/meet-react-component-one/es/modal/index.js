import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect } from 'react';
import View from '../view';
import transition from 'universal-transition';
import { isWeb } from 'universal-env';
import './index.css';
var bodyEl, originalBodyOverflow;
var modalCount = 0;

if (isWeb) {
  bodyEl = document.body;
}

function stopPropagation(event) {
  if (isWeb) {
    event.stopPropagation();
  }
}

function stopEventEffect(event) {
  if (isWeb) {
    event.preventDefault();
    event.stopPropagation();
  }
}

function Modal(props) {
  var visible = props.visible,
      onMaskClick = props.onMaskClick,
      _props$maskCanBeClick = props.maskCanBeClick,
      maskCanBeClick = _props$maskCanBeClick === void 0 ? true : _props$maskCanBeClick,
      _props$maskStyle = props.maskStyle,
      maskStyle = _props$maskStyle === void 0 ? {} : _props$maskStyle,
      _props$contentStyle = props.contentStyle,
      contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle,
      onShow = props.onShow,
      onHide = props.onHide,
      children = props.children,
      _props$animation = props.animation,
      animation = _props$animation === void 0 ? true : _props$animation,
      _props$delay = props.delay,
      delay = _props$delay === void 0 ? 0 : _props$delay;
  var _props$duration = props.duration,
      duration = _props$duration === void 0 ? [300, 300] : _props$duration;

  if (typeof duration === 'number') {
    duration = [duration, duration];
  } else if (duration.length === 1) {
    duration = [duration[0], duration[0]];
  }

  var maskRef = {
    current: null,
    __animationValid: false,
    __timer: null,
    __pendingShow: null,
    __pendingHide: null
  };

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visibleState = _useState2[0],
      setVisibleState = _useState2[1];

  var height = '100vh';

  var animate = function animate(show, callback) {
    maskRef.__animationValid = true;
    var animateDuration = show ? duration[0] : duration[1];
    maskRef.__timer = setTimeout(function () {
      maskRef.__animationValid = false;

      if (show && maskRef.current) {
        maskRef.current.style.opacity = '1';
      }

      callback && callback();
    }, animateDuration);
    transition(maskRef.current, {
      opacity: show ? 1 : 0
    }, {
      timingFunction: 'ease',
      delay: delay,
      duration: animateDuration
    }, function () {
      if (maskRef.__animationValid) {
        clearTimeout(maskRef.__timer);

        if (show && maskRef.current) {
          maskRef.current.style.opacity = '1';
        }

        callback && callback();
      }
    });
  };

  var show = function show() {
    if (!maskRef.__pendingShow) {
      maskRef.__pendingShow = true;

      if (maskRef.__pendingHide) {
        maskRef.__pendingHide = false;
      } else {
        modalCount++;
      }

      if (isWeb) {
        if (modalCount === 1) {
          originalBodyOverflow = bodyEl.style.overflow;
        }

        bodyEl.style.overflow = 'hidden';
      }

      setVisibleState(true);

      if (animation) {
        maskRef.current.style.opacity = '0';
        animate(true, function () {
          onShow && onShow();
        });
      } else {
        maskRef.current.style.opacity = '1';
        onShow && onShow();
      }
    }
  };

  var hideAction = function hideAction() {
    if (isWeb && modalCount === 1) {
      bodyEl.style.overflow = originalBodyOverflow;
    }

    modalCount--;
    setVisibleState(false);
    onHide && onHide();
  };

  var hide = function hide() {
    var withAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : animation;

    if (visibleState && !maskRef.__pendingHide) {
      maskRef.__pendingHide = true;
      maskRef.__pendingShow = false;

      if (withAnimate) {
        animate(false, function () {
          if (maskRef.__pendingHide) {
            hideAction();
          }
        });
      } else {
        hideAction();
      }
    }
  };

  useEffect(function () {
    return function () {
      clearTimeout(maskRef.__timer);
      hide(false);
    };
  }, []);
  useEffect(function () {
    if (visible !== visibleState) {
      visible ? show() : hide();
    } else if (visible) {
      show();
    }
  }, [visible]);
  useEffect(function () {
    maskRef.__pendingShow = false;
    maskRef.__pendingHide = false;
  }, [visibleState]);
  return /*#__PURE__*/React.createElement(View, {
    className: "react-modal-mask",
    style: Object.assign(Object.assign({}, maskStyle), {
      visibility: visibleState ? 'visible' : 'hidden',
      height: height || 0
    }),
    onTouchMove: stopEventEffect,
    onClick: function onClick() {
      if (props.hasOwnProperty('onMaskClick')) {
        onMaskClick && onMaskClick();
      } else if (maskCanBeClick) {
        hide();
      }
    },
    ref: maskRef
  }, /*#__PURE__*/React.createElement(View, {
    className: "react-modal-main",
    style: contentStyle,
    onClick: stopPropagation,
    onTouchMove: stopPropagation
  }, children));
}

Modal.displayName = 'Modal';
export default Modal;