import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Text from '../text';
import View from '../view';
import Image from '../image';
import './index.css';

function isFunction(functionToCheck) {
  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
}

;

function Time(props) {
  var num = props.num,
      timeWrapStyle = props.timeWrapStyle,
      timeBackground = props.timeBackground,
      timeBackgroundStyle = props.timeBackgroundStyle,
      timeStyle = props.timeStyle,
      secondStyle = props.secondStyle;
  var displayNum = num.toString();

  if (num < 0) {
    displayNum = '00';
  } else if (num < 10) {
    displayNum = '0' + num;
  }

  var numList = displayNum.split('');
  var numListLength = numList.length - 1;
  return /*#__PURE__*/React.createElement(View, {
    className: "react-countdown-item",
    style: timeWrapStyle
  }, timeBackground ? /*#__PURE__*/React.createElement(Image, {
    className: "react-countdown-background",
    source: timeBackground,
    style: timeBackgroundStyle
  }) : null, numList.map(function (time, index) {
    return /*#__PURE__*/React.createElement(Text, {
      key: "time_".concat(index),
      style: index === numListLength ? secondStyle : timeStyle
    }, time);
  }));
}

;

var Index = /*#__PURE__*/function (_Component) {
  _inherits(Index, _Component);

  var _super = _createSuper(Index);

  function Index() {
    var _this;

    _classCallCheck(this, Index);

    _this = _super.apply(this, arguments);
    _this.state = {
      timeRemaining: 0
    };
    _this.timeoutId = 0;

    _this.tick = function () {
      var _this$props = _this.props,
          onComplete = _this$props.onComplete,
          onTick = _this$props.onTick,
          interval = _this$props.interval;
      var timeRemaining = _this.state.timeRemaining;
      var countdownComplete = 1000 > timeRemaining;

      if (_this.timeoutId) {
        clearTimeout(_this.timeoutId);
      }

      if (countdownComplete && isFunction(onComplete)) {
        onComplete();
      } else {
        _this.timeoutId = !countdownComplete ? setTimeout(function () {
          return _this.setState({
            timeRemaining: timeRemaining - interval
          }, function () {
            return isFunction(onTick) && onTick(timeRemaining);
          });
        }, interval) : false;
      }
    };

    return _this;
  }

  _createClass(Index, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var timeRemaining = this.props.timeRemaining;
      this.setState({
        timeRemaining: timeRemaining
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.tick();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.tick();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      if (newProps.timeRemaining !== this.props.timeRemaining) {
        if (this.timeoutId) {
          clearTimeout(this.timeoutId);
        }

        this.setState({
          timeRemaining: newProps.timeRemaining
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.props.timeRemaining !== nextProps.timeRemaining || this.state.timeRemaining !== nextState.timeRemaining;
    }
  }, {
    key: "render",
    value: function render() {
      var timeRemaining = this.state.timeRemaining;
      var _this$props2 = this.props,
          formatFunc = _this$props2.formatFunc,
          timeStyle = _this$props2.timeStyle,
          timeBackgroundStyle = _this$props2.timeBackgroundStyle,
          timeWrapStyle = _this$props2.timeWrapStyle,
          timeBackground = _this$props2.timeBackground,
          secondStyle = _this$props2.secondStyle,
          textStyle = _this$props2.textStyle,
          tpl = _this$props2.tpl;

      if (formatFunc) {
        return formatFunc(timeRemaining);
      }

      var totalSeconds = Math.floor(timeRemaining / 1000);
      var days = parseInt(totalSeconds / 3600 / 24);
      var hours = parseInt(totalSeconds / 3600) % 24;
      var minutes = parseInt(totalSeconds / 60) % 60;
      var seconds = parseInt(totalSeconds % 60);
      var timeType = {
        'd': days,
        'h': hours,
        'm': minutes,
        's': seconds
      };
      var rule = new RegExp('\{[d,h,m,s]\}', 'g');
      var matchlist = [];
      var tmp = null;

      while ((tmp = rule.exec(tpl)) !== null) {
        matchlist.push(tmp.index, tmp.index);
      }

      if (matchlist.length !== 0) {
        matchlist.push(-1);
      }

      var lastPlaintextIndex = 0;
      return /*#__PURE__*/React.createElement(View, {
        className: "react-countdown-main"
      }, matchlist.map(function (val, index) {
        if (val === -1) {
          var lastPlaintext = tpl.slice(lastPlaintextIndex);
          return lastPlaintext ? /*#__PURE__*/React.createElement(Text, {
            style: textStyle,
            key: "text_".concat(index)
          }, lastPlaintext) : null;
        }

        var matchedCharacter = tpl[val + 1];

        switch (matchedCharacter) {
          case 'd':
          case 'h':
          case 'm':
          case 's':
            if (index % 2 === 0) {
              var preText = tpl.slice(lastPlaintextIndex, val);
              return preText ? /*#__PURE__*/React.createElement(Text, {
                style: textStyle,
                key: "text_".concat(index)
              }, preText) : null;
            } else {
              lastPlaintextIndex = val + 3;
              return /*#__PURE__*/React.createElement(Time, {
                num: timeType[matchedCharacter],
                timeWrapStyle: timeWrapStyle,
                timeBackground: timeBackground,
                timeBackgroundStyle: timeBackgroundStyle,
                timeStyle: timeStyle,
                secondStyle: secondStyle,
                key: "time_".concat(index)
              });
            }

          default:
            return null;
        }
      }));
    }
  }]);

  return Index;
}(Component);

Index.propTypes = {
  formatFunc: PropTypes.func,
  onTick: PropTypes.func,
  onComplete: PropTypes.func,
  tpl: PropTypes.string,
  timeRemaining: PropTypes.number,
  secondStyle: PropTypes.object,
  timeStyle: PropTypes.object,
  textStyle: PropTypes.object,
  timeWrapStyle: PropTypes.object,
  timeBackground: PropTypes.shape({
    uri: PropTypes.string
  }),
  timeBackgroundStyle: PropTypes.object,
  interval: PropTypes.number
};
Index.defaultProps = {
  tpl: '{d}天{h}时{m}分{s}秒',
  timeRemaining: 0,
  interval: 1000
};
export default Index;