import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { __rest } from "tslib";
import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import View from '../view';
import * as PanResponder from 'universal-panresponder';
import isValidSwipe from './isValidSwipe';
var directions = {
  SWIPE_UP: 'SWIPE_UP',
  SWIPE_DOWN: 'SWIPE_DOWN',
  SWIPE_LEFT: 'SWIPE_LEFT',
  SWIPE_RIGHT: 'SWIPE_RIGHT'
};

var SwipeEvent = /*#__PURE__*/function (_Component) {
  _inherits(SwipeEvent, _Component);

  var _super = _createSuper(SwipeEvent);

  function SwipeEvent(props) {
    var _this;

    _classCallCheck(this, SwipeEvent);

    _this = _super.call(this, props);
    _this.state = {
      swipe: {
        direction: null,
        distance: 0,
        velocity: 0
      }
    };
    _this.swipeDetected = false;
    _this.velocityProp = null;
    _this.distanceProp = null;
    _this.swipeDirection = null;
    _this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
        return true;
      },
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
        return true;
      },
      onPanResponderMove: function onPanResponderMove(evt, gestureState) {
        var dx = gestureState.dx,
            dy = gestureState.dy,
            vx = gestureState.vx,
            vy = gestureState.vy;
        var _this$props = _this.props,
            onSwipeBegin = _this$props.onSwipeBegin,
            onSwipe = _this$props.onSwipe,
            horizontal = _this$props.horizontal,
            vertical = _this$props.vertical,
            initialVelocityThreshold = _this$props.initialVelocityThreshold,
            horizontalThreshold = _this$props.horizontalThreshold,
            verticalThreshold = _this$props.verticalThreshold,
            left = _this$props.left,
            right = _this$props.right,
            up = _this$props.up,
            down = _this$props.down;

        if (!_this.props.continuous && _this.swipeDetected) {
          return;
        }

        var initialDetection = false;
        var validHorizontal = false;
        var validVertical = false;

        if (!_this.swipeDetected) {
          initialDetection = true;
          validHorizontal = horizontal ? isValidSwipe(vx, dy, initialVelocityThreshold, verticalThreshold) : false;
          validVertical = vertical ? isValidSwipe(vy, dx, initialVelocityThreshold, horizontalThreshold) : false;

          if (validHorizontal) {
            (evt.cancelable === undefined || evt.cancelable) && evt.preventDefault && evt.preventDefault();
            _this.velocityProp = 'vx';
            _this.distanceProp = 'dx';

            if ((horizontal || left) && dx < 0) {
              _this.swipeDirection = directions.SWIPE_LEFT;
            } else if ((horizontal || right) && dx > 0) {
              _this.swipeDirection = directions.SWIPE_RIGHT;
            }
          } else if (validVertical) {
            _this.velocityProp = 'vy';
            _this.distanceProp = 'dy';

            if ((vertical || up) && dy < 0) {
              _this.swipeDirection = directions.SWIPE_UP;
            } else if ((vertical || down) && dy > 0) {
              _this.swipeDirection = directions.SWIPE_DOWN;
            }
          }

          if (_this.swipeDirection) {
            _this.swipeDetected = true;
          }
        }

        if (_this.swipeDetected) {
          var distance = gestureState[_this.distanceProp];
          var velocity = gestureState[_this.velocityProp];
          var swipeState = {
            direction: _this.swipeDirection,
            distance: distance,
            velocity: velocity
          };

          if (initialDetection) {
            onSwipeBegin && onSwipeBegin(swipeState);
          } else {
            onSwipe && onSwipe(swipeState);
          }

          if (_this.props.setGestureState) {
            _this.setState({
              swipe: swipeState
            });
          }
        }
      },
      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
        return true;
      },
      onPanResponderTerminate: _this.handleTerminationAndRelease.bind(_assertThisInitialized(_this)),
      onPanResponderRelease: _this.handleTerminationAndRelease.bind(_assertThisInitialized(_this))
    });
    return _this;
  }

  _createClass(SwipeEvent, [{
    key: "render",
    value: function render() {
      var _a = this.props,
          onSwipeBegin = _a.onSwipeBegin,
          onSwipe = _a.onSwipe,
          onSwipeEnd = _a.onSwipeEnd,
          props = __rest(_a, ["onSwipeBegin", "onSwipe", "onSwipeEnd"]);

      var style = {
        alignSelf: 'flex-start'
      };
      var state = this.props.setGestureState ? this.state : null;
      return /*#__PURE__*/React.createElement(View, Object.assign({}, this.panResponder.panHandlers, {
        style: Object.assign(Object.assign({}, style), props.handlerStyle)
      }), /*#__PURE__*/React.createElement(View, Object.assign({}, props, state), this.props.children));
    }
  }, {
    key: "handleTerminationAndRelease",
    value: function handleTerminationAndRelease() {
      if (this.swipeDetected) {
        var onSwipeEnd = this.props.onSwipeEnd;
        onSwipeEnd && onSwipeEnd({
          direction: this.swipeDirection,
          distance: this.state.swipe.distance,
          velocity: this.state.swipe.velocity
        });
      }

      this.swipeDetected = false;
      this.velocityProp = null;
      this.distanceProp = null;
      this.swipeDirection = null;
    }
  }]);

  return SwipeEvent;
}(Component);

SwipeEvent.propTypes = {
  onSwipeBegin: PropTypes.func,
  onSwipe: PropTypes.func,
  onSwipeEnd: PropTypes.func,
  swipeDecoratorStyle: PropTypes.object
};
SwipeEvent.defaultProps = {
  horizontal: true,
  vertical: true,
  left: false,
  right: false,
  up: false,
  down: false,
  continuous: true,
  initialVelocityThreshold: 0.2,
  verticalThreshold: 1,
  horizontalThreshold: 5,
  setGestureState: true,
  handlerStyle: {}
};
export default SwipeEvent;