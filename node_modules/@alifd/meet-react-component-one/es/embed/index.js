import React from 'react';
import { isWeex, isWeb, isMiniApp, isWeChatMiniProgram } from 'universal-env';

function isWeexUrl(url) {
  return /(_wx_tpl=[^\s&]|wh_weex=true)/.test(url);
}

function genFixedUrl(props) {
  var fixedUrl = props.src;
  var prefix = fixedUrl.indexOf('?') >= 0 ? '&' : '?';

  if (typeof props.urlParam == 'string') {
    fixedUrl += prefix + props.urlParam;
  } else {
    var paramsStrArr = [];
    var assignUrlParam = Object.assign({}, props.urlParam, props.defaultUrlParam);

    for (var k in assignUrlParam) {
      paramsStrArr.push(k + '=' + assignUrlParam[k]);
    }

    fixedUrl += prefix + paramsStrArr.join('&');
  }

  return fixedUrl;
}

var defaultProps = {
  defaultUrlParam: {
    _page_inside_embed_: 'true',
    _page_home_isweex_: isWeex,
    useIframeInWeb: false
  },
  urlParam: {},
  src: ''
};

var Embed = function Embed(props) {
  props = Object.assign(Object.assign({}, defaultProps), props);
  var _props = props,
      useIframeInWeb = _props.useIframeInWeb;
  var url = genFixedUrl(props);

  if (isMiniApp || isWeChatMiniProgram) {
    return /*#__PURE__*/React.createElement("web-view", {
      src: url,
      onMessage: props.onMessage
    });
  }

  if (useIframeInWeb && isWeb) {
    return /*#__PURE__*/React.createElement("iframe", Object.assign({}, props, {
      type: isWeex ? 'weex' : '',
      itemId: 1,
      src: url,
      style: Object.assign(Object.assign({
        borderWidth: 0
      }, props.style), {
        visibility: 'visible'
      })
    }));
  }

  if (isWeex && isWeexUrl(url) || isWeb) {
    return /*#__PURE__*/React.createElement("embed", Object.assign({}, props, {
      type: '',
      itemId: 1,
      src: url,
      style: Object.assign(Object.assign({}, props.style), {
        visibility: 'visible'
      })
    }));
  } else {
    return /*#__PURE__*/React.createElement("web", Object.assign({}, props, {
      src: url,
      style: props.style
    }));
  }
};

export default Embed;