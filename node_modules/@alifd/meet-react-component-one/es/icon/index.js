import { __rest } from "tslib";
import React, { forwardRef } from 'react';
import { isWeb } from 'universal-env';
import Text from '../text';
import Image from '../image';
var fontCache = new Map();
export function createIconSet() {
  var glyphMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var fontFamily = arguments.length > 1 ? arguments[1] : undefined;
  var fontFile = arguments.length > 2 ? arguments[2] : undefined;
  var IconFont = /*#__PURE__*/forwardRef(function (_a, ref) {
    var name = _a.name,
        className = _a.className,
        codePoint = _a.codePoint,
        _a$style = _a.style,
        style = _a$style === void 0 ? {} : _a$style,
        rest = __rest(_a, ["name", "className", "codePoint", "style"]);

    return /*#__PURE__*/React.createElement(Icon, Object.assign({}, rest, {
      ref: ref,
      className: className,
      style: style,
      source: {
        uri: fontFile,
        codePoint: codePoint || glyphMap[name]
      },
      fontFamily: fontFamily
    }));
  });
  IconFont.displayName = 'IconFont';
  return IconFont;
}
var Icon = /*#__PURE__*/forwardRef(function (_a, ref) {
  var _a$source = _a.source;
  _a$source = _a$source === void 0 ? {} : _a$source;

  var uri = _a$source.uri,
      codePoint = _a$source.codePoint,
      fontFamily = _a.fontFamily,
      _a$style2 = _a.style,
      style = _a$style2 === void 0 ? {} : _a$style2,
      rest = __rest(_a, ["source", "fontFamily", "style"]);

  if (uri && !codePoint && !fontFamily) {
    return /*#__PURE__*/React.createElement(Image, Object.assign({}, rest, {
      source: {
        uri: uri
      },
      style: style
    }));
  }

  if (!fontFamily) {
    return /*#__PURE__*/React.createElement(Text, Object.assign({}, rest, {
      ref: ref,
      style: style
    }), codePoint);
  }

  var fontFile = fontCache.get(fontFamily);

  if (!fontFile) {
    fontCache.set(fontFamily, uri);
    var source = "url('".concat(uri, "')");

    if (isWeb) {
      if (window.FontFace) {
        var iconfont = new window.FontFace(fontFamily, source);
        document.fonts.add(iconfont);
      } else {
        var iconFontStyles = "@font-face {\n                src: ".concat(source, ";\n                font-family: ").concat(fontFamily, ";\n              }");

        var _style = document.createElement('style');

        _style.type = 'text/css';

        _style.appendChild(document.createTextNode(iconFontStyles));

        document.head.appendChild(_style);
      }
    }
  } else if (fontFile !== uri) {
    console.error("font-family ".concat(fontFamily, " should be unique!"));
    return null;
  }

  return /*#__PURE__*/React.createElement(Text, Object.assign({}, rest, {
    ref: ref,
    style: Object.assign(Object.assign({}, style), {
      fontFamily: fontFamily
    })
  }), codePoint);
});
Icon.createIconSet = createIconSet;
Icon.displayName = 'Icon';
export default Icon;