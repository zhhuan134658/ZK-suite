import { isNode } from 'universal-env';
import isCdnImage from './isCdnImage';
import isOSSImage from './isOSSImage';
import removeUrlScheme from './removeScheme';
import replaceUrlDomain from './replaceDomain';
import scaling from './scaling';
import webpImage from './webp';
import compress from './compress';
var REG_IMG_SUFFIX = /_(\d+x\d+|cy\d+i\d+|sum|m|b)?(xz|xc)?((?:q\d+)?(?:s\d+)?)(\.jpg)?(_\.webp)?$/i;
export default function (uri, config) {
  var scalingWidth = config.scalingWidth,
      webp = config.webp,
      compressSuffix = config.compressSuffix,
      quality = config.quality,
      acutance = config.acutance,
      removeScheme = config.removeScheme,
      replaceDomain = config.replaceDomain,
      ignoreGif = config.ignoreGif,
      ignorePng = config.ignorePng;
  var newUrl = uri;

  if (typeof uri === 'string') {
    var ret = isCdnImage(uri);

    if (ret) {
      var isOSSImg = isOSSImage(uri);
      var host = ret[1];
      var path = ret[2];
      var suffixRet = path.match(REG_IMG_SUFFIX) || [];
      var notGif = !/\.gif($|\?)/i.test(path) || !ignoreGif;
      var notPng = !/\.png($|\?)/i.test(path) || !ignorePng;
      var scalingSuffix = suffixRet[1] || '';

      if (!isNode && scalingWidth && notGif) {
        scalingSuffix = scaling(scalingWidth, isOSSImg) || scalingSuffix;
      }

      var webpSuffix = suffixRet[5] || '';

      if (webp && notGif) {
        webpSuffix = webpImage(isOSSImg) || webpSuffix;
      }

      var _compressSuffix = suffixRet[3] || '';

      if ((compressSuffix || quality || acutance) && notGif && notPng) {
        _compressSuffix = compress(compressSuffix, quality, acutance, isOSSImg) || _compressSuffix;
      }

      var cut = scalingSuffix ? suffixRet[2] || '' : '';
      var suffix = scalingSuffix || _compressSuffix ? suffixRet[4] || '.jpg' : '';
      var prev = scalingSuffix || _compressSuffix ? '_' : '';

      if (isOSSImg) {
        if (prev == '_') {
          prev = '@';
        }

        if (uri.split('@')[1]) {
          prev = '';
        }
      }

      if (notGif) {
        if (suffixRet[0] !== '_.jpg') {
          newUrl = newUrl.replace(suffixRet[0], '');
        }

        if (isOSSImg) {
          newUrl += prev + scalingSuffix + cut + _compressSuffix + webpSuffix;
        } else {
          newUrl += prev + scalingSuffix + cut + _compressSuffix + suffix + webpSuffix;
        }

        if (removeScheme) {
          newUrl = removeUrlScheme(newUrl);
        }
      }

      if (replaceDomain) {
        newUrl = replaceUrlDomain(newUrl, host);
      }
    }
  }

  return newUrl;
}