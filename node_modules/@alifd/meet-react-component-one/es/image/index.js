import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { __rest } from "tslib";
import React, { useState, useCallback } from 'react';
var EMPTY_SOURCE = {};

function Image(_a) {
  var source = _a.source,
      fallbackSource = _a.fallbackSource,
      onLoad = _a.onLoad,
      onError = _a.onError,
      style = _a.style,
      resizeMode = _a.resizeMode,
      otherProps = __rest(_a, ["source", "fallbackSource", "onLoad", "onError", "style", "resizeMode"]);

  source = source || EMPTY_SOURCE;
  fallbackSource = fallbackSource || EMPTY_SOURCE;
  var nativeProps = otherProps;

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      errorState = _useState2[0],
      setErrorState = _useState2[1];

  nativeProps.onError = useCallback(function (e) {
    if (errorState.uri === undefined) {
      setErrorState({
        uri: source.uri
      });
    }

    onError && onError(e);
  }, [source.uri, onError, errorState]);
  nativeProps.onLoad = useCallback(function (e) {
    if (e && e.success) {
      onLoad && onLoad(e);
    } else if (e && e.currentTarget && e.currentTarget.naturalWidth > 1 && e.currentTarget.naturalHeight > 1) {
      onLoad && onLoad(e);
    } else {
      onError && onError(e);
    }
  }, [onLoad, onError]);

  if (errorState.uri !== undefined) {
    if (errorState.uri !== source.uri) {
      errorState.uri = undefined;
    } else if (fallbackSource.uri != null) {
      source = fallbackSource;
    }
  }

  var _source = source,
      width = _source.width,
      height = _source.height,
      uri = _source.uri;
  nativeProps.src = uri;
  nativeProps.style = Object.assign({
    width: width,
    height: height
  }, style);
  resizeMode = resizeMode || nativeProps.resizeMode;

  if (resizeMode) {
    nativeProps.style.objectFit = resizeMode;
  }

  return /*#__PURE__*/React.createElement("img", Object.assign({}, nativeProps));
}

export default Image;