import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { __rest } from "tslib";
import React, { useRef, useState, forwardRef } from 'react';
import { uniqueClasses } from './utils';
import { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect';
var SwiperSlide = /*#__PURE__*/forwardRef(function () {
  var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var externalRef = arguments.length > 1 ? arguments[1] : undefined;

  var _a$tag = _a.tag,
      Tag = _a$tag === void 0 ? 'div' : _a$tag,
      children = _a.children,
      _a$className = _a.className,
      className = _a$className === void 0 ? '' : _a$className,
      swiper = _a.swiper,
      zoom = _a.zoom,
      rest = __rest(_a, ["tag", "children", "className", "swiper", "zoom"]);

  var slideElRef = useRef(null);

  var _useState = useState('swiper-slide'),
      _useState2 = _slicedToArray(_useState, 2),
      slideClasses = _useState2[0],
      setSlideClasses = _useState2[1];

  function updateClasses(swiper, el, classNames) {
    if (el === slideElRef.current) {
      setSlideClasses(classNames);
    }
  }

  useIsomorphicLayoutEffect(function () {
    if (externalRef) {
      externalRef.current = slideElRef.current;
    }

    if (!slideElRef.current || !swiper) return;

    if (swiper.destroyed) {
      if (slideClasses !== 'swiper-slide') {
        setSlideClasses('swiper-slide');
      }

      return;
    }

    swiper.on('_slideClass', updateClasses);
    return function () {
      if (!swiper) return;
      swiper.off('_slideClass', updateClasses);
    };
  });
  var slideData;

  if (typeof children === 'function') {
    slideData = {
      isActive: slideClasses.indexOf('swiper-slide-active') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-active') >= 0,
      isVisible: slideClasses.indexOf('swiper-slide-visible') >= 0,
      isDuplicate: slideClasses.indexOf('swiper-slide-duplicate') >= 0,
      isPrev: slideClasses.indexOf('swiper-slide-prev') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-prev') >= 0,
      isNext: slideClasses.indexOf('swiper-slide-next') >= 0 || slideClasses.indexOf('swiper-slide-duplicate next') >= 0
    };
  }

  var renderChildren = function renderChildren() {
    return typeof children === 'function' ? children(slideData) : children;
  };

  return /*#__PURE__*/React.createElement(Tag, Object.assign({
    ref: slideElRef,
    className: uniqueClasses("".concat(slideClasses).concat(className ? " ".concat(className) : ''))
  }, rest), zoom ? /*#__PURE__*/React.createElement("div", {
    className: "swiper-zoom-container",
    "data-swiper-zoom": typeof zoom === 'number' ? zoom : undefined
  }, renderChildren()) : renderChildren());
});
SwiperSlide.displayName = 'SwiperSlide';
export { SwiperSlide };