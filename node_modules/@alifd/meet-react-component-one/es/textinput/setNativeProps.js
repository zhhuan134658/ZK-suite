import { isWeb } from 'universal-env';
import { convertUnit } from 'style-unit';
import flexbox from './flexbox';
var ADD_EVENT = 'addEvent';
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var CLASS_NAME = 'className';
var CLASS = 'class';
var STYLE = 'style';
var CHILDREN = 'children';
var EVENT_PREFIX_REGEXP = /^on[A-Z]/;
var objectPrototypeHasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwnProperty(obj, key) {
  return objectPrototypeHasOwnProperty.call(obj, key);
}

function setStyles(node, styles) {
  if (isWeb) {
    var tranformedStyles = {};

    for (var prop in styles) {
      var val = styles[prop];

      if (flexbox.isFlexProp(prop)) {
        flexbox[prop](val, tranformedStyles);
      } else {
        tranformedStyles[prop] = convertUnit(val, prop);
      }
    }

    for (var _prop in tranformedStyles) {
      var transformValue = tranformedStyles[_prop];

      if (Array.isArray(transformValue)) {
        for (var i = 0; i < transformValue.length; i++) {
          node.style[_prop] = transformValue[i];
        }
      } else {
        node.style[_prop] = transformValue;
      }
    }
  }
}

function addEventListener(node, eventName, eventHandler, props) {
  if (isWeb) {
    return node.addEventListener(eventName, eventHandler);
  }
}

function setAttribute(node, propKey, propValue) {
  if (isWeb) {
    if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      return node.innerHTML = propValue.__html;
    }

    if (propKey === CLASS_NAME) {
      propKey = CLASS;
    }

    if (propKey in node) {
      try {
        node[propKey] = propValue;
      } catch (e) {
        node.setAttribute(propKey, propValue);
      }
    } else {
      node.setAttribute(propKey, propValue);
    }
  }
}

export default function setNativeProps(node) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  for (var prop in props) {
    if (!hasOwnProperty(props, prop)) continue;
    var value = props[prop];
    if (prop === CHILDREN) continue;
    if (value === null || value === undefined) continue;

    if (prop === STYLE) {
      setStyles(node, value);
    } else if (EVENT_PREFIX_REGEXP.test(prop)) {
      var eventName = prop.slice(2).toLowerCase();
      addEventListener(node, eventName, value, props);
    } else {
      setAttribute(node, prop, value);
    }
  }
}