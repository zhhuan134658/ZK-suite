import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, Component, createRef, cloneElement } from 'react';
import View from '../view';
import ScrollView from '../scrollview';
var DEFAULT_END_REACHED_THRESHOLD = 500;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;

var Header = /*#__PURE__*/function (_PureComponent) {
  _inherits(Header, _PureComponent);

  var _super = _createSuper(Header);

  function Header() {
    _classCallCheck(this, Header);

    return _super.apply(this, arguments);
  }

  _createClass(Header, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(View, Object.assign({}, this.props));
    }
  }]);

  return Header;
}(PureComponent);

var WebFall = /*#__PURE__*/function (_PureComponent2) {
  _inherits(WebFall, _PureComponent2);

  var _super2 = _createSuper(WebFall);

  function WebFall() {
    var _this;

    _classCallCheck(this, WebFall);

    _this = _super2.apply(this, arguments);

    _this.calcHeightSum = function (arr) {
      var sum = 0;
      arr && arr.forEach(function (item) {
        sum += item;
      });
      return sum;
    };

    return _this;
  }

  _createClass(WebFall, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$renderIte = _this$props.renderItem,
          renderItem = _this$props$renderIte === void 0 ? function () {} : _this$props$renderIte,
          dataSource = _this$props.dataSource,
          _this$props$columnCou = _this$props.columnCount,
          columnCount = _this$props$columnCou === void 0 ? 1 : _this$props$columnCou,
          _this$props$leftGap = _this$props.leftGap,
          leftGap = _this$props$leftGap === void 0 ? 0 : _this$props$leftGap,
          _this$props$rightGap = _this$props.rightGap,
          rightGap = _this$props$rightGap === void 0 ? 0 : _this$props$rightGap;
      var columns = [];
      var moduleHeights = [];

      for (var i = 0; i < columnCount; i++) {
        columns[i] = [];
        moduleHeights[i] = 0;
      }

      dataSource && dataSource.forEach(function (item, i) {
        var targetColumnIndex = 0;
        var minHeight = moduleHeights[0];

        for (var j = 0; j < columnCount; j++) {
          if (moduleHeights[j] < minHeight) {
            minHeight = moduleHeights[j];
            targetColumnIndex = j;
          }
        }

        moduleHeights[targetColumnIndex] += item.height;
        columns[targetColumnIndex].push(item);
      });
      var wrapStyle = Object.assign({}, styles.waterfallWrap, {
        marginLeft: leftGap,
        marginRight: rightGap
      });
      return /*#__PURE__*/React.createElement(View, {
        style: wrapStyle
      }, columns.map(function (column, index) {
        return /*#__PURE__*/React.createElement(View, {
          key: 'column' + index,
          style: styles.waterfallColumn
        }, column.map(function (item, j) {
          return renderItem(item, 'c_' + index + j);
        }));
      }));
    }
  }]);

  return WebFall;
}(PureComponent);

var Waterfall = /*#__PURE__*/function (_Component) {
  _inherits(Waterfall, _Component);

  var _super3 = _createSuper(Waterfall);

  function Waterfall(props) {
    var _this2;

    _classCallCheck(this, Waterfall);

    _this2 = _super3.call(this, props);
    _this2.loadmoreretry = 1;

    _this2.resetScroll = function () {
      _this2.scrollview.current && _this2.scrollview.current.resetScroll();
    };

    _this2.scrollTo = function (options) {
      _this2.scrollview.current && _this2.scrollview.current.scrollTo(options);
    };

    _this2.state = {
      loadmoreretry: 0
    };
    _this2.scrollview = /*#__PURE__*/createRef();
    return _this2;
  }

  _createClass(Waterfall, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var renderHeader = props.renderHeader,
          renderFooter = props.renderFooter,
          _props$columnWidth = props.columnWidth,
          columnWidth = _props$columnWidth === void 0 ? 750 : _props$columnWidth;
      var header = typeof renderHeader == 'function' ? renderHeader() : null;
      var footer = typeof renderFooter == 'function' ? renderFooter() : null;
      header = Array.isArray(header) ? header : [header];
      footer = Array.isArray(footer) ? footer : [footer];
      var cells = header.map(function (child, index) {
        if (child) {
          if (child.type != null && child.type != Header) {
            return /*#__PURE__*/React.createElement(Header, {
              key: 'waterfall_header_' + index
            }, child);
          } else {
            return /*#__PURE__*/cloneElement(child, {});
          }
        }
      });
      cells = cells.concat( /*#__PURE__*/React.createElement(WebFall, Object.assign({
        key: 'waterfall_webfall'
      }, props)));
      cells = cells.concat(footer.map(function (child, index) {
        if (child) {
          if (child.type != Header) {
            return /*#__PURE__*/React.createElement(Header, {
              key: 'waterfall_header_' + index
            }, child);
          } else {
            return /*#__PURE__*/cloneElement(child, {});
          }
        }
      }));
      styles.waterfallColumn.width = columnWidth;
      return /*#__PURE__*/React.createElement(ScrollView, Object.assign({}, props, {
        ref: this.scrollview
      }), cells);
    }
  }]);

  return Waterfall;
}(Component);

var styles = {
  waterfallWrap: {
    overflow: 'hidden',
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  waterfallColumn: {}
};
Waterfall.Header = Header;
export default Waterfall;