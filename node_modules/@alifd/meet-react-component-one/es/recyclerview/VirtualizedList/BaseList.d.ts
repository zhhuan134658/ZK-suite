export default class BaseList extends PureComponent<any, any, any> {
    static defaultProps: {
        overscanCount: number;
    };
    static propTypes: {
        estimatedItemSize: PropTypes.Requireable<number>;
        itemSize: PropTypes.Validator<number | any[] | ((...args: any[]) => any)>;
        overscanCount: PropTypes.Requireable<number>;
        scrollOffset: PropTypes.Requireable<number>;
        scrollToIndex: PropTypes.Requireable<number>;
        scrollToAlignment: PropTypes.Requireable<string>;
        horizontal: PropTypes.Requireable<boolean>;
        stickyIndices: PropTypes.Requireable<number[]>;
        style: PropTypes.Requireable<object>;
        width: PropTypes.Requireable<string | number>;
        totalSize: PropTypes.Requireable<number>;
    };
    constructor(props: any);
    constructor(props: any, context: any);
    pixelRatio: number;
    styleCache: {};
    getEstimatedItemSize(props?: Readonly<any> & Readonly<{
        children?: import("react").ReactNode;
    }>): any;
    getSize(index: any, itemSize: any): any;
    getStyle(index: any, sticky: any): any;
    itemSizeGetter: (itemSize: any) => (index: any) => any;
    sizeAndPositionManager: SizeAndPositionManager;
    scrollDirection: string;
    getOffsetForIndex(index: any, scrollToAlignment?: any, itemCount?: any): any;
    recomputeSizes(startIndex?: number): void;
    getClientWidth(): number;
    getRenderProps(options: any): {
        wrapperStyle: any;
        innerStyle: {
            position: string;
            width: string;
            minHeight: string;
        };
        nodeItems: any[];
    };
}
import { PureComponent } from "react";
import SizeAndPositionManager from "./SizeAndPositionManager";
