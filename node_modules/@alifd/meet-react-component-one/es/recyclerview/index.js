import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { __rest } from "tslib";
import React, { createContext, useContext, forwardRef, memo, useState, useRef, useImperativeHandle } from 'react';
import View from '../view';
import ScrollView from '../scrollview';
import VirtualizedList from './VirtualizedList/index';
var Context = /*#__PURE__*/createContext(true);
var Cell = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_a, ref) {
  var className = _a.className,
      style = _a.style,
      rest = __rest(_a, ["className", "style"]);

  var isInARecyclerView = useContext(Context);
  return /*#__PURE__*/React.createElement(View, Object.assign({}, rest, {
    ref: ref,
    className: className,
    style: style
  }));
}));
Cell.displayName = 'Cell';
var Header = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_a, ref) {
  var className = _a.className,
      style = _a.style,
      rest = __rest(_a, ["className", "style"]);

  var isInARecyclerView = useContext(Context);
  return /*#__PURE__*/React.createElement(View, Object.assign({}, rest, {
    ref: ref,
    className: className,
    style: style
  }));
}));
Header.displayName = 'Header';
var NestedList = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_a, ref) {
  var className = _a.className,
      style = _a.style,
      rest = __rest(_a, ["className", "style"]);

  var isInARecyclerView = useContext(Context);
  return /*#__PURE__*/React.createElement(View, Object.assign({}, rest, {
    ref: ref,
    className: className,
    style: style
  }));
}));
NestedList.displayName = 'NestedList';
var RecyclerView = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      style = props.style,
      rest = __rest(props, ["className", "style"]);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      loadmoreretry = _useState2[0],
      setLoadmoreretry = _useState2[1];

  var scrollview = useRef(null);
  var list = useRef(null);
  var firstNodePlaceholder = useRef(null);
  var needRecycler = props.itemSize || props.nestedList ? true : false;

  var handleScroll = function handleScroll(e) {
    e.nativeEvent = {
      contentOffset: {
        x: -e.contentOffset.x,
        y: -e.contentOffset.y
      },
      contentSize: e.contentSize ? {
        width: e.contentSize.width,
        height: e.contentSize.height
      } : null
    };
    props.onScroll(e);
  };

  useImperativeHandle(ref, function () {
    return {
      _nativeNode: needRecycler ? scrollview.current : scrollview.current._nativeNode,
      resetScroll: function resetScroll() {
        scrollview.current.resetScroll();
      },
      scrollTo: function scrollTo(options) {
        var x = parseInt(options.x);
        var y = parseInt(options.y);
        var animated = options && typeof options.animated !== 'undefined' ? options.animated : true;

        if (needRecycler) {
          scrollview.current.scrollTo(x || y, animated);
        } else {
          scrollview.current.scrollTo(options);
        }
      }
    };
  });

  if (needRecycler) {
    return /*#__PURE__*/React.createElement(VirtualizedList, Object.assign({}, props, {
      className: className,
      style: style,
      ref: scrollview
    }));
  } else {
    return /*#__PURE__*/React.createElement(ScrollView, Object.assign({}, props, {
      className: className,
      style: style,
      ref: scrollview
    }));
  }
});
RecyclerView.Header = Header;
RecyclerView.Cell = Cell;
RecyclerView.NestedList = NestedList;
RecyclerView.displayName = 'RecyclerView';
export default RecyclerView;