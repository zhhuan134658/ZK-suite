import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, createRef } from 'react';
import { findDOMNode } from 'react-dom';

var Canvas = /*#__PURE__*/function (_Component) {
  _inherits(Canvas, _Component);

  var _super = _createSuper(Canvas);

  function Canvas(props) {
    var _this;

    _classCallCheck(this, Canvas);

    _this = _super.call(this, props);

    _this.getContext = function () {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '2d';
      var canvas = findDOMNode(_this.canvas.current);
      return canvas.getContext(type);
    };

    _this.canvas = /*#__PURE__*/createRef();
    return _this;
  }

  _createClass(Canvas, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$style = _this$props.style,
          style = _this$props$style === void 0 ? {} : _this$props$style,
          width = _this$props.width,
          height = _this$props.height;
      var customStyle = {
        width: width !== undefined ? width : style.width,
        height: height !== undefined ? height : style.height
      };
      return /*#__PURE__*/React.createElement("canvas", Object.assign({}, this.props, {
        width: parseInt(customStyle.width),
        height: parseInt(customStyle.height),
        ref: this.canvas
      }));
    }
  }]);

  return Canvas;
}(Component);

Canvas.createImage = function () {
  return new Image();
};

export default Canvas;