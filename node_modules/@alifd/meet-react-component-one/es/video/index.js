import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { isWeex, isWeb, isMiniApp, isWeChatMiniProgram } from 'universal-env';
import cx from 'classnames/dedupe';
import omit from 'omit.js';
var Video = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      style = props.style,
      controls = props.controls,
      playControl = props.playControl,
      autoPlay = props.autoPlay;
  var refEl = useRef(null);
  useImperativeHandle(ref, function () {
    return refEl.current;
  });
  var common = omit(props, ['className', 'controls', 'style', 'playControl']);

  if (controls == undefined || controls === true) {
    common.controls = true;
  } else {
    common.controls = isWeex ? 'nocontrols' : false;
  }

  common.autoPlay = playControl === 'play' || autoPlay;

  if (isWeb && common.autoPlay === false) {
    delete common.autoPlay;
  }

  if (isWeChatMiniProgram || isMiniApp) {
    common.autoplay = common.autoPlay;
    delete common.autoPlay;
  }

  useEffect(function () {
    if (!isWeex) {
      var node = refEl.current;

      if (playControl !== undefined) {
        playControl === 'play' ? node.play() : node.pause();
      }
    }
  }, [playControl]);
  return isWeex ? /*#__PURE__*/React.createElement("video", Object.assign({}, common, {
    ref: refEl,
    className: cx('rax-video', className),
    style: style,
    playStatus: playControl
  })) : /*#__PURE__*/React.createElement("video", Object.assign({}, common, {
    ref: refEl,
    className: cx('rax-video', className),
    style: style,
    "webkit-playsinline": true,
    playsinline: true,
    src: props.src
  }));
});
Video.displayName = 'Video';
export default Video;