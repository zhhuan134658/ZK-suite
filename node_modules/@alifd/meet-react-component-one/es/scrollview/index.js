import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import View from '../view';
import cx from 'classnames';
import Timer from './timer';
import throttle from './throttle';
import './index.css';
var FULL_WIDTH = 750;
var ANIMATION_DURATION = 400;
var DEFAULT_END_REACHED_THRESHOLD = 500;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
var STYLE_NODE_ID = 'one-scrollview-style';
var baseCls = 'one-scrollview';

function _scrollTo(scrollerRef, x, y, animated, duration) {
  var scrollView = scrollerRef.current;
  var scrollLeft = scrollView.scrollLeft;
  var scrollTop = scrollView.scrollTop;

  if (animated) {
    var timer = new Timer({
      duration: duration,
      easing: 'easeOutSine',
      onRun: function onRun(e) {
        if (x >= 0) {
          scrollerRef.current.scrollLeft = scrollLeft + e.percent * (x - scrollLeft);
        }

        if (y >= 0) {
          scrollerRef.current.scrollTop = scrollTop + e.percent * (y - scrollTop);
        }
      }
    });
    timer.run();
  } else {
    if (x >= 0) {
      scrollerRef.current.scrollLeft = x;
    }

    if (y >= 0) {
      scrollerRef.current.scrollTop = y;
    }
  }
}

var ScrollView = /*#__PURE__*/forwardRef(function (props, ref) {
  var _cx;

  var className = props.className,
      style = props.style,
      horizontal = props.horizontal,
      contentContainerStyle = props.contentContainerStyle,
      scrollEventThrottle = props.scrollEventThrottle,
      showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,
      showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,
      onEndReached = props.onEndReached,
      onEndReachedThreshold = props.onEndReachedThreshold,
      onScroll = props.onScroll,
      children = props.children;
  var lastScrollDistance = useRef(0);
  var lastScrollContentSize = useRef(0);
  var scrollerNodeSize = useRef(0);
  var scrollerRef = useRef(null);
  var contentContainerRef = useRef(null);

  var handleScroll = function handleScroll(e) {
    if (props.onScroll) {
      e.nativeEvent = {
        get contentOffset() {
          return {
            x: e.target.scrollLeft,
            y: e.target.scrollTop
          };
        },

        get contentSize() {
          return {
            width: e.target.scrollWidth,
            height: e.target.scrollHeight
          };
        }

      };
      onScroll(e);
    }

    if (onEndReached) {
      var scrollerNode = scrollerRef.current;
      scrollerNodeSize.current = horizontal ? scrollerNode.offsetWidth : scrollerNode.offsetHeight;
      var scrollContentSize = horizontal ? scrollerNode.scrollWidth : scrollerNode.scrollHeight;
      var scrollDistance = horizontal ? scrollerNode.scrollLeft : scrollerNode.scrollTop;
      var isEndReached = scrollContentSize - scrollDistance - scrollerNodeSize.current < onEndReachedThreshold;
      var isScrollToEnd = scrollDistance > lastScrollDistance.current;
      var isLoadedMoreContent = scrollContentSize != lastScrollContentSize.current;

      if (isEndReached && isScrollToEnd && isLoadedMoreContent) {
        lastScrollContentSize.current = scrollContentSize;
        props.onEndReached(e);
      }

      lastScrollDistance.current = scrollDistance;
    }
  };

  useImperativeHandle(ref, function () {
    return {
      _nativeNode: scrollerRef.current,
      resetScroll: function resetScroll() {
        lastScrollContentSize.current = 0;
        lastScrollDistance.current = 0;
      },
      scrollTo: function scrollTo(options) {
        var _ref = options || {},
            _ref$x = _ref.x,
            x = _ref$x === void 0 ? 0 : _ref$x,
            _ref$y = _ref.y,
            y = _ref$y === void 0 ? 0 : _ref$y,
            _ref$animated = _ref.animated,
            animated = _ref$animated === void 0 ? true : _ref$animated,
            _ref$duration = _ref.duration,
            duration = _ref$duration === void 0 ? ANIMATION_DURATION : _ref$duration;

        var pixelRatio = document.documentElement.clientWidth / FULL_WIDTH;

        _scrollTo(scrollerRef, x * pixelRatio, y * pixelRatio, animated, duration);
      },
      scrollIntoView: function scrollIntoView(options) {
        var _ref2 = options || {},
            id = _ref2.id,
            _ref2$animated = _ref2.animated,
            animated = _ref2$animated === void 0 ? true : _ref2$animated,
            _ref2$duration = _ref2.duration,
            duration = _ref2$duration === void 0 ? ANIMATION_DURATION : _ref2$duration;

        if (!id) {
          throw new Error('Params missing id.');
        }

        var targetElement = document.getElementById(id);

        if (targetElement) {
          _scrollTo(scrollerRef, targetElement.offsetLeft, targetElement.offsetTop, animated, duration);
        }
      }
    };
  });

  if (style) {
    var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
      return style[prop] !== undefined;
    });

    if (childLayoutProps.length !== 0) {
      console.warn('ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }
  }

  var contentContainer = /*#__PURE__*/React.createElement(View, {
    ref: contentContainerRef,
    className: cx((_cx = {}, _defineProperty(_cx, "".concat(baseCls, "-content-container-horizontal"), horizontal), _defineProperty(_cx, "".concat(baseCls, "-webcontainer"), !horizontal), _cx)),
    style: contentContainerStyle
  }, children);
  var scrollerStyle = Object.assign({}, style);

  if (scrollerStyle.height === null || scrollerStyle.height === undefined) {
    scrollerStyle.flex = 1;
  }

  var cls = cx(baseCls, "".concat(baseCls, "-").concat(horizontal ? 'horizontal' : 'vertical'), className);
  var showsScrollIndicator = horizontal ? showsHorizontalScrollIndicator : showsVerticalScrollIndicator;
  {
    if (!showsScrollIndicator && typeof document !== 'undefined' && typeof document.getElementById === 'function' && !document.getElementById(STYLE_NODE_ID)) {
      var styleNode = document.createElement('style');
      styleNode.id = STYLE_NODE_ID;
      document.head.appendChild(styleNode);
      styleNode.innerHTML = ".".concat(baseCls, "::-webkit-scrollbar{display: none;}");
    }

    scrollerStyle.WebkitOverflowScrolling = 'touch';

    if (horizontal) {
      scrollerStyle.overflowX = 'scroll';
      scrollerStyle.overflowY = 'hidden';
    } else {
      scrollerStyle.overflowX = 'hidden';
      scrollerStyle.overflowY = 'scroll';
    }

    var webProps = Object.assign({}, props);
    delete webProps.onEndReachedThreshold;
    return /*#__PURE__*/React.createElement(View, Object.assign({}, webProps, {
      ref: scrollerRef,
      className: cls,
      style: scrollerStyle,
      onScroll: scrollEventThrottle ? throttle(handleScroll, scrollEventThrottle) : handleScroll
    }), contentContainer);
  }
});
ScrollView.defaultProps = {
  scrollEventThrottle: DEFAULT_SCROLL_CALLBACK_THROTTLE,
  onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
  showsHorizontalScrollIndicator: true,
  showsVerticalScrollIndicator: true,
  className: 'rax-scrollview'
};
ScrollView.displayName = 'ScrollView';
export default ScrollView;