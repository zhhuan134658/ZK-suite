import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { __rest } from "tslib";
import React, { forwardRef } from 'react';
import { isMiniApp, isWeChatMiniProgram, isWeb } from 'universal-env';
import Text from '../text';
var Link = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      onClick = props.onClick,
      onPress = props.onPress,
      children = props.children,
      _props$miniappHref = props.miniappHref,
      miniappHref = _props$miniappHref === void 0 ? '' : _props$miniappHref,
      rest = __rest(props, ["className", "style", "onClick", "onPress", "children", "miniappHref"]);

  var textStyle = {
    color: style.color,
    lines: style.lines,
    fontSize: style.fontSize,
    fontStyle: style.fontStyle,
    fontWeight: style.fontWeight,
    textDecoration: style.textDecoration || 'none',
    textAlign: style.textAlign,
    fontFamily: style.fontFamily,
    textOverflow: style.textOverflow
  };

  if ((isMiniApp || isWeChatMiniProgram) && !isWeb) {
    var _miniappHref$split = miniappHref.split(':'),
        _miniappHref$split2 = _slicedToArray(_miniappHref$split, 2),
        openType = _miniappHref$split2[0],
        url = _miniappHref$split2[1];

    return /*#__PURE__*/React.createElement("view", {
      onClick: onClick || onPress
    }, /*#__PURE__*/React.createElement("navigator", Object.assign({
      "open-type": openType,
      url: url,
      className: className,
      style: style
    }, rest), children));
  }

  var handleClick = onClick || onPress;
  return /*#__PURE__*/React.createElement("a", Object.assign({}, rest, {
    ref: ref,
    className: className,
    style: style,
    onClick: handleClick
  }), typeof children === 'string' ? /*#__PURE__*/React.createElement(Text, {
    style: textStyle
  }, children) : children);
});
Link.displayName = 'Link';
export default Link;