"use strict";

exports.__esModule = true;
exports.default = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _universalCanvasContext = _interopRequireDefault(require("universal-canvas-context"));

var _utils = require("../utils");

var _hooks = require("../utils/hooks");

var _view = _interopRequireDefault(require("../view"));

var _utils2 = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var CircleProgress = function (props) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$percent = props.percent,
      percent = _props$percent === void 0 ? 0 : _props$percent,
      color = props.color,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      backgroundColor = props.backgroundColor,
      _props$progressive = props.progressive,
      progressive = _props$progressive === void 0 ? false : _props$progressive,
      _props$state = props.state,
      state = _props$state === void 0 ? 'normal' : _props$state,
      text = props.text,
      className = props.className,
      others = (0, _tslib.__rest)(props, ["prefix", "percent", "color", "size", "backgroundColor", "progressive", "state", "text", "className"]);
  var canvasId = (0, _hooks.useGuid)('progress-');

  var progressiveColorEnabled = function () {
    if (progressive) {
      return (0, _utils2.progressiveColor)(percent);
    } else {
      return color || (0, _utils2.statusColor)(state);
    }
  };

  var drawBaseCircle = function (ctx, x, y, r) {
    ctx.save();
    ctx.beginPath();
    ctx.strokeStyle = (0, _utils2.progressBackgroundColor)(backgroundColor);
    ctx.lineWidth = (0, _utils2.progressSize)(size) / 2;
    ctx.arc(x, y, r, 0, Math.PI * 2, false);
    ctx.stroke();
    ctx.closePath();
    ctx.restore();
  };

  var drawCircle = function (ctx, x, y, r, n, rad) {
    ctx.save();
    ctx.beginPath();
    ctx.strokeStyle = progressiveColorEnabled();
    ctx.lineWidth = (0, _utils2.progressSize)(size) / 2;
    ctx.arc(x, y, r, -Math.PI / 2, -Math.PI / 2 + n * rad, false);
    ctx.lineCap = 'round';
    ctx.stroke();
    ctx.restore();
  };

  var drawText = function (ctx, x, y, r, n) {
    ctx.save();
    ctx.font = (0, _utils2.progressCircleFontSize)(size) + "px HelveticaNeue";
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(text || n.toFixed(0) + "%", x, y);
    ctx.restore();
  };

  (0, _react.useEffect)(function () {
    (function () {
      return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var context, elementSize, centerX, centerY, rad;
        return regeneratorRuntime.wrap(function (_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _universalCanvasContext.default)(canvasId, '2d');

              case 2:
                context = _context.sent;
                elementSize = (0, _utils2.progressCircleWidthSize)(size) * 2;
                centerX = (0, _utils2.progressCircleWidthSize)(size);
                centerY = centerX;
                rad = Math.PI * 2 / 100;
                drawBaseCircle(context, centerX, centerY, centerX - (0, _utils2.progressSize)(size) / 2);
                drawCircle(context, centerX, centerY, centerX - (0, _utils2.progressSize)(size) / 2, percent, rad);
                drawText(context, centerX, centerY, centerX - (0, _utils2.progressSize)(size) / 2, percent);

                if (context.draw) {
                  context.draw();
                }

                (0, _utils.nextTick)(function () {
                  if (context.clearRect) {
                    context.clearRect(0, 0, elementSize, elementSize);
                  }

                  drawBaseCircle(context, centerX, centerY, centerX - (0, _utils2.progressSize)(size) / 2);
                  drawCircle(context, centerX, centerY, centerX - (0, _utils2.progressSize)(size) / 2, percent, rad);
                  drawText(context, centerX, centerY, centerX - (0, _utils2.progressSize)(size) / 2, percent);

                  if (context.draw) {
                    context.draw();
                  }
                });

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    })();
  }, [percent, color, size, state, progressive, backgroundColor]);
  var canvasSize = (0, _utils2.progressCircleWidthSize)(size) * 2;
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({}, others, {
    className: (0, _classnames.default)(prefix + "progress", prefix + "progress-circle", className)
  }), /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Canvas, {
    id: canvasId,
    width: canvasSize,
    height: canvasSize,
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)({
      width: canvasSize + "px",
      height: canvasSize + "px"
    })
  }));
};

var _default = /*#__PURE__*/(0, _react.forwardRef)(CircleProgress);

exports.default = _default;