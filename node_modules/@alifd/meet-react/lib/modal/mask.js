"use strict";

exports.__esModule = true;
exports.default = void 0;

var _tslib = require("tslib");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _env = require("@uni/env");

var _view = _interopRequireDefault(require("../view"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Mask = function (props, ref) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      className = props.className,
      visible = props.visible,
      view = props.view,
      others = (0, _tslib.__rest)(props, ["prefix", "className", "visible", "view"]);

  var _useState = (0, _react.useState)(visible),
      show = _useState[0],
      setShow = _useState[1];

  var initOverflow = '';

  if (_env.isWeb) {
    initOverflow = document.body.style.overflow;
  }

  (0, _react.useEffect)(function () {
    if (!visible && show) {
      var t1 = setTimeout(function () {
        setShow(false);
      }, 250);
      return function () {
        clearTimeout(t1);
      };
    } else {
      setShow(visible);
    }

    if (_env.isWeb) {
      if (visible) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = initOverflow;
      }

      return function () {
        var activeMasks = document.getElementsByClassName(clsPrefix + "-mask--active");

        if (activeMasks.length === 0) {
          document.body.style.overflow = initOverflow;
        }
      };
    }
  }, [visible]);

  if (!show) {
    return null;
  }

  var clsPrefix = prefix + "modal";
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({
    ref: ref
  }, others, {
    "disable-scroll": true,
    catchTouchMove: true,
    className: (0, _classnames.default)(className, clsPrefix + "-mask", (_classNames = {}, _classNames[clsPrefix + "-mask--active"] = visible, _classNames[clsPrefix + "-mask--inactive"] = !visible, _classNames))
  }));
};

Mask.displayName = 'Modal.Mask';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Mask);

exports.default = _default;