"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _list = _interopRequireDefault(require("../../list"));

var _menu = _interopRequireDefault(require("../../menu"));

var _tagSelect = _interopRequireDefault(require("../../tag-select"));

var _utils = require("../../utils");

var _view = _interopRequireDefault(require("../../view"));

var _context = _interopRequireDefault(require("../context"));

var _option = _interopRequireDefault(require("../option"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var SelectBody = function () {
  var _useContext = (0, _react.useContext)(_context.default),
      prefix = _useContext.prefix,
      size = _useContext.size,
      displayType = _useContext.displayType,
      disabled = _useContext.disabled,
      mode = _useContext.mode,
      dataSource = _useContext.dataSource,
      _useContext$filterLoc = _useContext.filterLocal,
      filterLocal = _useContext$filterLoc === void 0 ? true : _useContext$filterLoc,
      _useContext$filter = _useContext.filter,
      filter = _useContext$filter === void 0 ? _util.defaultLocalFilter : _useContext$filter,
      searchValue = _useContext.searchValue,
      innerValue = _useContext.innerValue,
      _onChange = _useContext.onChange;

  var renderWithTag = displayType === 'tag';
  var filteredDataSource = dataSource.filter(function (item) {
    if (filterLocal) {
      return filter(searchValue, item);
    }

    return true;
  });

  if (!renderWithTag && mode === 'single') {
    return /*#__PURE__*/(0, _react.createElement)(_menu.default, {
      prefix: prefix,
      size: size,
      selectMode: "single",
      dataSource: filteredDataSource,
      selectedKeys: innerValue.map(function (it) {
        return it.value;
      }),
      onItemClick: function onItemClick(_, item) {
        return _onChange([{
          label: item.label,
          value: item.value
        }]);
      }
    });
  }

  if (renderWithTag) {
    return /*#__PURE__*/(0, _react.createElement)(_view.default, {
      className: prefix + "select--tag-" + size
    }, /*#__PURE__*/(0, _react.createElement)(_tagSelect.default, {
      prefix: prefix,
      mode: mode,
      size: size,
      value: innerValue.map(function (it) {
        return it.value;
      }),
      dataSource: filteredDataSource,
      onChange: function onChange(v) {
        if ((0, _utils.isNil)(v)) {
          _onChange([]);

          return;
        }

        var newValue = Array.isArray(v) ? v : [v];
        var newItems = newValue.map(function (x) {
          return (0, _utils.findInArray)(filteredDataSource, function (item) {
            return item.value === x;
          });
        });

        _onChange(newItems);
      }
    }));
  }

  return /*#__PURE__*/(0, _react.createElement)(_list.default, null, filteredDataSource.map(function (it) {
    return /*#__PURE__*/(0, _react.createElement)(_option.default, _extends({
      key: it.value,
      selected: (0, _util.isSelected)(innerValue, it.value),
      disabled: disabled || it.disabled,
      onClick: function onClick() {
        var selectedItem = (0, _utils.findInArray)(innerValue, function (item) {
          return item.value === it.value;
        });

        if (selectedItem) {
          _onChange((0, _util.removeItemFromArray)(innerValue, selectedItem.value));
        } else {
          _onChange([].concat(innerValue, [{
            label: it.label,
            value: it.value
          }]));
        }
      }
    }, it), it.label);
  }));
};

var _default = SelectBody;
exports.default = _default;