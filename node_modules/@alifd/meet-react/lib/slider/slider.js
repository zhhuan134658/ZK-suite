"use strict";

exports.__esModule = true;
exports.default = void 0;

var _tslib = require("tslib");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var DIRECTION_MAP = {
  ver: 'vertical',
  hoz: 'horizontal'
};

var Slider = function (props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$activeIndex = props.activeIndex,
      activeIndex = _props$activeIndex === void 0 ? 0 : _props$activeIndex,
      _props$showDots = props.showDots,
      showDots = _props$showDots === void 0 ? true : _props$showDots,
      _props$autoplay = props.autoplay,
      autoplay = _props$autoplay === void 0 ? false : _props$autoplay,
      _props$autoplaySpeed = props.autoplaySpeed,
      autoplaySpeed = _props$autoplaySpeed === void 0 ? 3000 : _props$autoplaySpeed,
      _props$dotStyle = props.dotStyle,
      dotStyle = _props$dotStyle === void 0 ? {} : _props$dotStyle,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$infinite = props.infinite,
      infinite = _props$infinite === void 0 ? true : _props$infinite,
      _props$width = props.width,
      width = _props$width === void 0 ? 750 : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? 100 : _props$height,
      _props$slideDirection = props.slideDirection,
      slideDirection = _props$slideDirection === void 0 ? 'hoz' : _props$slideDirection,
      className = props.className,
      children = props.children,
      others = (0, _tslib.__rest)(props, ["prefix", "activeIndex", "showDots", "autoplay", "autoplaySpeed", "dotStyle", "onChange", "infinite", "width", "height", "slideDirection", "className", "children"]);
  return /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Slider, _extends({}, others, {
    className: (0, _classnames.default)(className, prefix + "slider"),
    ref: ref,
    width: "" + width,
    height: "" + height,
    autoPlay: autoplay,
    showsPagination: showDots,
    index: activeIndex,
    paginationStyle: Object.assign({
      itemColor: 'rgba(245,245,245,0.5)',
      itemSelectedColor: '#666',
      itemSize: 16,
      width: '100%',
      bottom: 16
    }, dotStyle),
    autoplay: autoplay,
    direction: DIRECTION_MAP[slideDirection] || 'horizontal',
    loop: infinite,
    autoPlayInterval: autoplaySpeed,
    onChange: function handleChange(e) {
      if (onChange) {
        onChange(e.index || 0);
      }
    }
  }), _react.Children.toArray(children).filter(function (child) {
    if (!child) {
      return null;
    }

    return child;
  }));
};

Slider.displayName = 'Slider';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Slider);

exports.default = _default;