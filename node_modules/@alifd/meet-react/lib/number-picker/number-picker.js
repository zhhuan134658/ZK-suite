"use strict";

exports.__esModule = true;
exports.default = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _env = require("@uni/env");

var _button = _interopRequireDefault(require("../button"));

var _icon = _interopRequireDefault(require("../icon"));

var _utils = require("../utils");

var _hooks = require("../utils/hooks");

var _view = _interopRequireDefault(require("../view"));

var _utils2 = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var MAX_NUMBER_PICKER_THRESHOLD = 9999999;
var isIOSH5 = _env.isWeb && window.navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);

function getInitInputValue(props) {
  var initialValue;

  if ('value' in props) {
    initialValue = props.value;
  } else if (!(0, _utils.isUndef)(props.defaultValue)) {
    initialValue = props.defaultValue;
  }

  return !(0, _utils.isInvalidValue)(initialValue) ? (0, _utils2.toNumber)(initialValue) : '';
}

function isDecreaseDisabled(value, min) {
  if (!(0, _utils.isNumber)(value)) {
    return false;
  }

  return min !== -Infinity && value <= min;
}

function isIncreaseDisabled(value, max) {
  if (!(0, _utils.isNumber)(value)) {
    return false;
  }

  return max !== Infinity && value >= max;
}

function getPrecision(precision, step) {
  if (typeof precision !== 'number' || precision < 0) {
    precision = 0;
  }

  var stepString = step.toString();
  var pcs = 0;

  if (stepString.indexOf('.') >= 0) {
    pcs = stepString.length - stepString.indexOf('.') - 1;
  }

  return Math.max(pcs, precision);
}

function getPrecisionFactor(precision) {
  return Math.pow(10, precision);
}

function hackChrome(value, precision) {
  if (precision > 0) {
    return Number(Number(value).toFixed(precision));
  }

  return value;
}

var NumberPicker = function (props, ref) {
  var _classNames, _classNames2, _classNames3, _classNames4, _classNames5;

  var className = props.className,
      _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      value = props.value,
      defaultValue = props.defaultValue,
      _props$max = props.max,
      max = _props$max === void 0 ? MAX_NUMBER_PICKER_THRESHOLD : _props$max,
      _props$min = props.min,
      min = _props$min === void 0 ? -MAX_NUMBER_PICKER_THRESHOLD : _props$min,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      _k1 = props.keybordType,
      _k2 = props.keyboardType,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$hideButton = props.hideButton,
      hideButton = _props$hideButton === void 0 ? false : _props$hideButton,
      _props$precision = props.precision,
      precisionProp = _props$precision === void 0 ? 0 : _props$precision,
      _props$focused = props.focused,
      focusedProp = _props$focused === void 0 ? false : _props$focused,
      _props$controlled = props.controlled,
      controlled = _props$controlled === void 0 ? false : _props$controlled,
      _props$inputStyle = props.inputStyle,
      inputStyle = _props$inputStyle === void 0 ? {} : _props$inputStyle,
      _props$onBeforeChange = props.onBeforeChange,
      onBeforeChange = _props$onBeforeChange === void 0 ? function () {
    return Promise.resolve();
  } : _props$onBeforeChange,
      onDisableClickProp = props.onDisableClick,
      onDisabledClickProp = props.onDisabledClick,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$onInput = props.onInput,
      onInput = _props$onInput === void 0 ? function () {} : _props$onInput,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? function () {} : _props$onFocus,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? function () {} : _props$onBlur,
      _props$onCorrect = props.onCorrect,
      onCorrect = _props$onCorrect === void 0 ? function () {} : _props$onCorrect,
      others = (0, _tslib.__rest)(props, ["className", "prefix", "size", "value", "defaultValue", "max", "min", "step", "keybordType", "keyboardType", "readOnly", "disabled", "hideButton", "precision", "focused", "controlled", "inputStyle", "onBeforeChange", "onDisableClick", "onDisabledClick", "onChange", "style", "onInput", "onFocus", "onBlur", "onCorrect"]);
  var clsPrefix = prefix + "numberpicker";
  var isControlled = ('value' in props);
  var onDisabledClick = onDisabledClickProp || onDisableClickProp;
  var precision = getPrecision(precisionProp, step);
  var factor = getPrecisionFactor(precision);
  var inputRef = (0, _react.useRef)(null);
  var defaultValAtEmpty = (0, _utils2.getDefaultValue)(min, max, MAX_NUMBER_PICKER_THRESHOLD);

  var _useState = (0, _react.useState)(!!props.focused),
      focused = _useState[0],
      setFocused = _useState[1];

  var _useState2 = (0, _react.useState)(getInitInputValue(props)),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputId = (0, _hooks.useGuid)('mt-np-input-');

  var _useState3 = (0, _react.useState)(isDecreaseDisabled(inputValue, min)),
      decreaseDisabled = _useState3[0],
      setDecreaseDisabled = _useState3[1];

  var _useState4 = (0, _react.useState)(isIncreaseDisabled(inputValue, max)),
      increaseDisabled = _useState4[0],
      setIncreaseDisabled = _useState4[1];

  var keyboardType = (0, _hooks.useDeprecated)('NumberPicker', props, 'keybordType', 'keyboardType', 'number-pad');
  (0, _react.useEffect)(function () {
    var fn = function () {
      if (isControlled) {
        if ((0, _utils.isInvalidValue)(value)) {
          setInputValue('');
          updateInputVal('');
        } else {
          setInputValue((0, _utils2.toNumber)(props.value));
          updateInputVal(props.value);
        }
      }
    };

    if (_utils.isMiniappPlatform) {
      setTimeout(fn, 100);
    } else {
      fn();
    }
  });
  (0, _react.useEffect)(function () {
    setDecreaseDisabled(isDecreaseDisabled(inputValue, min));
    setIncreaseDisabled(isIncreaseDisabled(inputValue, max));
  }, [inputValue, max, min]);

  function handleChange(numValue, e) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function (_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!readOnly) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              _context.prev = 2;
              _context.next = 5;
              return onBeforeChange(numValue);

            case 5:
              _context.next = 10;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](2);
              throw _context.t0;

            case 10:
              doChange(numValue, e);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 7]]);
    }));
  }

  function doChange(val, e) {
    if (!isControlled) {
      setInputValue(val);
    }

    onChange(val, e);
  }

  function updateInputVal(newVal) {
    var cur = inputRef.current;

    if (_env.isWeb && cur && cur._nativeNode) {
      cur._nativeNode.value = '';
      cur._nativeNode.value = newVal;
    } else if (_utils.isStrictWechatMiniProgram || _utils.isStrictMiniApp) {
      var input = document.querySelector("#" + inputId);
      input.value = '';
      input.value = (0, _utils2.toNumber)(newVal);
    }
  }

  var handleDisableClick = function (actionType, e) {
    if ((0, _utils.isFunction)(onDisabledClick)) {
      onDisabledClick(actionType, e);
    }
  };

  var classNameObj = {
    numberPicker: (0, _classnames.default)("" + clsPrefix, clsPrefix + "--" + size),
    textInput: (0, _classnames.default)(clsPrefix + "-input", clsPrefix + "-input--" + size, (_classNames = {}, _classNames[clsPrefix + "-input--focused"] = focused, _classNames[clsPrefix + "-input--disabled"] = !isIOSH5 && disabled, _classNames[clsPrefix + "-input--readonly"] = readOnly, _classNames[clsPrefix + "-input--no-button"] = hideButton, _classNames)),
    decrease: (0, _classnames.default)(clsPrefix + "-button", clsPrefix + "-button-decrease", clsPrefix + "-button--" + size, (_classNames2 = {}, _classNames2[clsPrefix + "-button--disabled"] = disabled || decreaseDisabled, _classNames2)),
    decreaseIcon: (0, _classnames.default)(clsPrefix + "-button-icon", clsPrefix + "-button-icon--" + size, (_classNames3 = {}, _classNames3[clsPrefix + "-button-icon--disabled"] = disabled || decreaseDisabled, _classNames3)),
    increase: (0, _classnames.default)(clsPrefix + "-button", clsPrefix + "-button-increase", clsPrefix + "-button--" + size, (_classNames4 = {}, _classNames4[clsPrefix + "-button--disabled"] = disabled || increaseDisabled, _classNames4)),
    increaseIcon: (0, _classnames.default)(clsPrefix + "-button-icon", clsPrefix + "-button-icon--" + size, (_classNames5 = {}, _classNames5[clsPrefix + "-button-icon--disabled"] = disabled || increaseDisabled, _classNames5))
  };
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(style),
    className: (0, _classnames.default)(classNameObj.numberPicker, className),
    ref: ref
  }, others), !hideButton ? /*#__PURE__*/(0, _react.createElement)(_button.default, {
    disabled: disabled || decreaseDisabled,
    type: "normal",
    model: "outline",
    size: size,
    className: classNameObj.decrease,
    onClick: function (e) {
      if ((0, _utils.isInvalidValue)(inputValue)) {
        handleChange(defaultValAtEmpty, e);
        return;
      }

      var newValue = (0, _utils2.clamp)(inputValue - step, min, max);
      var result = factor * newValue / factor;
      result = hackChrome(result, precision);

      if (newValue !== result && (0, _utils.isFunction)(onCorrect)) {
        onCorrect(result, newValue);
      }

      handleChange(result, e);
    },
    onDisabledClick: function (e) {
      handleDisableClick('decrease', e);
    }
  }, /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    name: "minus",
    className: classNameObj.decreaseIcon
  })) : null, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.TextInput, {
    id: inputId,
    className: classNameObj.textInput,
    ref: inputRef,
    value: "" + inputValue,
    editable: !disabled && !readOnly,
    keyboardType: keyboardType,
    onFocus: function (e) {
      setFocused(true);

      if ((0, _utils.isFunction)(onFocus)) {
        onFocus(e);
      }
    },
    onBlur: function (e) {
      var val = (0, _utils2.toNumber)((0, _utils.getValueFromEvents)(e));

      if ((0, _utils.isFunction)(onBlur)) {
        onBlur(e);
      }

      if ((0, _utils.isInvalidValue)(val)) {
        setFocused(false);
        handleChange('', Object.assign(Object.assign({}, e), {
          originalValue: (0, _utils.getValueFromEvents)(e)
        }));
        return;
      }

      var limitedValue = (0, _utils2.clamp)(val, min, max);

      if (!isControlled) {
        updateInputVal(limitedValue);
      }

      var result = factor * limitedValue / factor;
      result = hackChrome(result, precision);

      if (val !== result) {
        if (!isControlled) {
          updateInputVal(result);
        }

        onCorrect(result, val);
      }

      setFocused(false);
      handleChange(result, Object.assign(Object.assign({}, e), {
        originalValue: (0, _utils.getValueFromEvents)(e)
      }));
    },
    onInput: function (e) {
      if ((0, _utils.isFunction)(onInput)) {
        var val = (0, _utils2.toNumber)((0, _utils.getValueFromEvents)(e));
        onInput(val, e);
      }
    },
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(inputStyle),
    controlled: controlled
  }), !hideButton ? /*#__PURE__*/(0, _react.createElement)(_button.default, {
    disabled: disabled || increaseDisabled,
    type: "normal",
    model: "outline",
    size: size,
    className: classNameObj.increase,
    onClick: function (e) {
      if ((0, _utils.isInvalidValue)(inputValue)) {
        handleChange(defaultValAtEmpty, e);
        return;
      }

      var newValue = (0, _utils2.clamp)(inputValue + step, min, max);
      var result = factor * newValue / factor;
      result = hackChrome(result, precision);

      if (newValue !== result && (0, _utils.isFunction)(onCorrect)) {
        onCorrect(result, newValue);
      }

      handleChange(result, e);
    },
    onDisabledClick: function (e) {
      handleDisableClick('increase', e);
    }
  }, /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    name: "add",
    className: classNameObj.increaseIcon
  })) : null);
};

NumberPicker.displayName = 'NumberPicker';

var _default = /*#__PURE__*/(0, _react.forwardRef)(NumberPicker);

exports.default = _default;