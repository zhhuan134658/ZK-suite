"use strict";

exports.__esModule = true;
exports.default = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _view = _interopRequireDefault(require("../view"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getEndPosition = function (_ref) {
  var translateX = _ref.translateX,
      actualOffset = _ref.actualOffset,
      triggerOffset = _ref.triggerOffset,
      leftCellWidth = _ref.leftCellWidth,
      rightCellWidth = _ref.rightCellWidth;

  if (Math.abs(actualOffset) < triggerOffset) {
    return 0;
  }

  if (actualOffset > 0 && translateX > 0) {
    return leftCellWidth;
  } else if (actualOffset < 0 && translateX < 0) {
    return -rightCellWidth;
  }

  return 0;
};

var SlideView = function (props) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      children = props.children,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 500 : _props$duration,
      className = props.className,
      _props$leftActions = props.leftActions,
      leftActions = _props$leftActions === void 0 ? [] : _props$leftActions,
      _props$rightActions = props.rightActions,
      rightActions = _props$rightActions === void 0 ? [] : _props$rightActions,
      _props$triggerOffset = props.triggerOffset,
      triggerOffset = _props$triggerOffset === void 0 ? 50 : _props$triggerOffset,
      _props$uid = props.uid,
      uid = _props$uid === void 0 ? 0 : _props$uid,
      onOpen = props.onOpen,
      onClose = props.onClose,
      others = (0, _tslib.__rest)(props, ["prefix", "children", "duration", "className", "leftActions", "rightActions", "triggerOffset", "uid", "onOpen", "onClose"]);

  var _useState = (0, _react.useState)(0),
      translateX = _useState[0],
      setTranslateX = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      duringTransition = _useState2[0],
      toggleTransition = _useState2[1];

  var startTouchRecord = (0, _react.useRef)(null);
  var prevTouchRecord = (0, _react.useRef)(null);
  var rightWidthRecord = (0, _react.useRef)(0);
  var leftWidthRecord = (0, _react.useRef)(0);
  var openStatusRecored = (0, _react.useRef)(false);
  var clsPrefix = prefix + "slide-view";
  var resetPosition = (0, _react.useCallback)(function () {
    scroll(0);
  }, []);
  var handleTouchStart = (0, _react.useCallback)(function (e) {
    startTouchRecord.current = e.changedTouches[0];
    prevTouchRecord.current = e.changedTouches[0];
  }, []);
  var handleTouchMove = (0, _react.useCallback)(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var currentTouch = getCurrentTouch(Array.from(e.changedTouches));
    var offsetX = currentTouch.pageX - prevTouchRecord.current.pageX;
    var offsetY = currentTouch.pageY - prevTouchRecord.current.pageY;

    if (Math.abs(offsetX) < Math.abs(offsetY)) {
      return;
    }

    if (e.cancelable) {
      e.preventDefault();
    }

    prevTouchRecord.current = currentTouch;
    var nextTranslateX = translateX + offsetX;

    if (nextTranslateX > leftWidthRecord.current || -nextTranslateX > rightWidthRecord.current) {
      return;
    }

    if (openStatusRecored.current === false && prevTouchRecord.current.pageX !== startTouchRecord.current.pageX) {
      var direction = prevTouchRecord.current.pageX > startTouchRecord.current.pageX ? 'left' : 'right';
      openStatusRecored.current = true;

      if ((0, _utils.isFunction)(onOpen)) {
        onOpen(direction);
      }
    }

    setTranslateX(nextTranslateX);
  }, [translateX]);
  var handleTouchEnd = (0, _react.useCallback)(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var endTouch = getCurrentTouch(Array.from(e.changedTouches));
    var actualOffset = endTouch.pageX - startTouchRecord.current.pageX;
    var endPosition = getEndPosition({
      translateX: translateX,
      actualOffset: actualOffset,
      triggerOffset: triggerOffset,
      leftCellWidth: leftWidthRecord.current,
      rightCellWidth: rightWidthRecord.current
    });
    startTouchRecord.current = null;
    prevTouchRecord.current = null;
    scroll(endPosition);

    if (openStatusRecored.current === true && endPosition === 0) {
      openStatusRecored.current = false;

      if ((0, _utils.isFunction)(onClose)) {
        onClose();
      }
    }
  }, [translateX, duringTransition]);
  var scroll = (0, _react.useCallback)(function (pos) {
    toggleTransition(true);
    setTranslateX(pos);
    setTimeout(function () {
      toggleTransition(false);
    }, duration);
  }, [duration]);
  var getCurrentTouch = (0, _react.useCallback)(function (touches) {
    return touches.find(function (_ref2) {
      var identifier = _ref2.identifier;
      return identifier === prevTouchRecord.current.identifier;
    });
  }, []);
  var handleClick = (0, _react.useCallback)(function (cb) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var hideFlag;
      return regeneratorRuntime.wrap(function (_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              hideFlag = true;

              if (!(cb && typeof cb === 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return cb();

            case 4:
              hideFlag = _context.sent;

            case 5:
              if (!(hideFlag === false)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return");

            case 7:
              resetPosition();

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  }, [duringTransition]);
  (0, _react.useEffect)(function () {
    (function () {
      return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function (_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _utils.getWidth)(prefix + "cell-left-" + uid);

              case 2:
                leftWidthRecord.current = _context2.sent;
                _context2.next = 5;
                return (0, _utils.getWidth)(prefix + "cell-right-" + uid);

              case 5:
                rightWidthRecord.current = _context2.sent;

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    })();
  }, [uid, leftActions, rightActions]);
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({}, others, {
    className: (0, _classnames.default)(className, "" + clsPrefix)
  }), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-wrapper",
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)({
      transform: "translate3d(" + translateX + "px, 0, 0)",
      transitionDuration: duringTransition ? (duration / 1000).toFixed(1) + "s" : '0s'
    })
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-cell " + clsPrefix + "-cell--left",
    id: prefix + "cell-left-" + uid
  }, leftActions.map(function (item, index) {
    return /*#__PURE__*/(0, _react.createElement)(_view.default, {
      className: clsPrefix + "-button-item",
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  })), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-children",
    onClick: resetPosition,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  }, children), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-cell " + clsPrefix + "-cell--right",
    id: prefix + "cell-right-" + uid
  }, rightActions.map(function (item, index) {
    return /*#__PURE__*/(0, _react.createElement)(_view.default, {
      className: clsPrefix + "-button-item",
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  }))));
};

SlideView.displayName = 'SlideView';

var _default = /*#__PURE__*/(0, _react.forwardRef)(SlideView);

exports.default = _default;