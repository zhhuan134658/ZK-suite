import Field, { FieldOption, Rule, ValidateResults } from '@alifd/field';
import FieldElement, { FieldElementProps } from './element';
declare type ValidateCallback = (errors: any[], values: ValidateResults) => Promise<ValidateResults>;
export default class MeetField extends Field {
    static useField(options?: FieldOption): MeetField;
    com: any;
    options: any;
    instance: any;
    afterValidateRerender?: any;
    setOptions: (options: any) => void;
    constructor(contextComp: any, options: FieldOption);
    validatePromise(names?: string[] | string, callback?: (errors: any[], values: ValidateResults) => Promise<any>): Promise<ValidateResults>;
    validate(names?: string[] | string, callback?: ValidateCallback): Promise<ValidateResults>;
}
export { FieldOption, Rule, ValidateResults, FieldElement, FieldElementProps };
