"use strict";

exports.__esModule = true;
exports.default = void 0;

var _tslib = require("tslib");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _view = _interopRequireDefault(require("../view"));

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getInitCheckedStatus = function (props) {
  if ('checked' in props) {
    return props.checked;
  } else if (props.defaultChecked) {
    return props.defaultChecked;
  }
};

var Radio = function (props, ref) {
  var _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      children = props.children,
      checked = props.checked,
      onChange = props.onChange,
      disabled = props.disabled,
      className = props.className,
      defaultChecked = props.defaultChecked,
      readOnly = props.readOnly,
      onClick = props.onClick,
      value = props.value,
      label = props.label,
      text = props.text,
      others = (0, _tslib.__rest)(props, ["size", "prefix", "children", "checked", "onChange", "disabled", "className", "defaultChecked", "readOnly", "onClick", "value", "label", "text"]);

  var _useState = (0, _react.useState)(getInitCheckedStatus(props)),
      selected = _useState[0],
      setSelected = _useState[1];

  var selectedPrefix = selected ? '--selected' : '--unselected';
  var disabledPrefix = disabled ? '-disabled' : '';
  var circleCls = (0, _classnames.default)([prefix + "radio-circle", prefix + "radio-circle--" + size, prefix + "radio-circle" + selectedPrefix + disabledPrefix]);
  var pointCls = (0, _classnames.default)([prefix + "radio-point", prefix + "radio-point--" + size, prefix + "radio-point" + selectedPrefix + disabledPrefix]);
  var textCls = (0, _classnames.default)([prefix + "radio-text", prefix + "radio-text--" + size, prefix + "radio-text" + selectedPrefix + disabledPrefix]);
  (0, _react.useEffect)(function () {
    if ('checked' in props) {
      setSelected(props.checked);
    }
  });

  var handleClick = function (e) {
    if (!disabled && !readOnly) {
      if ((0, _utils.isFunction)(onChange)) {
        onChange(!selected, e);
      }

      if ((0, _utils.isFunction)(onClick)) {
        onClick(e);
      }

      if (!('checked' in props)) {
        setSelected(!selected);
      }
    }
  };

  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({}, others, {
    ref: ref,
    className: (0, _classnames.default)(prefix + "radio-container", prefix + "radio-container--" + size, className),
    onClick: handleClick
  }), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: circleCls
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: pointCls
  })), (0, _utils.isString)(children) || (0, _utils.isNumber)(children) ? /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: textCls
  }, children) : /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: textCls
  }, children));
};

Radio.displayName = 'Radio';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Radio);

exports.default = _default;