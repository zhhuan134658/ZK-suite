"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var DateIndicator = function (props) {
  var _classNames, _classNames2;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      highlight = props.highlight,
      _props$separator = props.separator,
      separator = _props$separator === void 0 ? ' ' : _props$separator,
      _props$values = props.values,
      values = _props$values === void 0 ? [] : _props$values;
  var clsPrefix = prefix + "datepicker";
  return /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.View, {
    className: clsPrefix + "-time-indicator"
  }, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: (0, _classnames.default)(clsPrefix + "-time-indicator-text", (_classNames = {}, _classNames[clsPrefix + "-time-indicator--highlight"] = highlight === 0, _classNames)),
    "x-if": highlight === 0
  }, values[0]), /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: clsPrefix + "-time-indicator-text"
  }, separator), /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: (0, _classnames.default)(clsPrefix + "-time-indicator-text", (_classNames2 = {}, _classNames2[clsPrefix + "-time-indicator--highlight"] = highlight === 1, _classNames2)),
    "x-if": highlight === 1
  }, values[1]));
};

var _default = DateIndicator;
exports.default = _default;