"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _locale = require("../../locale");

var _datePicker = _interopRequireDefault(require("../embed-picker/date-picker"));

var _minutePicker = _interopRequireDefault(require("../embed-picker/minute-picker"));

var _baseRangePicker = _interopRequireDefault(require("./base-range-picker"));

var _utils = require("../embed-picker/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DateRangePicker = /*#__PURE__*/function (_BaseRangePicker) {
  _inheritsLoose(DateRangePicker, _BaseRangePicker);

  function DateRangePicker() {
    return _BaseRangePicker.apply(this, arguments) || this;
  }

  var _proto = DateRangePicker.prototype;

  _proto.renderFirstChild = function renderFirstChild(value, validRange, onChange) {
    return this.renderBase(value, validRange, onChange);
  };

  _proto.renderSecondChild = function renderSecondChild(value, validRange, onChange) {
    return this.renderBase(value, validRange, onChange);
  };

  _proto.renderBase = function renderBase(value, validRange, onChange) {
    var showTime = this.props.showTime;
    return showTime ? /*#__PURE__*/(0, _react.createElement)(_minutePicker.default, {
      value: value,
      validRange: validRange,
      onChange: onChange
    }) : /*#__PURE__*/(0, _react.createElement)(_datePicker.default, {
      value: value,
      validRange: validRange,
      onChange: onChange
    });
  };

  _createClass(DateRangePicker, [{
    key: "rangeType",
    get: function get() {
      return 'date';
    }
  }, {
    key: "timeFormat",
    get: function get() {
      var showTime = this.props.showTime;
      return typeof showTime === 'object' && showTime.format ? showTime.format : 'HH:mm';
    }
  }, {
    key: "format",
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !(0, _utils.withTime)(format) ? format + " " + this.timeFormat : format;
    }
  }]);

  return DateRangePicker;
}(_baseRangePicker.default);

var _default = (0, _locale.withLocale)(DateRangePicker, {
  name: 'DateRangePicker',
  defaultLocale: {
    ok: '',
    cancel: '',
    prev: '上一步',
    next: '下一步',
    selectStartTime: '选择开始日期',
    selectEndTime: '选择结束日期'
  }
});

exports.default = _default;