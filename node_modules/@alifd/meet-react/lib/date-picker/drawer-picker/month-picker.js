"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _monthPicker = _interopRequireDefault(require("../embed-picker/month-picker"));

var _basePicker = _interopRequireDefault(require("./base-picker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MonthPicker = /*#__PURE__*/function (_BasePicker) {
  _inheritsLoose(MonthPicker, _BasePicker);

  function MonthPicker() {
    return _BasePicker.apply(this, arguments) || this;
  }

  var _proto = MonthPicker.prototype;

  _proto.renderPicker = function renderPicker() {
    return /*#__PURE__*/(0, _react.createElement)(_monthPicker.default, {
      value: this.state.pickerValue,
      disabledDate: this.props.disabledDate,
      onChange: this.handleChange,
      validRange: this.props.validRange
    });
  };

  _proto.getDefaultFormat = function getDefaultFormat() {
    return 'YYYY-MM';
  };

  return MonthPicker;
}(_basePicker.default);

exports.default = MonthPicker;