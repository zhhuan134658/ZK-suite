"use strict";

exports.__esModule = true;
exports.default = void 0;

var _tslib = require("tslib");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _view = _interopRequireDefault(require("../view"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Badge = function (props, ref) {
  var _classNames, _classNames2;

  var _props$overflowCount = props.overflowCount,
      overflowCount = _props$overflowCount === void 0 ? 99 : _props$overflowCount,
      className = props.className,
      _props$count = props.count,
      count = _props$count === void 0 ? 0 : _props$count,
      _props$dot = props.dot,
      dot = _props$dot === void 0 ? false : _props$dot,
      children = props.children,
      _props$content = props.content,
      content = _props$content === void 0 ? '' : _props$content,
      _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      others = (0, _tslib.__rest)(props, ["overflowCount", "className", "count", "dot", "children", "content", "prefix"]);
  var type = dot ? 'dot' : 'normal';
  var auto = _react.Children.count(children) > 0;
  var sup = count;
  sup = Number(count);

  if (!isNaN(sup) && sup !== 0) {
    sup = sup > overflowCount ? overflowCount + "+" : sup;
  } else {
    sup = count;
  }

  var BadgeComponent = sup === 0 && type === 'normal' && !content ? null : /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: (0, _classnames.default)((_classNames = {}, _classNames[prefix + "badge--custom"] = content, _classNames[prefix + "badge-content"] = !content, _classNames[prefix + "badge-content--" + type] = !content, _classNames[prefix + "badge-content--auto"] = auto, _classNames))
  }, content ? content : dot ? null : /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: prefix + "badge-text"
  }, sup));
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({}, others, {
    ref: ref,
    className: (0, _classnames.default)(className, prefix + "badge", prefix + "badge--" + type, (_classNames2 = {}, _classNames2[prefix + "badge--auto"] = auto, _classNames2))
  }), children, BadgeComponent);
};

Badge.displayName = 'Badge';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Badge);

exports.default = _default;