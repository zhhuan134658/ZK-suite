"use strict";

exports.__esModule = true;
exports.show = exports.hide = exports.confirm = exports.alert = void 0;

var _react = _interopRequireWildcard(require("react"));

var _render = require("../utils/render");

var _dialog = _interopRequireDefault(require("./dialog"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var DialogWrapper = function (props) {
  var onClose = props.onClose;

  var _useState = (0, _react.useState)(true),
      visible = _useState[0],
      setVisible = _useState[1];

  return /*#__PURE__*/(0, _react.createElement)(_dialog.default, _extends({}, props, {
    onClose: function handleClose(reason, e) {
      setVisible(false);
      setTimeout(function () {
        if (onClose) {
          onClose(reason, e);
        }
      }, 300);
    },
    visible: visible,
    disablePortal: true
  }));
};

var hideStack = [];

var show = function (props) {
  var emptyFn = function () {};

  var _props$onClose = props.onClose,
      _onClose = _props$onClose === void 0 ? emptyFn : _props$onClose;

  var hideCurrent = (0, _render.renderToRoot)( /*#__PURE__*/(0, _react.createElement)(DialogWrapper, _extends({}, props, {
    onClose: function onClose(reason, e) {
      _onClose(reason, e);

      _onClose = emptyFn;
      hideCurrent();
    }
  })), function () {
    return _onClose('api', null);
  });
  hideStack.push(hideCurrent);
  return {
    hide: hideCurrent
  };
};

exports.show = show;

var hide = function () {
  while (hideStack.length) {
    var h = hideStack.pop();

    if (h) {
      h.call(null);
    }
  }
};

exports.hide = hide;

var alert = function (props) {
  return show(Object.assign(Object.assign({}, props), {
    type: 'alert'
  }));
};

exports.alert = alert;

var confirm = function (props) {
  return show(Object.assign(Object.assign({}, props), {
    type: 'confirm'
  }));
};

exports.confirm = confirm;