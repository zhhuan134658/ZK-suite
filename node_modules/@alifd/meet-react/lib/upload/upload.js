"use strict";

exports.__esModule = true;
exports.default = void 0;

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _universalChooseImage = _interopRequireDefault(require("universal-choose-image"));

var _icon = _interopRequireDefault(require("../icon"));

var _locale = require("../locale");

var _zhCn = _interopRequireDefault(require("../locale/lang/zh-cn"));

var _message = _interopRequireDefault(require("../message"));

var _utils = require("../utils");

var _types = require("../utils/types");

var _view = _interopRequireDefault(require("../view"));

var _card = _interopRequireDefault(require("./item/card"));

var _request = _interopRequireDefault(require("./request"));

var _utils2 = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var FILE_CACHAE = {};

var updateFileStatus = function (files) {
  if (files === void 0) {
    files = [];
  }

  if (!(0, _utils.isValidArray)(files)) {
    return [];
  }

  return [].concat(files).map(function (file) {
    var uid = file.uid,
        state = file.state;

    if (FILE_CACHAE[uid] === 'done' && state === 'uploading') {
      file.state = 'done';
    }

    return file;
  });
};

var Upload = function (props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      extraIcon = props.extraIcon,
      className = props.className,
      action = props.action,
      _props$limit = props.limit,
      limit = _props$limit === void 0 ? 1 : _props$limit,
      _props$label = props.label,
      label = _props$label === void 0 ? '' : _props$label,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      dataProp = props.data,
      headers = props.headers,
      request = props.request,
      formatter = props.formatter,
      disabled = props.disabled,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$listType = props.listType,
      listType = _props$listType === void 0 ? 'card' : _props$listType,
      _props$name = props.name,
      nameProp = _props$name === void 0 ? 'file' : _props$name,
      filePicker = props.filePicker,
      withCredentials = props.withCredentials,
      fileKeyName = props.fileKeyName,
      _props$fileType = props.fileType,
      fileType = _props$fileType === void 0 ? 'image' : _props$fileType,
      _props$accept = props.accept,
      accept = _props$accept === void 0 ? 'image/*' : _props$accept,
      _props$useDataURL = props.useDataURL,
      useDataURL = _props$useDataURL === void 0 ? true : _props$useDataURL,
      _props$autoUpload = props.autoUpload,
      autoUpload = _props$autoUpload === void 0 ? true : _props$autoUpload,
      _props$hasRemove = props.hasRemove,
      hasRemove = _props$hasRemove === void 0 ? true : _props$hasRemove,
      _props$showAddButton = props.showAddButton,
      showAddButton = _props$showAddButton === void 0 ? true : _props$showAddButton,
      _props$singleLimit = props.singleLimit,
      singleLimit = _props$singleLimit === void 0 ? 9 : _props$singleLimit,
      beforeUpload = props.beforeUpload,
      afterSelect = props.afterSelect,
      onProgress = props.onProgress,
      _onSuccess = props.onSuccess,
      _onError = props.onError,
      progressProps = props.progressProps,
      onSelect = props.onSelect,
      onChange = props.onChange,
      onRemove = props.onRemove,
      onPreview = props.onPreview,
      _props$sizeType = props.sizeType,
      sizeType = _props$sizeType === void 0 ? ['original', 'compressed'] : _props$sizeType,
      _props$sourceType = props.sourceType,
      sourceType = _props$sourceType === void 0 ? ['album', 'camera'] : _props$sourceType,
      children = props.children,
      others = (0, _tslib.__rest)(props, ["prefix", "extraIcon", "className", "action", "limit", "label", "value", "defaultValue", "data", "headers", "request", "formatter", "disabled", "size", "listType", "name", "filePicker", "withCredentials", "fileKeyName", "fileType", "accept", "useDataURL", "autoUpload", "hasRemove", "showAddButton", "singleLimit", "beforeUpload", "afterSelect", "onProgress", "onSuccess", "onError", "progressProps", "onSelect", "onChange", "onRemove", "onPreview", "sizeType", "sourceType", "children"]);
  var locale = (0, _locale.useLocale)('Upload', others, _zhCn.default.Upload);

  var _useState = (0, _react.useState)(valueProp || defaultValue || []),
      value = _useState[0],
      setValue = _useState[1];

  var newestValue = (0, _react.useRef)(value);
  var timerQueue = (0, _react.useRef)([]);
  var uploadRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if ((0, _utils.isValidArray)(valueProp)) {
      valueProp.forEach(function (file) {
        if (file.state && file.uid) {
          FILE_CACHAE[file.uid] = file.state;
        }
      });
    }

    return function () {
      timerQueue.current.forEach(function (x) {
        return clearInterval(x);
      });
      timerQueue.current = [];
    };
  }, []);
  var getFile = (0, _react.useCallback)(function (uid) {
    var item = newestValue.current.find(function (it) {
      return it.uid === uid;
    });

    if (item) {
      return {
        file: item,
        index: newestValue.current.indexOf(item)
      };
    }

    return undefined;
  }, []);
  var updateFile = (0, _react.useCallback)(function (uid, mod) {
    var gotFile = getFile(uid);

    if (!gotFile) {
      throw new Error("File id " + uid + " not found");
    }

    var file = gotFile.file,
        index = gotFile.index;

    if (mod.state) {
      FILE_CACHAE[uid] = mod.state;
    }

    var isSame = true;

    for (var k in mod) {
      if (mod.hasOwnProperty(k) && file[k] !== mod[k]) {
        isSame = false;
        break;
      }
    }

    if (isSame) {
      return file;
    }

    var newFile = Object.assign(Object.assign({}, file), mod);
    var newValue = [].concat(newestValue.current);
    newValue.splice(index, 1, newFile);
    newestValue.current = newValue;

    if (onChange) {
      onChange(newValue);
    }

    if (!('value' in props)) {
      setValue(newValue);
    }

    return newFile;
  }, [valueProp, onChange]);
  var uploadFiles = (0, _react.useCallback)(function (files) {
    var uploadFile = function (it) {
      return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var uid, options, res, curFile, timer, clearTimer, complete, newProcess;
        return regeneratorRuntime.wrap(function (_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(it.state !== 'selected')) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                uid = it.uid;
                updateFile(uid, {
                  state: 'pending'
                });
                options = {
                  action: action,
                  data: dataProp || {},
                  headers: headers || {}
                };

                if ((0, _utils.isFunction)(options.data)) {
                  options.data = options.data();
                }

                if (!beforeUpload) {
                  _context.next = 29;
                  break;
                }

                _context.prev = 7;
                res = beforeUpload(it, options);

                if (!(0, _utils.isBoolean)(res)) {
                  _context.next = 15;
                  break;
                }

                if (!(res === false)) {
                  _context.next = 13;
                  break;
                }

                updateFile(uid, {
                  state: 'selected'
                });
                return _context.abrupt("return");

              case 13:
                _context.next = 22;
                break;

              case 15:
                if (!(0, _types.isPromise)(res)) {
                  _context.next = 21;
                  break;
                }

                _context.next = 18;
                return res;

              case 18:
                options = _context.sent;
                _context.next = 22;
                break;

              case 21:
                options = res;

              case 22:
                _context.next = 29;
                break;

              case 24:
                _context.prev = 24;
                _context.t0 = _context["catch"](7);
                updateFile(uid, {
                  state: 'error'
                });
                console.error(_context.t0);
                return _context.abrupt("return");

              case 29:
                curFile = updateFile(uid, {
                  state: 'uploading'
                });

                if (onProgress) {
                  onProgress();
                }

                if (options.action) {
                  _context.next = 36;
                  break;
                }

                console.warn('Upload request failed,  action prop is required');
                curFile = updateFile(uid, {
                  state: 'error'
                });

                if (_onError) {
                  _onError(curFile, newestValue.current);
                }

                return _context.abrupt("return");

              case 36:
                timer = null;

                clearTimer = function () {
                  if (timer && timerQueue.current.includes(timer)) {
                    clearInterval(timer);
                    timerQueue.current.splice(timerQueue.current.indexOf(timer), 1);
                  }

                  timer = null;
                };

                complete = function () {
                  return clearTimer();
                };

                newProcess = 0;
                _context.next = 42;
                return new Promise(function (resolve) {
                  var requestObj = {
                    onProgress: function (ev) {
                      if (curFile.state !== 'uploading') {
                        return;
                      }

                      if (!timer) {
                        timer = setInterval(function () {
                          if (curFile.state !== 'uploading') {
                            clearTimer();
                            return;
                          }

                          curFile = updateFile(uid, {
                            state: 'uploading',
                            percent: newProcess
                          });

                          if (newProcess === 100) {
                            clearTimer();
                          }
                        }, _utils2.UPLOAD_THROTTLE);
                        timerQueue.current.push(timer);
                      }

                      newProcess = ev.percent;
                    },
                    onError: function (err, body) {
                      console.error('Upload request failed', err);
                      curFile = updateFile(uid, {
                        state: 'error',
                        response: body
                      });

                      if (_onError) {
                        _onError(curFile, newestValue.current);
                      }

                      resolve('error');
                      complete();
                    },
                    onSuccess: function (res) {
                      res.status = res.statusCode;

                      if ((0, _utils.isString)(res.data)) {
                        try {
                          res.data = JSON.parse(res.data);
                        } catch (e) {}
                      }

                      var result = formatter ? formatter(res, it) : res.data;

                      if (typeof result !== 'object') {
                        console.error("Expect a json object response, " + result + " got");
                        curFile = updateFile(uid, {
                          state: 'error'
                        });

                        if (_onError) {
                          _onError(curFile, newestValue.current);
                        }

                        resolve('error');
                        return;
                      }

                      var finalState = {
                        response: result,
                        percent: 100,
                        state: result.success ? 'done' : 'error'
                      };

                      if (result.success && result.url) {
                        finalState.url = result.url;
                        finalState.imgURL = result.imgURL || result.url;
                        finalState.downloadURL = result.downloadURL || result.url;
                      }

                      curFile = updateFile(uid, finalState);

                      if (finalState.state === 'done' && _onSuccess) {
                        _onSuccess(curFile, newestValue.current);
                      }

                      if (finalState.state === 'error' && _onError) {
                        _onError(curFile, newestValue.current);
                      }

                      clearTimer();
                      resolve('success');
                    },
                    fileType: fileType,
                    data: options.data,
                    filename: fileKeyName || nameProp,
                    file: it.file,
                    withCredentials: withCredentials,
                    action: options.action,
                    method: 'post',
                    timeout: 0,
                    headers: options.headers
                  };

                  if (request) {
                    request(requestObj);
                  } else {
                    (0, _request.default)(requestObj);
                  }
                });

              case 42:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[7, 24]]);
      }));
    };

    if (!(0, _utils.isValidArray)(files)) {
      return;
    }

    try {
      Promise.all(files.map(function (it) {
        return uploadFile(it);
      })).then(function () {
        var arr = updateFileStatus(newestValue.current);

        if (arr) {
          if ((0, _utils.isFunction)(onChange)) {
            onChange(arr);
          }

          if (!('value' in props)) {
            setValue(arr);
            newestValue.current = arr;
          }
        }
      });
    } catch (e) {
      console.warn('上传失败');
    }
  }, [action, dataProp, headers, beforeUpload, onProgress, formatter, _onSuccess, _onError]);
  var doUpload = (0, _react.useCallback)(function () {
    return uploadFiles(newestValue.current.filter(function (it) {
      return it.state === 'selected';
    }));
  }, []);
  var doReUpload = (0, _react.useCallback)(function (it) {
    updateFile(it.uid, {
      state: 'selected',
      percent: 0
    });
    doUpload();
  }, []);
  var handleAdd = (0, _react.useCallback)(function () {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var file, defaultSizeType, defaultSourceType, mediaType, fileItems, newValue;
      return regeneratorRuntime.wrap(function (_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(limit <= newestValue.current.length || disabled)) {
                _context2.next = 3;
                break;
              }

              _message.default.notice((0, _utils.replaceMessage)(locale.limit, {
                limit: limit
              }));

              return _context2.abrupt("return");

            case 3:
              defaultSizeType = ['original', 'compressed'];
              defaultSourceType = ['album', 'camera'];
              _context2.prev = 5;

              if (!(0, _utils.isFunction)(filePicker)) {
                _context2.next = 12;
                break;
              }

              _context2.next = 9;
              return filePicker();

            case 9:
              file = _context2.sent;
              _context2.next = 23;
              break;

            case 12:
              if (!_utils.isStrictWechatMiniProgram) {
                _context2.next = 20;
                break;
              }

              mediaType = ['video', 'image'];

              if (accept === 'image/*') {
                mediaType = ['image'];
              } else if (accept === 'video/*') {
                mediaType = ['video'];
              }

              _context2.next = 17;
              return (0, _utils2.chooseImageForWechat)({
                count: Math.min(singleLimit, limit - newestValue.current.length),
                mediaType: mediaType,
                sizeType: sizeType || defaultSizeType,
                sourceType: sourceType || defaultSourceType
              });

            case 17:
              file = _context2.sent;
              _context2.next = 23;
              break;

            case 20:
              _context2.next = 22;
              return (0, _universalChooseImage.default)({
                count: Math.min(singleLimit, limit - newestValue.current.length),
                accept: accept,
                sizeType: sizeType || defaultSizeType,
                sourceType: sourceType || defaultSourceType
              });

            case 22:
              file = _context2.sent;

            case 23:
              _context2.next = 28;
              break;

            case 25:
              _context2.prev = 25;
              _context2.t0 = _context2["catch"](5);
              console.error(_context2.t0);

            case 28:
              fileItems = file.data.map(function (it, index) {
                return (0, _utils2.createFileItem)(it, file.files ? file.files[index] : null);
              });

              if (afterSelect) {
                fileItems = fileItems.filter(function (it) {
                  return afterSelect(it) !== false;
                });
              }

              if (useDataURL) {
                fileItems.forEach(function (it) {
                  if (it.dataURL && it.isImage) {
                    it.imgURL = it.dataURL;
                  }
                });
              }

              if (onSelect) {
                onSelect();
              }

              newValue = [].concat(newestValue.current, fileItems);

              if (onChange) {
                onChange(newValue);
              }

              if (!('value' in props)) {
                setValue(newValue);
                newestValue.current = newValue;
              }

              if (autoUpload) {
                doUpload();
              }

            case 36:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[5, 25]]);
    }));
  }, [limit, disabled, locale, sizeType, sourceType, afterSelect, autoUpload, onSelect, onChange]);
  var handleRemove = (0, _react.useCallback)(function (file) {
    var doRemove = function () {
      var index = newestValue.current.indexOf(file);

      if (index === -1) {
        return;
      }

      var newValue = [].concat(newestValue.current);
      newValue.splice(index, 1);

      if (onChange) {
        onChange(newValue);
      }

      if (!('value' in props)) {
        setValue(newValue);
        newestValue.current = newValue;
      }
    };

    if (!onRemove) {
      doRemove();
      return;
    }

    var result = onRemove(file);

    if ((0, _utils.isBoolean)(result)) {
      if (result === true) {
        doRemove();
      }

      return;
    }

    if ((0, _types.isPromise)(result)) {
      result.then(function (should) {
        return should && doRemove();
      }).catch(function () {});
    }
  }, [onChange, onRemove]);
  var handleItemClick = (0, _react.useCallback)(function (file, e) {
    if (onPreview) {
      onPreview(file, Object.assign(Object.assign({}, e), {
        fileList: value
      }));
    }
  }, [onPreview]);
  (0, _react.useEffect)(function () {
    if ('value' in props) {
      newestValue.current = updateFileStatus(valueProp || defaultValue || []);
      setValue(newestValue.current);

      if (autoUpload) {
        doUpload();
      }
    }
  }, [valueProp]);
  (0, _react.useImperativeHandle)(ref, function () {
    return Object.assign(uploadRef.current, {
      add: handleAdd,
      upload: doUpload,
      getInstance: function getInstance() {
        return {
          startUpload: doUpload
        };
      }
    });
  });
  var clsPrefix = prefix + "upload";
  var hasAdd = showAddButton && limit > value.length && !disabled;
  return /*#__PURE__*/(0, _react.createElement)(_view.default, {
    ref: uploadRef
  }, label || extraIcon ? /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-header"
  }, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: clsPrefix + "-label " + clsPrefix + "-label--" + size
  }, label), extraIcon ? /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-extra"
  }, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
    className: clsPrefix + "-counter"
  }, value.length || 0, "/", limit), /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-extra-icon",
    size: size,
    onClick: handleAdd,
    name: extraIcon
  })) : null) : null, /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({
    className: (0, _classnames.default)(clsPrefix, clsPrefix + "--" + listType, className)
  }, others), value.map(function (file) {
    return /*#__PURE__*/(0, _react.createElement)(_card.default, {
      key: file.uid,
      file: file,
      prefix: clsPrefix,
      progressProps: progressProps,
      onClick: handleItemClick,
      reUpload: locale.reupload,
      onReUpload: doReUpload,
      hasRemove: hasRemove && !disabled,
      onRemove: handleRemove
    });
  }), hasAdd && /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: (0, _classnames.default)(clsPrefix + "-item", clsPrefix + "-item--add", clsPrefix + "-item--" + listType),
    onClick: handleAdd
  }, children ? children : /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-item-icon",
    name: "add"
  }))));
};

Upload.displayName = 'Upload';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Upload);

exports.default = _default;