"use strict";

exports.__esModule = true;
exports.default = void 0;

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _view = _interopRequireDefault(require("../view"));

var _icon = _interopRequireDefault(require("../icon"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Avatar = function (props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'circle' : _props$shape,
      src = props.src,
      alt = props.alt,
      srcSet = props.srcSet,
      className = props.className,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? null : _props$icon,
      _props$onError = props.onError,
      onError = _props$onError === void 0 ? function () {} : _props$onError,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? function () {} : _props$onClick,
      others = (0, _tslib.__rest)(props, ["prefix", "size", "shape", "src", "alt", "srcSet", "className", "icon", "onError", "onClick"]);
  var children = props.children;

  var _useState = (0, _react.useState)(true),
      isImgExist = _useState[0],
      setImgExist = _useState[1];

  var iconCls = prefix + "avatar-icon--" + size;

  var handleError = function (err) {
    if (!_utils.isStrictMiniApp) {
      onError(err);
      setImgExist(false);
    }
  };

  if (src) {
    if (isImgExist) {
      children = /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Image, {
        src: src,
        source: {
          uri: src
        },
        srcSet: srcSet,
        alt: alt,
        onError: handleError
      });
    } else if (alt) {
      children = (0, _utils.isString)(alt) ? alt.substr(0, 2) : children;
    }
  } else if ((0, _utils.isString)(icon)) {
    children = /*#__PURE__*/(0, _react.createElement)(_icon.default, {
      className: iconCls,
      name: icon
    });
  } else if (icon) {
    children = (0, _react.cloneElement)(icon, {
      className: iconCls
    });
  } else {
    children = (0, _utils.isString)(children) ? children.substr(0, 2) : children;
  }

  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({
    ref: ref
  }, others, {
    className: (0, _classnames.default)(className, prefix + "avatar", prefix + "avatar--" + size, prefix + "avatar--" + shape),
    onClick: onClick
  }), children);
};

Avatar.displayName = 'Avatar';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Avatar);

exports.default = _default;