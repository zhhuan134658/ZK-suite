import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useState } from "react";
import Icon from '../icon';
import { stopPropagation } from '../utils';
import View from '../view';
import CreateChildren from './create-children';

var ClosableTag = function ClosableTag(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$type = props.type,
      type = _props$type === void 0 ? 'normal' : _props$type,
      _props$closeArea = props.closeArea,
      closeArea = _props$closeArea === void 0 ? 'tail' : _props$closeArea,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? function () {} : _props$onClose,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? function () {} : _props$onClick,
      _props$afterClose = props.afterClose,
      afterClose = _props$afterClose === void 0 ? function () {} : _props$afterClose,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      children = props.children,
      className = props.className,
      others = __rest(props, ["prefix", "size", "type", "closeArea", "disabled", "onClose", "onClick", "afterClose", "style", "children", "className"]);

  var shape = 'closable';

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      closed = _useState2[0],
      setClosed = _useState2[1];

  var textCls = "".concat(prefix, "tag-font--").concat(size);
  var iconCls = "".concat(prefix, "tag-font--").concat(size);
  var classes = {
    textCls: textCls,
    iconCls: iconCls
  };
  var cssType = type === 'normal' ? 'outline' : 'solid';
  var tagCls = classNames(className, "".concat(prefix, "tag"), "".concat(prefix, "tag--").concat(size), "".concat(prefix, "tag--").concat(shape, "-").concat(cssType), _defineProperty({}, "".concat(prefix, "tag--").concat(shape, "-").concat(cssType, "-disabled"), disabled));
  var closeCls = classNames("".concat(prefix, "tag--closable-close"));
  var closeIconCls = classNames("".concat(prefix, "tag-icon--").concat(size, "-close"));

  var handleClose = function handleClose(e) {
    stopPropagation(e);

    if (disabled) {
      return;
    }

    var isClosed = !(onClose && onClose() === false);
    setClosed(isClosed);
    afterClose(e);
  };

  var handleClick = function handleClick(e) {
    if (disabled) {
      return;
    }

    if (closeArea === 'tag') {
      handleClose(e);
    }

    onClick(e);
  };

  if (closed) {
    return null;
  }

  return /*#__PURE__*/React.createElement(View, _extends({}, others, {
    ref: ref,
    className: tagCls,
    onClick: handleClick,
    style: __rpx2vw__(props.style)
  }), CreateChildren(children, classes, prefix, size), shape === 'closable' ? /*#__PURE__*/React.createElement(View, {
    className: closeCls,
    onClick: handleClose
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "close",
    className: closeIconCls
  })) : null);
};

ClosableTag.displayName = 'ClosableTag';
export default /*#__PURE__*/forwardRef(ClosableTag);