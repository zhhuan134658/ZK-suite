function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { createElement, Children, isValidElement, cloneElement } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import Icon from '../icon';
import { isBoolean, isNil, isNumber, isString } from '../utils';

var CreateChildren = function CreateChildren(children, classes, prefix, size) {
  var count = Children.count(children);
  return Children.map(children, function (child, index) {
    var _classNames;

    if (isNil(child) || isBoolean(child)) {
      return null;
    }

    var key = child.key || "mt-tag-".concat(index);

    if (isNumber(child) || isString(child)) {
      return /*#__PURE__*/React.createElement(Text, {
        key: key,
        className: classes.textCls
      }, child);
    }

    if (!isValidElement(child)) {
      return child;
    }

    switch (true) {
      case child.type === Text:
        return cloneElement(child, {
          key: key,
          className: classes.textCls,
          style: child.props.style || {}
        });

      case child.type === Icon:
        return cloneElement(child, {
          key: key,
          className: classNames(classes.iconCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "tag-icon--").concat(size, "-first"), index === 0), _defineProperty(_classNames, "".concat(prefix, "tag-icon--").concat(size, "-last"), index === count - 1), _classNames)),
          style: child.props.style || {}
        });

      default:
        return cloneElement(child, {
          key: key
        });
    }
  });
};

export default CreateChildren;