function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement } from "react";
import { Text } from "@alifd/meet-react-component-one";
import View from '../view';
import { isString } from '../utils';

var Divider = function Divider(props) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      orientation = props.orientation,
      _props$dashed = props.dashed,
      dashed = _props$dashed === void 0 ? false : _props$dashed,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'hoz' : _props$direction,
      children = props.children,
      className = props.className,
      others = __rest(props, ["prefix", "orientation", "dashed", "direction", "children", "className"]);

  var clsPrefix = "".concat(prefix, "divider");
  var clses = {
    divider: classNames(className, clsPrefix, "".concat(clsPrefix, "--").concat(direction), (_classNames = {}, _defineProperty(_classNames, "".concat(clsPrefix, "--dashed"), dashed), _defineProperty(_classNames, "".concat(clsPrefix, "--").concat(orientation), orientation), _classNames)),
    text: classNames("".concat(clsPrefix, "-text"), "".concat(clsPrefix, "-text--").concat(direction), "".concat(clsPrefix, "-text--").concat(orientation))
  };

  var renderChildren = function renderChildren() {
    if (direction === 'hoz' && children) {
      if (isString(children)) {
        return /*#__PURE__*/React.createElement(Text, {
          className: clses.text
        }, children);
      } else {
        return /*#__PURE__*/React.createElement(View, {
          className: clses.text
        }, children);
      }
    }

    return null;
  };

  return /*#__PURE__*/React.createElement(View, _extends({}, others, {
    className: clses.divider
  }), renderChildren());
};

Divider.displayName = 'Divider';
export default Divider;