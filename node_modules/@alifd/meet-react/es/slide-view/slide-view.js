import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __awaiter, __rest } from "tslib";
import React, { createElement, forwardRef, useCallback, useEffect, useRef, useState } from "react";
import classNames from 'classnames';
import View from '../view';
import { getWidth, isFunction } from '../utils';

var getEndPosition = function getEndPosition(_ref) {
  var translateX = _ref.translateX,
      actualOffset = _ref.actualOffset,
      triggerOffset = _ref.triggerOffset,
      leftCellWidth = _ref.leftCellWidth,
      rightCellWidth = _ref.rightCellWidth;

  if (Math.abs(actualOffset) < triggerOffset) {
    return 0;
  }

  if (actualOffset > 0 && translateX > 0) {
    return leftCellWidth;
  } else if (actualOffset < 0 && translateX < 0) {
    return -rightCellWidth;
  }

  return 0;
};

var SlideView = function SlideView(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      children = props.children,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 500 : _props$duration,
      className = props.className,
      _props$leftActions = props.leftActions,
      leftActions = _props$leftActions === void 0 ? [] : _props$leftActions,
      _props$rightActions = props.rightActions,
      rightActions = _props$rightActions === void 0 ? [] : _props$rightActions,
      _props$triggerOffset = props.triggerOffset,
      triggerOffset = _props$triggerOffset === void 0 ? 50 : _props$triggerOffset,
      _props$uid = props.uid,
      uid = _props$uid === void 0 ? 0 : _props$uid,
      onOpen = props.onOpen,
      onClose = props.onClose,
      others = __rest(props, ["prefix", "children", "duration", "className", "leftActions", "rightActions", "triggerOffset", "uid", "onOpen", "onClose"]);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      translateX = _useState2[0],
      setTranslateX = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      duringTransition = _useState4[0],
      toggleTransition = _useState4[1];

  var startTouchRecord = useRef(null);
  var prevTouchRecord = useRef(null);
  var rightWidthRecord = useRef(0);
  var leftWidthRecord = useRef(0);
  var openStatusRecored = useRef(false);
  var clsPrefix = "".concat(prefix, "slide-view");
  var resetPosition = useCallback(function () {
    scroll(0);
  }, []);
  var handleTouchStart = useCallback(function (e) {
    startTouchRecord.current = e.changedTouches[0];
    prevTouchRecord.current = e.changedTouches[0];
  }, []);
  var handleTouchMove = useCallback(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var currentTouch = getCurrentTouch(Array.from(e.changedTouches));
    var offsetX = currentTouch.pageX - prevTouchRecord.current.pageX;
    var offsetY = currentTouch.pageY - prevTouchRecord.current.pageY;

    if (Math.abs(offsetX) < Math.abs(offsetY)) {
      return;
    }

    if (e.cancelable) {
      e.preventDefault();
    }

    prevTouchRecord.current = currentTouch;
    var nextTranslateX = translateX + offsetX;

    if (nextTranslateX > leftWidthRecord.current || -nextTranslateX > rightWidthRecord.current) {
      return;
    }

    if (openStatusRecored.current === false && prevTouchRecord.current.pageX !== startTouchRecord.current.pageX) {
      var direction = prevTouchRecord.current.pageX > startTouchRecord.current.pageX ? 'left' : 'right';
      openStatusRecored.current = true;

      if (isFunction(onOpen)) {
        onOpen(direction);
      }
    }

    setTranslateX(nextTranslateX);
  }, [translateX]);
  var handleTouchEnd = useCallback(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var endTouch = getCurrentTouch(Array.from(e.changedTouches));
    var actualOffset = endTouch.pageX - startTouchRecord.current.pageX;
    var endPosition = getEndPosition({
      translateX: translateX,
      actualOffset: actualOffset,
      triggerOffset: triggerOffset,
      leftCellWidth: leftWidthRecord.current,
      rightCellWidth: rightWidthRecord.current
    });
    startTouchRecord.current = null;
    prevTouchRecord.current = null;
    scroll(endPosition);

    if (openStatusRecored.current === true && endPosition === 0) {
      openStatusRecored.current = false;

      if (isFunction(onClose)) {
        onClose();
      }
    }
  }, [translateX, duringTransition]);
  var scroll = useCallback(function (pos) {
    toggleTransition(true);
    setTranslateX(pos);
    setTimeout(function () {
      toggleTransition(false);
    }, duration);
  }, [duration]);
  var getCurrentTouch = useCallback(function (touches) {
    return touches.find(function (_ref2) {
      var identifier = _ref2.identifier;
      return identifier === prevTouchRecord.current.identifier;
    });
  }, []);
  var handleClick = useCallback(function (cb) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var hideFlag;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              hideFlag = true;

              if (!(cb && typeof cb === 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return cb();

            case 4:
              hideFlag = _context.sent;

            case 5:
              if (!(hideFlag === false)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return");

            case 7:
              resetPosition();

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  }, [duringTransition]);
  useEffect(function () {
    (function () {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return getWidth("".concat(prefix, "cell-left-").concat(uid));

              case 2:
                leftWidthRecord.current = _context2.sent;
                _context2.next = 5;
                return getWidth("".concat(prefix, "cell-right-").concat(uid));

              case 5:
                rightWidthRecord.current = _context2.sent;

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    })();
  }, [uid, leftActions, rightActions]);
  return /*#__PURE__*/React.createElement(View, _extends({}, others, {
    className: classNames(className, "".concat(clsPrefix))
  }), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-wrapper"),
    style: __rpx2vw__({
      transform: "translate3d(".concat(translateX, "px, 0, 0)"),
      transitionDuration: duringTransition ? "".concat((duration / 1000).toFixed(1), "s") : '0s'
    })
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-cell ").concat(clsPrefix, "-cell--left"),
    id: "".concat(prefix, "cell-left-").concat(uid)
  }, leftActions.map(function (item, index) {
    return /*#__PURE__*/React.createElement(View, {
      className: "".concat(clsPrefix, "-button-item"),
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  })), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-children"),
    onClick: resetPosition,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  }, children), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-cell ").concat(clsPrefix, "-cell--right"),
    id: "".concat(prefix, "cell-right-").concat(uid)
  }, rightActions.map(function (item, index) {
    return /*#__PURE__*/React.createElement(View, {
      className: "".concat(clsPrefix, "-button-item"),
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  }))));
};

SlideView.displayName = 'SlideView';
export default /*#__PURE__*/forwardRef(SlideView);