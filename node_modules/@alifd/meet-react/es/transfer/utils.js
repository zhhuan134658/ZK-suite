function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export var filterTransferValue = function filterTransferValue(dataSource, defaultValue) {
  var leftList = [];
  var rightList = [];
  dataSource.map(function (item) {
    if (defaultValue.indexOf(item.value) === -1) {
      leftList.push(item);
    } else {
      rightList.push(item);
    }
  });
  return {
    leftList: leftList,
    rightList: rightList
  };
};
export var getDataStatus = function getDataStatus(dataSource) {
  var listDataSize = dataSource.length;
  var checkedSize = 0;
  var disabledSize = 0;
  var isCheckAll = false;
  dataSource.map(function (item) {
    if (item.isChecked) {
      checkedSize = checkedSize + 1;
    }

    if (item.disabled) {
      disabledSize = disabledSize + 1;
    }
  });
  isCheckAll = listDataSize - disabledSize === checkedSize && checkedSize > 0 ? true : false;
  return {
    listDataSize: listDataSize,
    checkedSize: checkedSize,
    disabledSize: disabledSize,
    isCheckAll: isCheckAll
  };
};
export var checkAllData = function checkAllData(dataSource, status) {
  dataSource.map(function (item) {
    if (!item.disabled) {
      item.isChecked = status;
    }
  });
  return dataSource;
};
export var setListDisabled = function setListDisabled(dataSource) {
  dataSource.map(function (item) {
    item.disabled = true;
  });
  return dataSource;
};
export var changeCheckedItem = function changeCheckedItem(initList, goalList) {
  var initValue = [];
  var changeListValue = [];
  var changeList = [];
  initList = initList.filter(function (item) {
    var isChecked = item.isChecked,
        disabled = item.disabled,
        value = item.value;

    if (isChecked && !disabled) {
      item.isChecked = false;
      changeList.push(item);
      changeListValue.push(value);
    } else {
      initValue.push(value);
      return item;
    }
  });
  goalList = [].concat(changeList, _toConsumableArray(goalList));
  var goalValue = goalList.map(function (item) {
    return item.value;
  });
  return {
    initList: initList,
    initValue: initValue,
    goalList: goalList,
    goalValue: goalValue,
    changeList: changeList,
    changeListValue: changeListValue
  };
};
export var setCheckedItem = function setCheckedItem(dataSource, checkedList) {
  dataSource.map(function (item) {
    if (checkedList.indexOf(item.value) !== -1) {
      item.isChecked = true;
    }
  });
  return dataSource;
};