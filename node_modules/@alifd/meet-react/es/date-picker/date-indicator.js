function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { createElement } from "react";
import { View, Text } from "@alifd/meet-react-component-one";
import classNames from 'classnames';

var DateIndicator = function DateIndicator(props) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      highlight = props.highlight,
      _props$separator = props.separator,
      separator = _props$separator === void 0 ? ' ' : _props$separator,
      _props$values = props.values,
      values = _props$values === void 0 ? [] : _props$values;
  var clsPrefix = "".concat(prefix, "datepicker");
  return /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-time-indicator")
  }, /*#__PURE__*/React.createElement(Text, {
    className: classNames("".concat(clsPrefix, "-time-indicator-text"), _defineProperty({}, "".concat(clsPrefix, "-time-indicator--highlight"), highlight === 0)),
    "x-if": highlight === 0
  }, values[0]), /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-time-indicator-text")
  }, separator), /*#__PURE__*/React.createElement(Text, {
    className: classNames("".concat(clsPrefix, "-time-indicator-text"), _defineProperty({}, "".concat(clsPrefix, "-time-indicator--highlight"), highlight === 1)),
    "x-if": highlight === 1
  }, values[1]));
};

export default DateIndicator;