function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import dayjs from 'dayjs';
import React, { Component, createElement } from "react";
import LocaleContext from '../../locale/context';
import Picker from '../../picker';
import { checkDateRange, getRangeDate, isValidDate, RANGE_CHECK_RESULT, toDate, toValidDate } from '../../utils/date';
import { isFunction } from '../../utils';

var BasePicker = /*#__PURE__*/function (_Component) {
  _inherits(BasePicker, _Component);

  var _super = _createSuper(BasePicker);

  function BasePicker(props) {
    var _this;

    _classCallCheck(this, BasePicker);

    _this = _super.call(this, props);
    var d = toDate(props.value || props.defaultValue);

    var realDate = _this.getAvailableDate(isValidDate(d) ? d : new Date());

    _this.state = {
      value: realDate
    };
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));

    if (d && realDate.getTime() !== d.getTime() && props.onChange) {
      props.onChange(realDate);
    }

    return _this;
  }

  _createClass(BasePicker, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if ('value' in this.props) {
        var nowValue = this.state.value;
        var _this$props = this.props,
            value = _this$props.value,
            defaultValue = _this$props.defaultValue;

        if (value === prevProps.value) {
          return;
        }

        var newValue = this.getAvailableDate(toValidDate(value || defaultValue));

        if (newValue.getTime() === nowValue.getTime()) {
          return;
        }

        this.setState({
          value: newValue
        });
      }
    }
  }, {
    key: "value",
    get: function get() {
      if (this.props.value) {
        return this.getAvailableDate(toValidDate(this.props.value));
      }

      return this.state.value;
    }
  }, {
    key: "validRange",
    get: function get() {
      return this.props.validRange;
    }
  }, {
    key: "filterDataSource",
    value: function filterDataSource(source, changeDate, type) {
      var validRange = this.validRange;
      var disabledDate = this.props.disabledDate;

      if (!disabledDate && !validRange) {
        return source;
      }

      for (var i = 0; i < source.length; i++) {
        var startDate = new Date();
        changeDate(startDate, source[i]);
        var endDate = dayjs(startDate).endOf(type);
        var isDisable = isFunction(disabledDate) ? disabledDate(startDate, type) && disabledDate(endDate.toDate(), type) : false;

        if (!isDisable && validRange && this.getStep() === type) {
          isDisable = checkDateRange(startDate, this.getRangeCheck(), validRange) !== RANGE_CHECK_RESULT.IN_RANGE;
        }

        if (isDisable) {
          source.splice(i, 1);
          i--;
        }
      }

      return source;
    }
  }, {
    key: "getAvailableDate",
    value: function getAvailableDate(d) {
      var validRange = this.validRange;
      var baseDate = d;

      if (validRange) {
        baseDate = getRangeDate(d, this.getRangeCheck(), validRange);
      }

      if (this.isAvailable(baseDate)) {
        return baseDate;
      }

      var dayjsObj = dayjs(baseDate);

      for (var i = 0; i < 9999; i++) {
        var a = dayjsObj.add(i, this.getStep()).toDate();

        if (this.isAvailable(a)) {
          return a;
        }

        var b = dayjsObj.add(0 - i, this.getStep()).toDate();

        if (this.isAvailable(b)) {
          return b;
        }
      }

      return baseDate;
    }
  }, {
    key: "handleChange",
    value: function handleChange(values) {
      var newDate = this.getAvailableDate(this.toDate(values));

      if (!('value' in this.props)) {
        this.setState({
          value: newDate
        });
      }

      if (this.props.onChange) {
        this.props.onChange(newDate);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          id = _this$props2.id,
          className = _this$props2.className,
          style = _this$props2.style;
      return /*#__PURE__*/React.createElement(LocaleContext.Consumer, null, function (locale) {
        return /*#__PURE__*/React.createElement(Picker, {
          id: id,
          className: className,
          style: __rpx2vw__(style),
          value: _this2.toValues(_this2.value),
          data: _this2.getDataSource(locale || {}),
          onChange: _this2.handleChange
        });
      });
    }
  }, {
    key: "hasAvailable",
    value: function hasAvailable() {
      var validRange = this.validRange;
      var disabledDate = this.props.disabledDate;
      return disabledDate || validRange;
    }
  }, {
    key: "isAvailable",
    value: function isAvailable(d) {
      var validRange = this.validRange;
      var disabledDate = this.props.disabledDate;

      if (!this.hasAvailable()) {
        return true;
      }

      if (validRange) {
        if (checkDateRange(d, this.getRangeCheck(), validRange) !== RANGE_CHECK_RESULT.IN_RANGE) {
          return false;
        }
      }

      if (disabledDate) {
        return !disabledDate(d, this.getDisableType());
      }

      return true;
    }
  }]);

  return BasePicker;
}(Component);

export default BasePicker;