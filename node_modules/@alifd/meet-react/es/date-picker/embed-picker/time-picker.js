function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import React, { createElement } from "react";
import dayjs from 'dayjs';
import { View } from "@alifd/meet-react-component-one";
import EmbedTimePicker from '../../time-picker/embed-picker';
import DateIndicator from '../date-indicator';
import EmbedDatePicker from './date-picker';
import ModeSwitch from '../mode-switch';
import useToggle from '../../utils/hooks/use-toggle';

var DateTimePicker = function DateTimePicker(props) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      defaultValue = props.defaultValue,
      value = props.value,
      _props$dateSelectTip = props.dateSelectTip,
      dateSelectTip = _props$dateSelectTip === void 0 ? '选择具体时间' : _props$dateSelectTip,
      _props$timeSelectTip = props.timeSelectTip,
      timeSelectTip = _props$timeSelectTip === void 0 ? '返回选择日期' : _props$timeSelectTip,
      disableDate = props.disableDate,
      validRange = props.validRange,
      onChange = props.onChange,
      others = __rest(props, ["prefix", "defaultValue", "value", "dateSelectTip", "timeSelectTip", "disableDate", "validRange", "onChange"]);

  var _useToggle = useToggle('date', 'time'),
      _useToggle2 = _slicedToArray(_useToggle, 2),
      mode = _useToggle2[0],
      toggleMode = _useToggle2[1].toggle;

  var handleDateChange = function handleDateChange(d) {
    var curTime = dayjs(value);
    var newTime = dayjs(d).hour(curTime.hour()).minute(curTime.minute()).second(curTime.second());
    onChange(newTime.toDate());
  };

  var handleTimeChange = function handleTimeChange(d) {
    var curTime = dayjs(value);
    var newTime = dayjs(d).year(curTime.year()).month(curTime.month()).date(curTime.date());
    onChange(newTime.toDate());
  };

  return /*#__PURE__*/React.createElement(View, others, /*#__PURE__*/React.createElement(DateIndicator, {
    highlight: mode === 'date' ? 0 : 1,
    values: [dayjs(value).format('YYYY-MM-DD'), dayjs(value).format('HH:mm:ss')]
  }), mode === 'date' ? /*#__PURE__*/React.createElement(EmbedDatePicker, {
    defaultValue: defaultValue,
    value: value,
    validRange: validRange,
    onChange: handleDateChange
  }) : /*#__PURE__*/React.createElement(EmbedTimePicker, {
    defaultValue: defaultValue,
    value: value,
    onChange: handleTimeChange
  }), /*#__PURE__*/React.createElement(ModeSwitch, {
    defaultText: dateSelectTip,
    reverseText: timeSelectTip,
    value: mode === 'date' ? 'default' : 'reverse',
    onChange: toggleMode
  }));
};

export default DateTimePicker;