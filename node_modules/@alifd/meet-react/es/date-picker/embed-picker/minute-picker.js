function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import DatePicker from '../embed-picker/date-picker';
import dayjs from 'dayjs';
import { get, range } from '../../utils';

var EmbedMinutePicker = /*#__PURE__*/function (_DatePicker) {
  _inherits(EmbedMinutePicker, _DatePicker);

  var _super = _createSuper(EmbedMinutePicker);

  function EmbedMinutePicker() {
    _classCallCheck(this, EmbedMinutePicker);

    return _super.apply(this, arguments);
  }

  _createClass(EmbedMinutePicker, [{
    key: "getStep",
    value: function getStep() {
      return 'minute';
    }
  }, {
    key: "getDisableType",
    value: function getDisableType() {
      return 'minute';
    }
  }, {
    key: "getRangeCheck",
    value: function getRangeCheck() {
      return {
        date: {
          hasYear: true,
          hasMonth: true,
          hasDay: true
        },
        time: {
          hasHour: true,
          hasMinute: true,
          hasSecond: false
        }
      };
    }
  }, {
    key: "getDataSource",
    value: function getDataSource(locale) {
      var _this = this;

      var result = _get(_getPrototypeOf(EmbedMinutePicker.prototype), "getDataSource", this).call(this, locale);

      var hourLocale = get(locale, 'locale.DatePicker.hour', '时');
      var minuteLocale = get(locale, 'locale.DatePicker.minute', '分');
      var year = this.value.getFullYear();
      var month = this.value.getMonth();
      var date = this.value.getDate();
      var hourOpts = range(24).map(function (_, index) {
        return {
          label: "".concat(index).concat(hourLocale),
          value: index
        };
      });
      var minuteOpts = range(60).map(function (_, index) {
        return {
          label: "".concat(index).concat(minuteLocale),
          value: index
        };
      });
      return [].concat(_toConsumableArray(result), [this.filterDataSource(hourOpts, function (d, it) {
        d.setMinutes(0);
        d.setMilliseconds(0);
        d.setFullYear(year);
        d.setMonth(month);
        d.setDate(date);
        d.setHours(it.value);
      }, 'hour'), this.filterDataSource(minuteOpts, function (d, it) {
        d.setMilliseconds(0);
        d.setFullYear(year);
        d.setMonth(month);
        d.setDate(date);
        d.setHours(_this.value.getHours());
        d.setMinutes(it.value);
      }, 'minute')]);
    }
  }, {
    key: "toDate",
    value: function toDate(values) {
      var d = _get(_getPrototypeOf(EmbedMinutePicker.prototype), "toDate", this).call(this, values);

      return dayjs(d).month(values[1] - 1).date(values[2]).hour(values[3]).minute(values[4]).toDate();
    }
  }, {
    key: "toValues",
    value: function toValues(d) {
      var values = _get(_getPrototypeOf(EmbedMinutePicker.prototype), "toValues", this).call(this, d);

      return [].concat(_toConsumableArray(values), [d.getHours(), d.getMinutes()]);
    }
  }]);

  return EmbedMinutePicker;
}(DatePicker);

export { EmbedMinutePicker as default };