function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import dayjs from 'dayjs';
import BasePicker from './base-picker';
import { dateToPicker, getColumns, getTimeOption, pickerToDate } from '../../time-picker/utils';
import { cloneDate, getRangeDate, getRealRange, toValidDate } from '../../utils/date';
import { get } from '../../utils';

var DateTimePicker = /*#__PURE__*/function (_BasePicker) {
  _inherits(DateTimePicker, _BasePicker);

  var _super = _createSuper(DateTimePicker);

  function DateTimePicker() {
    _classCallCheck(this, DateTimePicker);

    return _super.apply(this, arguments);
  }

  _createClass(DateTimePicker, [{
    key: "validRange",
    get: function get() {
      if (!this.props.validRange) {
        return undefined;
      }

      var options = getTimeOption(this.timeProps);
      return getRealRange(options, this.timeProps, this.props.validRange);
    }
  }, {
    key: "timeProps",
    get: function get() {
      var _this$props = this.props,
          showTime = _this$props.showTime,
          validRange = _this$props.validRange;
      var newRange;

      if (validRange) {
        var format = 'YYYY-MM-DD';
        var value = getRangeDate(toValidDate(this.props.value || this.state.value), {
          date: this.getDateOptions()
        }, validRange);

        if (dayjs(value).format(format) === dayjs(validRange[0]).format(format)) {
          newRange = [validRange[0], new Date(2020, 1, 1, 23, 59, 59)];
        }

        if (dayjs(value).format(format) === dayjs(validRange[1]).format(format)) {
          newRange = [new Date(2020, 1, 1, 0, 0, 0), validRange[1]];
        }
      }

      if (_typeof(showTime) === 'object') {
        return Object.assign({
          validRange: newRange
        }, showTime);
      }

      return {
        validRange: newRange
      };
    }
  }, {
    key: "getStep",
    value: function getStep() {
      return 'day';
    }
  }, {
    key: "getDisableType",
    value: function getDisableType() {
      return 'date';
    }
  }, {
    key: "getDataSource",
    value: function getDataSource(locale) {
      var _this$props2 = this.props,
          validRange = _this$props2.validRange,
          _this$props2$format = _this$props2.format,
          format = _this$props2$format === void 0 ? 'YYYY-MM-DD' : _this$props2$format;
      var oneDay = 24 * 3600 * 1000;
      var result = [];
      var startDate = cloneDate(validRange[0]);
      startDate.setHours(0);
      startDate.setMinutes(0);
      startDate.setSeconds(0);
      startDate.setMilliseconds(0);

      for (var d = startDate; d.getTime() < validRange[1].getTime(); d = new Date(d.getTime() + oneDay)) {
        result.push({
          label: dayjs(d).format(format),
          value: "".concat(d.getFullYear(), ",").concat(d.getMonth(), ",").concat(d.getDate())
        });
      }

      var timeProps = this.timeProps;

      if (!timeProps.locale && locale && !!get(locale, 'locale.TimePicker', undefined)) {
        timeProps.locale = locale.locale.TimePicker;
      }

      var options = getTimeOption(timeProps);
      return [result].concat(_toConsumableArray(getColumns(this.value, options, timeProps)));
    }
  }, {
    key: "toDate",
    value: function toDate(values) {
      var options = getTimeOption(this.timeProps);
      var x = values.shift().split(',').map(function (it) {
        return parseInt(it, 10);
      });
      var d = pickerToDate(values, options);
      d.setFullYear(x[0]);
      d.setDate(1);
      d.setMonth(x[1]);
      d.setDate(x[2]);
      return d;
    }
  }, {
    key: "getRangeCheck",
    value: function getRangeCheck() {
      var showTime = this.props.showTime;
      var timeFormat = _typeof(showTime) === 'object' ? showTime.format : undefined;
      return {
        date: this.getDateOptions(),
        time: getTimeOption({
          format: timeFormat
        })
      };
    }
  }, {
    key: "toValues",
    value: function toValues(d) {
      var options = getTimeOption(this.timeProps);
      var values = ["".concat(d.getFullYear(), ",").concat(d.getMonth(), ",").concat(d.getDate())].concat(_toConsumableArray(dateToPicker(d, options)));
      return values;
    }
  }, {
    key: "getDateOptions",
    value: function getDateOptions() {
      var _this$props$format = this.props.format,
          format = _this$props$format === void 0 ? 'YYYY-MM-DD' : _this$props$format;
      return {
        hasYear: format.includes('Y'),
        hasMonth: format.includes('M'),
        hasDay: format.includes('D')
      };
    }
  }]);

  return DateTimePicker;
}(BasePicker);

export default DateTimePicker;