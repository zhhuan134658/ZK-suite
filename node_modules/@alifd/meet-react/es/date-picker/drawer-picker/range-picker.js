function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { __awaiter, __rest } from "tslib";
import React, { Component, createElement } from "react";
import classNames from 'classnames';
import Calendar from '../../calendar';
import { ItemContext } from '../../form';
import View from '../../view';
import { withLocale } from '../../locale';
import SelectDrawer from '../../select-drawer';
import { DEFAULT_FORMAT } from '../../time-picker/utils';
import { isFunction } from '../../utils';
import { formatDate, isValidDate, toDate } from '../../utils/date';
import DateTimePicker from '../embed-picker/date-time-picker';
import { withTime } from '../embed-picker/utils';

var RangePicker = /*#__PURE__*/function (_Component) {
  _inherits(RangePicker, _Component);

  var _super = _createSuper(RangePicker);

  function RangePicker(props) {
    var _this;

    _classCallCheck(this, RangePicker);

    _this = _super.call(this, props);
    _this.state = {
      step: 0,
      value: props.value || props.defaultValue || null,
      pickerValue: _this.getPickerValue(props)
    };
    _this.scrolling = false;
    _this.doScroll = _this.doScroll.bind(_assertThisInitialized(_this));
    _this.handleOk = _this.handleOk.bind(_assertThisInitialized(_this));
    _this.handleClear = _this.handleClear.bind(_assertThisInitialized(_this));
    _this.handleCancel = _this.handleCancel.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handleVisibleChange = _this.handleVisibleChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RangePicker, [{
    key: "getPickerValue",
    value: function getPickerValue(props) {
      if (this.state && this.state.value) {
        return this.state.value;
      }

      var today = new Date();
      return props.value || props.defaultValue || [today, new Date(today.getTime() + 86400000)];
    }
  }, {
    key: "handleChange",
    value: function handleChange(pickerValue) {
      this.setState({
        pickerValue: pickerValue
      });
    }
  }, {
    key: "handleOneChange",
    value: function handleOneChange(index, value) {
      var pickerValue = index === 0 ? [value] : [this.state.pickerValue[0], value];
      this.setState({
        pickerValue: pickerValue
      });
    }
  }, {
    key: "doScroll",
    value: function doScroll(to) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.scrolling || this.state.step === to)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                this.setState({
                  step: to
                });
                this.scrolling = true;
                setTimeout(function () {
                  return _this2.scrolling = false;
                }, 200);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "handleOk",
    value: function handleOk() {
      var _this$props = this.props,
          onOk = _this$props.onOk,
          showTime = _this$props.showTime,
          onChange = _this$props.onChange;
      var value = this.state.pickerValue;

      if (this.state.step === 0 && showTime) {
        this.setState({
          pickerValue: [this.state.pickerValue[0], this.state.pickerValue[0]]
        });
        this.doScroll(1);
        return false;
      }

      if (value.length === 1) {
        return;
      }

      if (!('value' in this.props)) {
        this.setState({
          value: value
        });
      }

      if (onChange) {
        onChange(value);
      }

      if (onOk) {
        onOk(value);
      }
    }
  }, {
    key: "handleVisibleChange",
    value: function handleVisibleChange(to) {
      var _this$props2 = this.props,
          onVisibleChange = _this$props2.onVisibleChange,
          showTime = _this$props2.showTime;

      if (onVisibleChange) {
        onVisibleChange(to);
      }

      if (to && showTime) {
        this.doScroll(0);
      }
    }
  }, {
    key: "handleCancel",
    value: function handleCancel(reason) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var step, _this$props3, showTime, onCancel;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                step = this.state.step;
                _this$props3 = this.props, showTime = _this$props3.showTime, onCancel = _this$props3.onCancel;

                if (!(step === 1 && showTime)) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 5;
                return this.doScroll(0);

              case 5:
                return _context2.abrupt("return", false);

              case 6:
                if (isFunction(onCancel)) {
                  onCancel(reason);
                }

                this.setState({
                  pickerValue: this.getPickerValue(this.props)
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "handleClear",
    value: function handleClear() {
      var _this$props4 = this.props,
          onClear = _this$props4.onClear,
          onChange = _this$props4.onChange;

      if (!('value' in this.props)) {
        this.setState({
          value: null
        });
      }

      if (onClear) {
        onClear();
      }

      if (onChange) {
        onChange(null);
      }
    }
  }, {
    key: "timeFormat",
    get: function get() {
      var showTime = this.props.showTime;
      return _typeof(showTime) === 'object' && showTime.format ? showTime.format : DEFAULT_FORMAT;
    }
  }, {
    key: "format",
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !withTime(format) ? "".concat(format, " ").concat(this.timeFormat) : format;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _a, _b;

      if ('value' in this.props) {
        var _this$props5 = this.props,
            value = _this$props5.value,
            defaultValue = _this$props5.defaultValue;
        var newValue = value || defaultValue;

        if (!newValue && this.state.value) {
          this.setState({
            value: null
          });
          return;
        }

        if (!Array.isArray(newValue) || newValue === this.state.value) {
          return;
        }

        var d1 = toDate(newValue[0]);
        var d2 = toDate(newValue[1]);

        if (!isValidDate(d1) || !isValidDate(d2)) {
          return;
        }

        var newValueDate = [d1, d2];

        if (!this.state.value) {
          this.setState({
            value: newValueDate,
            pickerValue: newValueDate
          });
          return;
        }

        if (d1.getTime() === ((_a = toDate(this.state.value[0])) === null || _a === void 0 ? void 0 : _a.getTime()) && d2.getTime() === ((_b = toDate(this.state.value[1])) === null || _b === void 0 ? void 0 : _b.getTime())) {
          return;
        }

        this.setState({
          value: newValueDate,
          pickerValue: newValueDate
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$state = this.state,
          value = _this$state.value,
          step = _this$state.step,
          _this$state$pickerVal = _this$state.pickerValue,
          pickerValue = _this$state$pickerVal === void 0 ? [] : _this$state$pickerVal;

      var _a = this.props,
          _a$prefix = _a.prefix,
          prefix = _a$prefix === void 0 ? 'mt-' : _a$prefix,
          iconType = _a.iconType,
          placeholder = _a.placeholder,
          alignProp = _a.align,
          sizeProp = _a.size,
          disabled = _a.disabled,
          readOnly = _a.readOnly,
          hasClear = _a.hasClear,
          showTime = _a.showTime,
          validRange = _a.validRange,
          locale = _a.locale,
          disabledDate = _a.disabledDate,
          others = __rest(_a, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear", "showTime", "validRange", "locale", "disabledDate"]);

      if (showTime && !validRange) {
        throw new Error('DatePicker with showTime must have validRange');
      }

      var showNext = showTime && step === 0;
      var showPrev = showTime && step === 1;
      var clsPrefix = "".concat(prefix, "datepicker-");
      var nextRange = showTime && step === 1 ? [pickerValue[0], validRange[1]] : validRange;
      return /*#__PURE__*/React.createElement(ItemContext.Consumer, null, function (context) {
        var isInsideForm = context.isInsideForm,
            contentAlign = context.contentAlign,
            contextSize = context.size;
        var align = alignProp || (isInsideForm ? contentAlign : 'left');
        var size = sizeProp || (isInsideForm ? contextSize : 'medium');
        var useRangeLocale = locale ? locale.ok && locale.cancel : null;
        return /*#__PURE__*/React.createElement(SelectDrawer, _extends({}, others, {
          locale: useRangeLocale ? locale : undefined,
          prefix: prefix,
          content: value ? "".concat(formatDate(value[0], _this3.format), " - ").concat(formatDate(value[1], _this3.format)) : '',
          align: align,
          size: size,
          hasClear: hasClear,
          iconType: iconType,
          placeholder: placeholder,
          disabled: disabled,
          readOnly: readOnly,
          onOk: _this3.handleOk,
          onCancel: _this3.handleCancel,
          onClear: _this3.handleClear,
          onVisibleChange: _this3.handleVisibleChange,
          drawerTitle: showTime ? showNext && locale ? locale.selectStartTime : locale.selectEndTime : undefined,
          okText: showTime && showNext && locale ? locale.next : undefined,
          cancelText: showTime && showPrev && locale ? locale.prev : undefined
        }), /*#__PURE__*/React.createElement(View, {
          className: "".concat(clsPrefix, "container")
        }, showTime ? /*#__PURE__*/React.createElement(View, {
          className: classNames("".concat(clsPrefix, "range"), _defineProperty({}, "".concat(clsPrefix, "range--next"), showPrev))
        }, /*#__PURE__*/React.createElement(DateTimePicker, {
          className: "".concat(clsPrefix, "range-item"),
          showTime: showTime,
          validRange: validRange,
          value: pickerValue[0],
          disabledDate: disabledDate,
          onChange: _this3.handleOneChange.bind(_this3, 0)
        }), /*#__PURE__*/React.createElement(DateTimePicker, {
          className: "".concat(clsPrefix, "range-item"),
          showTime: showTime,
          validRange: nextRange,
          value: pickerValue[1],
          disabledDate: disabledDate,
          onChange: _this3.handleOneChange.bind(_this3, 1)
        })) : /*#__PURE__*/React.createElement(Calendar, {
          prefix: prefix,
          shape: "range",
          mode: "month",
          enableYearPicker: true,
          value: pickerValue,
          disabledDate: disabledDate,
          validRange: validRange,
          onSelect: _this3.handleChange
        })));
      });
    }
  }]);

  return RangePicker;
}(Component);

export default withLocale(RangePicker, {
  name: 'DatePicker',
  defaultLocale: {
    ok: '',
    cancel: '',
    prev: '上一步',
    next: '下一步',
    selectStartTime: '选择开始时间',
    selectEndTime: '选择结束时间'
  }
});