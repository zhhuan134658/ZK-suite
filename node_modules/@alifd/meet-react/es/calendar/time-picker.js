function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { createElement, useState, useEffect, Fragment } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";
import dayjs from 'dayjs';
import Icon from '../icon';
import View from '../view';
import { EmbedPicker } from '../time-picker';
import { isFunction } from '../utils';
import { isValidDate } from '../utils/date';
export default function CalendarTimePicker(props) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      value = props.value,
      _props$format = props.format,
      format = _props$format === void 0 ? 'HH:mm:ss' : _props$format,
      label = props.label,
      onPickerToggle = props.onPickerToggle,
      onChange = props.onChange;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showPicker = _useState2[0],
      setShowPicker = _useState2[1];

  var _useState3 = useState(isValidDate(value) ? value : new Date()),
      _useState4 = _slicedToArray(_useState3, 2),
      curTime = _useState4[0],
      setTime = _useState4[1];

  var clsPrefix = "".concat(prefix, "calendar-tp");
  useEffect(function () {
    if (isValidDate(value)) {
      setTime(value);
    }
  }, [value]);

  var handlePickerChange = function handlePickerChange(date) {
    var d = dayjs(date);
    var h = d.hour();
    var m = d.minute();
    var s = d.second();
    var newDate = dayjs(curTime).hour(h).minute(m).second(s);

    if (isFunction(onChange)) {
      onChange(newDate.toDate());
    }
  };

  var handleTimeClick = function handleTimeClick() {
    var nextState = !showPicker;

    if (isFunction(onPickerToggle)) {
      onPickerToggle(nextState);
    }

    setShowPicker(nextState);
  };

  return /*#__PURE__*/React.createElement(Fragment, null, showPicker ? /*#__PURE__*/React.createElement(EmbedPicker, {
    className: "".concat(clsPrefix, "-picker"),
    format: format,
    value: curTime,
    onChange: handlePickerChange
  }) : null, /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix)
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-row")
  }, /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-label")
  }, label), /*#__PURE__*/React.createElement(View, {
    className: classNames("".concat(clsPrefix, "-wrapper"), _defineProperty({}, "".concat(clsPrefix, "-wrapper--active"), showPicker)),
    onClick: handleTimeClick
  }, /*#__PURE__*/React.createElement(Text, {
    className: "".concat(clsPrefix, "-time")
  }, dayjs(curTime).format(format)), /*#__PURE__*/React.createElement(Icon, {
    className: classNames("".concat(clsPrefix, "-arrow"), _defineProperty({}, "".concat(clsPrefix, "-arrow--active"), showPicker)),
    name: "arrow-down"
  })))));
}