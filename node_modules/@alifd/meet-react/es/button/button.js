function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, Fragment, useCallback, useMemo, Children, cloneElement, isValidElement } from "react";
import { Text } from "@alifd/meet-react-component-one";
import Icon from '../icon/index';
import { isBoolean, isFunction, isNil } from '../utils';
import View from '../view';

var createChildren = function createChildren(children, classes, prefix, size) {
  var count = Children.count(children);
  return Children.map(children, function (child, index) {
    if (isNil(child) || isBoolean(child)) {
      return null;
    }

    var key = child.key || "mt-button-".concat(index);

    if (isValidElement(child)) {
      if (child.type === Text) {
        return cloneElement(child, {
          key: key,
          className: classNames(classes.textCls, child.props.className),
          style: child.props.style || {}
        });
      } else if (child.type === Icon) {
        var _classNames;

        return cloneElement(child, {
          key: key,
          className: classNames(classes.iconCls, child.props.className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "button-icon--").concat(size, "-first"), index === 0), _defineProperty(_classNames, "".concat(prefix, "button-icon--").concat(size, "-last"), index === count - 1), _classNames)),
          style: child.props.style || {}
        });
      } else {
        return cloneElement(child, {
          key: key
        });
      }
    } else {
      return /*#__PURE__*/React.createElement(Text, {
        key: key,
        className: classes.textCls
      }, child);
    }
  });
};

var Button = function Button(props, ref) {
  var _classNames2;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$type = props.type,
      typeProp = _props$type === void 0 ? 'normal' : _props$type,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      _props$text = props.text,
      text = _props$text === void 0 ? false : _props$text,
      _props$warning = props.warning,
      warning = _props$warning === void 0 ? false : _props$warning,
      children = props.children,
      _props$model = props.model,
      modelProp = _props$model === void 0 ? 'solid' : _props$model,
      className = props.className,
      _props$component = props.component,
      component = _props$component === void 0 ? View : _props$component,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? function () {} : _props$onClick,
      onDisabledClick = props.onDisabledClick,
      others = __rest(props, ["prefix", "type", "size", "fullWidth", "disabled", "loading", "text", "warning", "children", "model", "className", "component", "onClick", "onDisabledClick"]);

  var _useMemo = useMemo(function () {
    var nType = typeProp;
    var nModel = modelProp;

    if (typeProp === 'secondary') {
      nType = 'primary';
      nModel = 'outline';
    }

    if (text) {
      nModel = 'text';
    }

    if (warning) {
      nType = 'warning';
    }

    return [nType, nModel];
  }, [typeProp, modelProp, warning, text]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      type = _useMemo2[0],
      model = _useMemo2[1];

  var textCls = "".concat(prefix, "button-font--").concat(size);
  var iconCls = "".concat(prefix, "button-font--").concat(size);
  var classes = {
    textCls: textCls,
    iconCls: iconCls
  };
  var handleClick = useCallback(function (e) {
    if (disabled) {
      if (isFunction(onDisabledClick)) {
        onDisabledClick(e);
      }

      return;
    }

    onClick(e);
  }, [disabled, onDisabledClick, onClick]);
  return /*#__PURE__*/createElement(component, Object.assign(Object.assign({
    ref: ref
  }, others), {
    className: classNames(className, "".concat(prefix, "button"), "".concat(prefix, "button--").concat(size), "".concat(prefix, "button--").concat(type, "-").concat(model), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefix, "button--fullwidth"), fullWidth), _defineProperty(_classNames2, "".concat(prefix, "button--").concat(type, "-").concat(model, "-disabled"), disabled), _classNames2)),
    onClick: handleClick
  }), /*#__PURE__*/React.createElement(Fragment, null, loading ? /*#__PURE__*/React.createElement(Icon, {
    key: "prefix-icon",
    className: classNames(iconCls, "".concat(prefix, "button-icon--").concat(size, "-first")),
    name: "loading"
  }) : null, createChildren(children, classes, prefix, size)));
};

Button.displayName = 'Button';
export default /*#__PURE__*/forwardRef(Button);