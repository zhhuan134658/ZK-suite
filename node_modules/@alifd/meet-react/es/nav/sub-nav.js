function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, Fragment, useContext, useState, Children, cloneElement, isValidElement } from "react";
import Icon from '../icon';
import { isValidArray } from '../utils';
import View from '../view';
import NavContext from './context';
import NavItem from './item';

var SubNav = function SubNav(props, ref) {
  var className = props.className,
      icon = props.icon,
      _props$label = props.label,
      label = _props$label === void 0 ? '' : _props$label,
      _props$level = props.level,
      level = _props$level === void 0 ? 1 : _props$level,
      _props$expanded = props.expanded,
      expanded = _props$expanded === void 0 ? false : _props$expanded,
      _props$itemKey = props.itemKey,
      itemKey = _props$itemKey === void 0 ? '' : _props$itemKey,
      dataSource = props.dataSource,
      children = props.children,
      others = __rest(props, ["className", "icon", "label", "level", "expanded", "itemKey", "dataSource", "children"]);

  var ctx = useContext(NavContext);
  var onItemSelect = ctx.onItemSelect,
      clsPrefix = ctx.clsPrefix,
      model = ctx.model,
      type = ctx.type,
      size = ctx.size;

  var _useState = useState(expanded),
      _useState2 = _slicedToArray(_useState, 2),
      isExpanded = _useState2[0],
      setExpanded = _useState2[1];

  var keyCounter = 0;

  var handleSelect = function handleSelect() {
    setExpanded(!isExpanded);
  };

  var renderChildrenByData = function renderChildrenByData() {
    if (!dataSource) {
      return null;
    }

    return dataSource.map(function (item) {
      var newLevel = level + 1;
      var _itemKey = item.key;
      var _icon = item.icon,
          iconUri = item.iconUri,
          _children = item.children;
      return isValidArray(_children) ? /*#__PURE__*/React.createElement(SubNav, {
        key: _itemKey,
        itemKey: _itemKey,
        icon: icon,
        iconUri: iconUri,
        label: item.label,
        level: newLevel,
        dataSource: _children
      }) : /*#__PURE__*/React.createElement(NavItem, {
        key: _itemKey,
        itemKey: _itemKey,
        level: newLevel,
        icon: _icon,
        iconUri: iconUri,
        label: item.label
      });
    });
  };

  var renderChild = function renderChild(child) {
    keyCounter++;

    var _key = child.key || "".concat(itemKey, "-").concat(keyCounter);

    if (!isValidElement(child)) {
      return null;
    }

    return cloneElement(child, {
      key: _key,
      itemKey: _key,
      size: size,
      level: level + 1,
      onItemSelect: onItemSelect
    });
  };

  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(NavItem, _extends({
    ref: ref
  }, others, {
    icon: icon,
    label: label,
    level: level,
    onClick: handleSelect,
    className: classNames(className, _defineProperty({}, "".concat(clsPrefix, "--").concat(type, "-").concat(model, "-active"), isExpanded)),
    disableSelect: true,
    extra: /*#__PURE__*/React.createElement(Icon, {
      name: isExpanded ? 'arrow-up' : 'arrow-down',
      size: "s"
    })
  })), isExpanded ? /*#__PURE__*/React.createElement(View, null, dataSource ? renderChildrenByData() : Children.map(children, renderChild)) : null);
};

SubNav.displayName = 'Nav.SubNav';
export default /*#__PURE__*/forwardRef(SubNav);