import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { __rest } from "tslib";
import React, { createElement } from "react";
import classNames from 'classnames';
import { Text } from "@alifd/meet-react-component-one";

var Typography = function Typography(props) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$type = props.type,
      type = _props$type === void 0 ? 'body-1' : _props$type,
      className = props.className,
      children = props.children,
      _props$mark = props.mark,
      mark = _props$mark === void 0 ? false : _props$mark,
      _props$underline = props.underline,
      underline = _props$underline === void 0 ? false : _props$underline,
      _props$strong = props.strong,
      strong = _props$strong === void 0 ? false : _props$strong,
      _props$code = props.code,
      code = _props$code === void 0 ? false : _props$code,
      del = props["delete"],
      indented = props.indented,
      color = props.color,
      style = props.style,
      others = __rest(props, ["prefix", "type", "className", "children", "mark", "underline", "strong", "code", "delete", "indented", "color", "style"]);

  var clsPrefix = "".concat(prefix, "typography");
  var newStyle = Object.assign({
    color: color
  }, style);
  return /*#__PURE__*/React.createElement(Text, _extends({}, others, {
    className: classNames("".concat(clsPrefix), className, "".concat(clsPrefix, "--").concat(type), (_classNames = {}, _defineProperty(_classNames, "".concat(clsPrefix, "--mark"), mark), _defineProperty(_classNames, "".concat(clsPrefix, "--underline"), underline), _defineProperty(_classNames, "".concat(clsPrefix, "--strong"), strong), _defineProperty(_classNames, "".concat(clsPrefix, "--code"), code), _defineProperty(_classNames, "".concat(clsPrefix, "--delete"), del), _defineProperty(_classNames, "".concat(clsPrefix, "--").concat(type, "-indented"), indented), _classNames)),
    style: __rpx2vw__(newStyle)
  }), children);
};

Typography.displayName = 'Typography';
export default Typography;