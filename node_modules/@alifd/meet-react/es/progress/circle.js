import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { __awaiter, __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect } from "react";
import { Canvas } from "@alifd/meet-react-component-one";
import createContext from 'universal-canvas-context';
import { nextTick } from '../utils';
import { useGuid } from '../utils/hooks';
import View from '../view';
import { progressBackgroundColor, progressCircleFontSize, progressCircleWidthSize, progressiveColor, progressSize, statusColor } from './utils';

var CircleProgress = function CircleProgress(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$percent = props.percent,
      percent = _props$percent === void 0 ? 0 : _props$percent,
      color = props.color,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      backgroundColor = props.backgroundColor,
      _props$progressive = props.progressive,
      progressive = _props$progressive === void 0 ? false : _props$progressive,
      _props$state = props.state,
      state = _props$state === void 0 ? 'normal' : _props$state,
      text = props.text,
      className = props.className,
      others = __rest(props, ["prefix", "percent", "color", "size", "backgroundColor", "progressive", "state", "text", "className"]);

  var canvasId = useGuid('progress-');

  var progressiveColorEnabled = function progressiveColorEnabled() {
    if (progressive) {
      return progressiveColor(percent);
    } else {
      return color || statusColor(state);
    }
  };

  var drawBaseCircle = function drawBaseCircle(ctx, x, y, r) {
    ctx.save();
    ctx.beginPath();
    ctx.strokeStyle = progressBackgroundColor(backgroundColor);
    ctx.lineWidth = progressSize(size) / 2;
    ctx.arc(x, y, r, 0, Math.PI * 2, false);
    ctx.stroke();
    ctx.closePath();
    ctx.restore();
  };

  var drawCircle = function drawCircle(ctx, x, y, r, n, rad) {
    ctx.save();
    ctx.beginPath();
    ctx.strokeStyle = progressiveColorEnabled();
    ctx.lineWidth = progressSize(size) / 2;
    ctx.arc(x, y, r, -Math.PI / 2, -Math.PI / 2 + n * rad, false);
    ctx.lineCap = 'round';
    ctx.stroke();
    ctx.restore();
  };

  var drawText = function drawText(ctx, x, y, r, n) {
    ctx.save();
    ctx.font = "".concat(progressCircleFontSize(size), "px HelveticaNeue");
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(text || "".concat(n.toFixed(0), "%"), x, y);
    ctx.restore();
  };

  useEffect(function () {
    (function () {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var context, elementSize, centerX, centerY, rad;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return createContext(canvasId, '2d');

              case 2:
                context = _context.sent;
                elementSize = progressCircleWidthSize(size) * 2;
                centerX = progressCircleWidthSize(size);
                centerY = centerX;
                rad = Math.PI * 2 / 100;
                drawBaseCircle(context, centerX, centerY, centerX - progressSize(size) / 2);
                drawCircle(context, centerX, centerY, centerX - progressSize(size) / 2, percent, rad);
                drawText(context, centerX, centerY, centerX - progressSize(size) / 2, percent);

                if (context.draw) {
                  context.draw();
                }

                nextTick(function () {
                  if (context.clearRect) {
                    context.clearRect(0, 0, elementSize, elementSize);
                  }

                  drawBaseCircle(context, centerX, centerY, centerX - progressSize(size) / 2);
                  drawCircle(context, centerX, centerY, centerX - progressSize(size) / 2, percent, rad);
                  drawText(context, centerX, centerY, centerX - progressSize(size) / 2, percent);

                  if (context.draw) {
                    context.draw();
                  }
                });

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    })();
  }, [percent, color, size, state, progressive, backgroundColor]);
  var canvasSize = progressCircleWidthSize(size) * 2;
  return /*#__PURE__*/React.createElement(View, _extends({}, others, {
    className: classNames("".concat(prefix, "progress"), "".concat(prefix, "progress-circle"), className)
  }), /*#__PURE__*/React.createElement(Canvas, {
    id: canvasId,
    width: canvasSize,
    height: canvasSize,
    style: __rpx2vw__({
      width: "".concat(canvasSize, "px"),
      height: "".concat(canvasSize, "px")
    })
  }));
};

export default /*#__PURE__*/forwardRef(CircleProgress);