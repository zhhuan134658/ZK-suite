function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component, createElement } from "react";
import Form, { Item, Context } from '../form';

var FieldElement = /*#__PURE__*/function (_Component) {
  _inherits(FieldElement, _Component);

  var _super = _createSuper(FieldElement);

  function FieldElement(props) {
    var _this;

    _classCallCheck(this, FieldElement);

    _this = _super.call(this, props);
    _this.field = undefined;
    _this.renderPreview = _this.renderPreview.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FieldElement, [{
    key: "getValueName",
    value: function getValueName() {
      return 'value';
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var _a;

      var name = this.getValueName();

      if (name in this.props) {
        return this.props[name];
      }

      return (_a = this.field) === null || _a === void 0 ? void 0 : _a.getValue(this.props.name);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var _a;

      return (_a = this.field) === null || _a === void 0 ? void 0 : _a.setValue(this.props.name, value);
    }
  }, {
    key: "renderPreview",
    value: function renderPreview(value) {
      return value;
    }
  }, {
    key: "renderControl",
    value: function renderControl() {
      return '请重载 renderControl';
    }
  }, {
    key: "getProps",
    value: function getProps() {
      return this.props;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.field = undefined;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(Context.Consumer, null, function (ctx) {
        if (ctx.field && _this2.field !== ctx.field) {
          _this2.field = ctx.field;

          _this2.forceUpdate();
        }

        var item = /*#__PURE__*/React.createElement(Item, _extends({
          valuePropName: _this2.getValueName(),
          renderPreview: _this2.renderPreview
        }, _this2.getProps()), _this2.renderControl());

        if (ctx.form) {
          return item;
        } else {
          return /*#__PURE__*/React.createElement(Form, {
            saveField: function saveField(field) {
              _this2.field = field;

              _this2.forceUpdate();
            }
          }, item);
        }
      });
    }
  }]);

  return FieldElement;
}(Component);

export { FieldElement as default };
FieldElement.displayName = 'Field';