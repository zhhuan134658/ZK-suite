function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { createElement, useState } from "react";
import { renderToRoot } from '../utils/render';
import Dialog from './dialog';

var DialogWrapper = function DialogWrapper(props) {
  var onClose = props.onClose;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var handleClose = function handleClose(reason, e) {
    setVisible(false);
    setTimeout(function () {
      if (onClose) {
        onClose(reason, e);
      }
    }, 300);
  };

  return /*#__PURE__*/React.createElement(Dialog, _extends({}, props, {
    onClose: handleClose,
    visible: visible,
    disablePortal: true
  }));
};

var hideStack = [];
export var show = function show(props) {
  var emptyFn = function emptyFn() {};

  var _props$onClose = props.onClose,
      _onClose = _props$onClose === void 0 ? emptyFn : _props$onClose;

  var hideCurrent = renderToRoot( /*#__PURE__*/React.createElement(DialogWrapper, _extends({}, props, {
    onClose: function onClose(reason, e) {
      _onClose(reason, e);

      _onClose = emptyFn;
      hideCurrent();
    }
  })), function () {
    return _onClose('api', null);
  });
  hideStack.push(hideCurrent);
  return {
    hide: hideCurrent
  };
};
export var hide = function hide() {
  while (hideStack.length) {
    var h = hideStack.pop();

    if (h) {
      h.call(null);
    }
  }
};
export var alert = function alert(props) {
  return show(Object.assign(Object.assign({}, props), {
    type: 'alert'
  }));
};
export var confirm = function confirm(props) {
  return show(Object.assign(Object.assign({}, props), {
    type: 'confirm'
  }));
};