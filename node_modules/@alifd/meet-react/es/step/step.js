function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __awaiter, __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState, Children, isValidElement, cloneElement } from "react";
import { ScrollView } from "@alifd/meet-react-component-one";
import { getBoundingClientRect } from 'universal-element';
import { getWidth, isStrictWechatMiniProgram, get } from '../utils';
import { useGuid } from '../utils/hooks';
import View from '../view';
import Item from './item';

var getCurrent = function getCurrent(props) {
  var current = props.current,
      children = props.children;
  var childCount = Children.count(children);
  var newCurrent = current;

  if (isNaN(current) || current < -1) {
    newCurrent = -1;
  } else if (current > childCount) {
    newCurrent = childCount - 1;
  }

  return newCurrent;
};

var Step = function Step(props, ref) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'circle' : _props$shape,
      children = props.children,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      _props$direction = props.direction,
      directionProp = _props$direction === void 0 ? 'hoz' : _props$direction,
      className = props.className,
      onChange = props.onChange;
  var clsPrefix = "".concat(prefix, "step");
  var direction = shape === 'arrow' ? 'hoz' : directionProp;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOverflow = _useState2[0],
      setOverflow = _useState2[1];

  var clses = {
    step: classNames(className, "".concat(clsPrefix), (_classNames = {}, _defineProperty(_classNames, "".concat(clsPrefix, "--scroll"), isOverflow), _defineProperty(_classNames, "".concat(clsPrefix, "--wechat-").concat(shape), isStrictWechatMiniProgram && direction === 'hoz'), _classNames)),
    container: classNames("".concat(clsPrefix, "-container"), "".concat(clsPrefix, "-container--").concat(direction), _defineProperty({}, "".concat(clsPrefix, "-container--scroll"), isOverflow))
  };
  var validChildren = Children.toArray(children).filter(function (child) {
    return isValidElement(child) && child.type === Item;
  }) || [];
  var childrenCount = validChildren.length;
  var current = getCurrent(props);
  var disabledIndexes = validChildren.map(function (child, index) {
    return disabled || get(child, 'props.disabled') ? index : null;
  }).filter(function (item) {
    return item !== null;
  });
  var stepId = useGuid('step-');
  var stepContainerId = useGuid('step-container-');
  var Parent = direction === 'hoz' ? ScrollView : View;

  if (shape === 'arrow' && directionProp === 'ver') {
    console.warn('arrow shape support hoz direction only');
  }

  useEffect(function () {
    (function () {
      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var width, containerWidth, ele;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getWidth(stepId);

              case 2:
                width = _context.sent;
                _context.next = 5;
                return getWidth(stepContainerId);

              case 5:
                containerWidth = _context.sent;

                if (isStrictWechatMiniProgram) {
                  ele = document.getElementById(stepContainerId);

                  if (ele && ele._internal) {
                    getBoundingClientRect("#".concat(stepId), ele._internal).then(function (res) {
                      if (res && res[0] && res[0].width) {
                        var w = res[0].width;
                        setOverflow(w >= containerWidth);
                      }
                    });
                  }
                } else {
                  setOverflow(width >= containerWidth);
                }

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    })();
  });

  var renderChildren = function renderChildren() {
    return validChildren.map(function (child, index) {
      var childProps = child.props;

      var childDisabled = childProps.disabled,
          childStatusProp = childProps.status,
          childClassName = childProps.className,
          childOnClick = childProps.onClick,
          others = __rest(childProps, ["disabled", "status", "className", "onClick"]);

      var status = childStatusProp;

      if (!childStatusProp) {
        status = 'wait';

        if (index === current) {
          status = 'process';
        } else if (index < current) {
          status = 'finish';
        }
      }

      return cloneElement(child, Object.assign(Object.assign({
        key: "mt_step_".concat(index)
      }, others), {
        order: index,
        isFirst: index === 0,
        isLast: index === childrenCount - 1,
        isPreDisabled: disabledIndexes.indexOf(index - 1) > -1,
        shape: shape,
        direction: direction,
        status: status,
        prefix: prefix,
        onClick: function onClick() {
          if (childOnClick) {
            childOnClick(index);
          }

          if (onChange && !readOnly && !disabled && !childDisabled) {
            onChange(index);
          }
        },
        className: classNames(childClassName, "".concat(clsPrefix, "-item--").concat(direction))
      }));
    });
  };

  return /*#__PURE__*/React.createElement(Parent, {
    id: stepContainerId,
    ref: ref,
    className: clses.step,
    horizontal: true
  }, /*#__PURE__*/React.createElement(View, {
    id: stepId,
    className: clses.container
  }, renderChildren()));
};

Step.displayName = 'Step';
export default /*#__PURE__*/forwardRef(Step);