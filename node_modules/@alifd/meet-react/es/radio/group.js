import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState, Children } from "react";
import { Text } from "@alifd/meet-react-component-one";
import { getDataSourceFromChildren, isFunction, isNumber, isString, isUndef, isValidArray } from '../utils';
import { getItemsFromDataSource } from '../utils/tree';
import View from '../view';
import Radio from './radio';

var getInitValue = function getInitValue(props) {
  var ret = [];

  if ('value' in props) {
    ret = props.value;
  } else if (!isUndef(props.defaultValue)) {
    ret = props.defaultValue;
  }

  return ret;
};

var RadioGroup = function RadioGroup(props, ref) {
  var _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'ver' : _props$direction,
      children = props.children,
      groupDisabled = props.disabled,
      defaultValue = props.defaultValue,
      value = props.value,
      readOnly = props.readOnly,
      onChange = props.onChange,
      className = props.className,
      isPreview = props.isPreview,
      renderPreview = props.renderPreview,
      previewClassNameProp = props.previewClassName,
      previewStyle = props.previewStyle,
      dataSource = props.dataSource,
      labelAlign = props.labelAlign,
      others = __rest(props, ["size", "prefix", "direction", "children", "disabled", "defaultValue", "value", "readOnly", "onChange", "className", "isPreview", "renderPreview", "previewClassName", "previewStyle", "dataSource", "labelAlign"]);

  var _useState = useState(getInitValue(props)),
      _useState2 = _slicedToArray(_useState, 2),
      groupValue = _useState2[0],
      setGroupValue = _useState2[1];

  var isControlled = ('value' in props);
  var previewClassName = classNames(previewClassNameProp, "".concat(prefix, "form-item-input--preview-").concat(size));
  var groupCls = classNames("".concat(prefix, "radio-group"), "".concat(prefix, "radio-group--").concat(direction), "".concat(prefix, "radio-group--").concat(labelAlign, "-").concat(size), className);
  useEffect(function () {
    var newValue = getInitValue(props);

    if (isControlled) {
      setGroupValue(newValue);
    }
  }, [value, groupValue]);

  var handleChange = function handleChange(selected, radioValue, e, isDisabled) {
    if (!isDisabled && !readOnly) {
      if (!isControlled) {
        setGroupValue(radioValue);
      }

      if (selected && isFunction(onChange)) {
        onChange(radioValue, e);
      }
    }
  };

  var content;
  var ds = dataSource;

  if (!ds && Children.count(children) > 0) {
    ds = getDataSourceFromChildren(children);
  }

  if (isValidArray(ds)) {
    content = ds.map(function (item, index) {
      var itemData = {
        style: {},
        value: null,
        checked: false,
        label: '',
        text: '',
        disabled: false,
        size: size
      };

      var itemOnClick = item.onClick,
          itemOnChange = item.onChange,
          itemClassName = item.className,
          itemLabel = item.label,
          itemText = item.text,
          itemRest = __rest(item, ["onClick", "onChange", "className", "label", "text"]);

      if (isString(item) || isNumber(item)) {
        itemData.value = item;
      } else {
        itemData = Object.assign(Object.assign({}, itemData), itemRest);
      }

      var isDisabled = groupDisabled || itemData.disabled;
      var label = itemLabel || itemText || itemData.value;
      var isLast = index === ds.length - 1;
      return /*#__PURE__*/React.createElement(Radio, _extends({}, itemData, {
        key: "radio_".concat(index),
        className: classNames(itemClassName, _defineProperty({}, "".concat(prefix, "radio-item--").concat(direction, "-").concat(size), !isLast)),
        disabled: isDisabled,
        checked: itemData.checked || itemData.value === groupValue,
        onChange: function onChange(selected, e) {
          if (isFunction(itemOnChange)) {
            itemOnChange(selected, e);
          }

          handleChange(selected, itemData.value, e, isDisabled);
        },
        onClick: itemOnClick
      }), label);
    });
  }

  if (isPreview) {
    var arr = getItemsFromDataSource(ds, groupValue);
    var previewItem = {};

    if (isValidArray(arr)) {
      previewItem = arr[0];
    }

    if (isFunction(renderPreview)) {
      return /*#__PURE__*/React.createElement(View, {
        className: previewClassName,
        style: __rpx2vw__(previewStyle)
      }, renderPreview(previewItem));
    }

    return /*#__PURE__*/React.createElement(Text, {
      className: previewClassName,
      style: __rpx2vw__(previewStyle)
    }, previewItem.label || previewItem.text);
  }

  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref,
    className: groupCls
  }, others), content);
};

RadioGroup.displayName = 'Radio.Group';
export default /*#__PURE__*/forwardRef(RadioGroup);