function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { __rest } from "tslib";
import React, { createElement, forwardRef, useRef } from "react";
import classNames from 'classnames';
import { isStrictMiniApp } from '../utils';
import './styles/index.css';
var View = /*#__PURE__*/forwardRef(function (props, ref) {
  var selfRef = useRef(null);

  var onFirstAppear = props.onFirstAppear,
      _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      className = props.className,
      hasSafeArea = props.hasSafeArea,
      onAppear = props.onAppear,
      _props$withoutTouch = props.withoutTouch,
      withoutTouch = _props$withoutTouch === void 0 ? true : _props$withoutTouch,
      rest = __rest(props, ["onFirstAppear", "prefix", "className", "hasSafeArea", "onAppear", "withoutTouch"]);

  var newClsName = classNames(className, _defineProperty({}, "".concat(prefix, "view-safe-area"), hasSafeArea));

  if (isStrictMiniApp) {
    return withoutTouch ? /*#__PURE__*/React.createElement("view", _extends({}, rest, {
      className: newClsName,
      onAppear: onAppear,
      onDisappear: rest.onDisappear,
      onFirstAppear: onFirstAppear,
      ref: ref
    })) : /*#__PURE__*/React.createElement("div", _extends({}, rest, {
      className: newClsName,
      onAppear: onAppear,
      onDisappear: rest.onDisappear,
      onFirstAppear: onFirstAppear,
      ref: ref
    }));
  }

  var handleAppear = onAppear;

  if (onFirstAppear) {
    handleAppear = function handleAppear(event) {
      if (onAppear) {
        onAppear(event);
      }

      if (!selfRef.triggeredAppear) {
        if (onFirstAppear) {
          onFirstAppear(event);
        }
      } else {
        selfRef.triggeredAppear = true;
      }
    };
  }

  return /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    className: newClsName,
    onAppear: handleAppear,
    ref: ref
  }));
});
View.displayName = 'View';
export default View;