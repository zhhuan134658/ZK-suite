function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { __rest } from "tslib";
import React, { createElement, forwardRef, useContext } from "react";
import Button from '../button';
import Context from './context';
var Reset = /*#__PURE__*/forwardRef(function (props, ref) {
  var onClick = props.onClick,
      _props$toDefault = props.toDefault,
      toDefault = _props$toDefault === void 0 ? true : _props$toDefault,
      names = props.names,
      children = props.children,
      other = __rest(props, ["onClick", "toDefault", "names", "children"]);

  var _useContext = useContext(Context),
      form = _useContext.form,
      size = _useContext.size;

  var handleClick = function handleClick(e) {
    if (form) {
      form.reset(toDefault, names);
    }

    if (onClick) {
      onClick(e);
    }
  };

  return /*#__PURE__*/React.createElement(Button, _extends({
    size: size
  }, other, {
    onClick: handleClick
  }), children);
});
export default Reset;