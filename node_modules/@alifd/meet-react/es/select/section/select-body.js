function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React, { createElement, useContext } from "react";
import List from '../../list';
import Menu from '../../menu';
import TagSelect from '../../tag-select';
import { findInArray, isNil } from '../../utils';
import View from '../../view';
import SelectContext from '../context';
import Option from '../option';
import { defaultLocalFilter, isSelected, removeItemFromArray } from '../util';

var SelectBody = function SelectBody(props) {
  var _useContext = useContext(SelectContext),
      prefix = _useContext.prefix,
      size = _useContext.size,
      displayType = _useContext.displayType,
      disabled = _useContext.disabled,
      mode = _useContext.mode,
      dataSource = _useContext.dataSource,
      _useContext$filterLoc = _useContext.filterLocal,
      filterLocal = _useContext$filterLoc === void 0 ? true : _useContext$filterLoc,
      _useContext$filter = _useContext.filter,
      filter = _useContext$filter === void 0 ? defaultLocalFilter : _useContext$filter,
      searchValue = _useContext.searchValue,
      innerValue = _useContext.innerValue,
      _onChange = _useContext.onChange;

  var renderWithTag = displayType === 'tag';
  var renderWithMenu = !renderWithTag && mode === 'single';
  var filteredDataSource = dataSource.filter(function (item) {
    if (filterLocal) {
      return filter(searchValue, item);
    }

    return true;
  });

  if (renderWithMenu) {
    return /*#__PURE__*/React.createElement(Menu, {
      prefix: prefix,
      size: size,
      selectMode: "single",
      dataSource: filteredDataSource,
      selectedKeys: innerValue.map(function (it) {
        return it.value;
      }),
      onItemClick: function onItemClick(_, item) {
        return _onChange([{
          label: item.label,
          value: item.value
        }]);
      }
    });
  }

  if (renderWithTag) {
    return /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefix, "select--tag-").concat(size)
    }, /*#__PURE__*/React.createElement(TagSelect, {
      prefix: prefix,
      mode: mode,
      size: size,
      value: innerValue.map(function (it) {
        return it.value;
      }),
      dataSource: filteredDataSource,
      onChange: function onChange(v) {
        if (isNil(v)) {
          _onChange([]);

          return;
        }

        var newValue = Array.isArray(v) ? v : [v];
        var newItems = newValue.map(function (x) {
          return findInArray(filteredDataSource, function (item) {
            return item.value === x;
          });
        });

        _onChange(newItems);
      }
    }));
  }

  return /*#__PURE__*/React.createElement(List, null, filteredDataSource.map(function (it) {
    return /*#__PURE__*/React.createElement(Option, _extends({
      key: it.value,
      selected: isSelected(innerValue, it.value),
      disabled: disabled || it.disabled,
      onClick: function onClick() {
        var selectedItem = findInArray(innerValue, function (item) {
          return item.value === it.value;
        });

        if (selectedItem) {
          _onChange(removeItemFromArray(innerValue, selectedItem.value));
        } else {
          _onChange([].concat(_toConsumableArray(innerValue), [{
            label: it.label,
            value: it.value
          }]));
        }
      }
    }, it), it.label);
  }));
};

export default SelectBody;