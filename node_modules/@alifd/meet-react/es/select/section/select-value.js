function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classNames from 'classnames';
import React, { createElement, useContext } from "react";
import { ItemContext } from '../../form';
import TagSelect from '../../tag-select';
import View from '../../view';

var SelectValue = function SelectValue(props) {
  var items = props.items,
      prefix = props.prefix,
      displayType = props.displayType,
      size = props.size,
      disabled = props.disabled,
      type = props.type;

  var _useContext = useContext(ItemContext),
      isInsideForm = _useContext.isInsideForm,
      labelAlign = _useContext.labelAlign;

  var inlineMode = displayType === 'tag' && isInsideForm && labelAlign === 'inset';
  var clsPrefix = "".concat(prefix, "select");
  var isInverse = type === 'inverse';

  if (displayType === 'normal') {
    var _classNames;

    return /*#__PURE__*/React.createElement(View, {
      className: classNames((_classNames = {}, _defineProperty(_classNames, "".concat(clsPrefix, "-value--inverse"), isInverse), _defineProperty(_classNames, "".concat(clsPrefix, "-value--disabled"), disabled), _defineProperty(_classNames, "".concat(clsPrefix, "-value--inverse-disabled"), disabled && isInverse), _classNames))
    }, items.join(','));
  } else {
    return /*#__PURE__*/React.createElement(TagSelect, {
      disabled: disabled,
      isPreview: true,
      inlineMode: inlineMode,
      prefix: prefix,
      size: size,
      dataSource: items
    });
  }
};

export default SelectValue;