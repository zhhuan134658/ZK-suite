function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { __rest } from "tslib";
import classnames from 'classnames';
import React, { createElement, forwardRef, useContext } from "react";
import Icon from '../icon';
import List from '../list';
import { isInvalidValue } from '../utils';
import MenuContext from './menu-context';

var MenuItem = function MenuItem(props, ref) {
  var context = useContext(MenuContext);

  var className = props.className,
      children = props.children,
      disabled = props.disabled,
      itemKey = props.itemKey,
      title = props.title,
      others = __rest(props, ["className", "children", "disabled", "itemKey", "title"]);

  var prefix = context.prefix,
      selectMode = context.selectMode,
      selectedKeys = context.selectedKeys,
      onClickItem = context.onClickItem,
      onSelect = context.onSelect;
  var selected = !isInvalidValue(itemKey) && selectedKeys.includes(itemKey);

  var handleClick = function handleClick(e) {
    onClickItem(itemKey, props, e);

    if (selectMode) {
      onSelect(!selected, props);
    }
  };

  return /*#__PURE__*/React.createElement(List.Item, _extends({}, others, {
    className: classnames("".concat(prefix, "menu-item"), className, _defineProperty({}, "".concat(prefix, "menu-item--disabled"), disabled)),
    title: children || title,
    disabled: disabled,
    extra: selected ? /*#__PURE__*/React.createElement(Icon, {
      name: "select"
    }) : null,
    onClick: handleClick
  }));
};

export default /*#__PURE__*/forwardRef(MenuItem);