function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { createElement, forwardRef, useCallback, useMemo, Children } from "react";
import classNames from 'classnames';
import View from '../view';
import Item from './item';
import MenuContext from './menu-context';
import SubMenu from './sub-menu';
import { getNotUndef, isValidArray } from '../utils';
import { useValue } from '../utils/hooks';
import { DEFAULT_INLINE_INDENT } from './constant';

var handleChildren = function handleChildren(children) {
  var prefixKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return Children.map(children, function (child, index) {
    var keyPath = prefixKey + index.toString();
    var key = child.key || keyPath;
    child.props = Object.assign({}, child.props, {
      keyPath: keyPath,
      depth: depth,
      key: key,
      itemKey: key
    });

    if (child.props.children && child.props.children instanceof Array) {
      handleChildren(child.props.children, "".concat(keyPath, "-"), depth + 1);
    }

    return child;
  });
};

var handleDataSource = function handleDataSource(items) {
  var prefixKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return items.map(function (child, index) {
    var keyPath = prefixKey + index.toString();
    var key = getNotUndef(child.key, child.value, keyPath);

    if (isValidArray(child.children)) {
      var subChild = handleDataSource(child.children, "".concat(keyPath, "-"), depth + 1);
      return /*#__PURE__*/createElement(SubMenu, Object.assign(Object.assign({}, child), {
        key: key,
        keyPath: keyPath,
        depth: depth
      }), subChild);
    } else {
      return /*#__PURE__*/createElement(Item, Object.assign(Object.assign({}, child), {
        key: key,
        itemKey: key,
        keyPath: keyPath
      }), child.label);
    }
  });
};

var Menu = function Menu(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      className = props.className,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      selectMode = props.selectMode,
      _props$onItemClick = props.onItemClick,
      onItemClick = _props$onItemClick === void 0 ? function () {} : _props$onItemClick,
      _props$onOpen = props.onOpen,
      onOpen = _props$onOpen === void 0 ? function () {} : _props$onOpen,
      _props$inlineIndent = props.inlineIndent,
      inlineIndent = _props$inlineIndent === void 0 ? DEFAULT_INLINE_INDENT : _props$inlineIndent,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? function () {} : _props$onSelect,
      dataSource = props.dataSource,
      children = props.children;

  var _useValue = useValue(props, [], {
    valueName: 'openKeys',
    compare: function compare(a, b) {
      return a.join(',') === b.join(',');
    }
  }),
      _useValue2 = _slicedToArray(_useValue, 3),
      openKeys = _useValue2[0],
      setOpenKeys = _useValue2[1],
      isOpenControlled = _useValue2[2];

  var _useValue3 = useValue(props, [], {
    valueName: 'selectedKeys',
    compare: function compare(a, b) {
      return a.join(',') === b.join(',');
    }
  }),
      _useValue4 = _slicedToArray(_useValue3, 3),
      selectedKeys = _useValue4[0],
      setSelectedKeys = _useValue4[1],
      isSelectedControlled = _useValue4[2];

  var handleOpen = useCallback(function (_ref) {
    var key = _ref.key,
        open = _ref.open;
    var newOpenKeys = [];

    if (open) {
      newOpenKeys = openKeys.concat(key);
    } else {
      newOpenKeys = openKeys.filter(function (item) {
        return item !== key;
      });
    }

    if (isOpenControlled) {
      onOpen(newOpenKeys, {
        key: key,
        open: open
      });
    } else {
      setOpenKeys(newOpenKeys);
    }
  }, [openKeys, isOpenControlled, onOpen]);
  var handleClickItem = useCallback(function (key, item, event) {
    return onItemClick(key, item, event);
  }, [onItemClick]);
  var handleSelect = useCallback(function (selected, item) {
    var newSelectedKeys = [];
    var key = item.itemKey;
    var keyPath = item.keyPath;

    if (selected) {
      if (selectMode === 'single') {
        newSelectedKeys = [key];
      } else if (selectMode === 'multiple') {
        newSelectedKeys = selectedKeys.concat(key);
      }
    } else {
      newSelectedKeys = selectedKeys.filter(function (i) {
        return i !== key;
      });
    }

    if (isSelectedControlled) {
      onSelect(newSelectedKeys, item, {
        select: selected,
        key: key,
        label: item.children,
        keyPath: keyPath
      });
    } else {
      setSelectedKeys(newSelectedKeys);
    }
  }, [selectMode, selectedKeys, isSelectedControlled, onSelect]);
  var context = useMemo(function () {
    return {
      prefix: prefix,
      size: size,
      selectMode: selectMode,
      inlineIndent: inlineIndent,
      openKeys: openKeys,
      selectedKeys: selectedKeys,
      onOpen: handleOpen,
      onClickItem: handleClickItem,
      onSelect: handleSelect
    };
  }, [prefix, size, selectMode, inlineIndent, openKeys, selectedKeys, handleOpen, handleClickItem, handleSelect]);
  var newChildren = useMemo(function () {
    return isValidArray(dataSource) ? handleDataSource(dataSource) : handleChildren(children);
  }, [props.dataSource, children]);
  return /*#__PURE__*/React.createElement(MenuContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(View, {
    ref: ref,
    className: classNames("".concat(prefix, "menu"), className, "".concat(prefix, "menu-size-").concat(size))
  }, newChildren, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefix, "menu-obstructive")
  })));
};

Menu.displayName = 'Menu';
export default /*#__PURE__*/forwardRef(Menu);