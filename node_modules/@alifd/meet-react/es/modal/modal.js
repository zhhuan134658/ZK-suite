import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState } from "react";
import { Portal } from "@alifd/meet-react-component-one";
import View from '../view';
import Mask from './mask';
import { isNumber } from '../utils';

var Modal = function Modal(props, ref) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$view = props.view,
      view = _props$view === void 0 ? false : _props$view,
      _props$visible = props.visible,
      visible = _props$visible === void 0 ? false : _props$visible,
      container = props.container,
      _props$disablePortal = props.disablePortal,
      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'center' : _props$placement,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$maskClassName = props.maskClassName,
      maskClassName = _props$maskClassName === void 0 ? '' : _props$maskClassName,
      _props$containerClass = props.containerClassName,
      containerClassName = _props$containerClass === void 0 ? '' : _props$containerClass,
      _props$containerStyle = props.containerStyle,
      containerStyle = _props$containerStyle === void 0 ? {} : _props$containerStyle,
      _props$showMask = props.showMask,
      showMask = _props$showMask === void 0 ? true : _props$showMask,
      _props$maskClosable = props.maskClosable,
      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
      _props$usePortal = props.usePortal,
      usePortal = _props$usePortal === void 0 ? true : _props$usePortal,
      _props$disableScroll = props.disableScroll,
      disableScroll = _props$disableScroll === void 0 ? false : _props$disableScroll,
      _props$onMaskClick = props.onMaskClick,
      onMaskClick = _props$onMaskClick === void 0 ? function () {} : _props$onMaskClick,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? function () {} : _props$onClose,
      _props$onVisibleChang = props.onVisibleChange,
      onVisibleChange = _props$onVisibleChang === void 0 ? function () {} : _props$onVisibleChang,
      children = props.children,
      zIndex = props.zIndex,
      _props$style = props.style,
      styleProp = _props$style === void 0 ? {} : _props$style,
      others = __rest(props, ["prefix", "view", "visible", "container", "disablePortal", "placement", "className", "maskClassName", "containerClassName", "containerStyle", "showMask", "maskClosable", "usePortal", "disableScroll", "onMaskClick", "onClose", "onVisibleChange", "children", "zIndex", "style"]);

  var _useState = useState(props.visible),
      _useState2 = _slicedToArray(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];

  useEffect(function () {
    if (show && !visible) {
      var t1 = setTimeout(function () {
        setShow(false);
      }, 300);
      return function () {
        clearTimeout(t1);
      };
    } else {
      setShow(visible);
      onVisibleChange(visible);
    }
  }, [visible]);

  var handleMaskClick = function handleMaskClick(e) {
    if (onMaskClick) {
      onMaskClick(e);
    }

    if (maskClosable && onClose) {
      onClose('mask', e);
      onVisibleChange(false, 'mask');
    }
  };

  var clsPrefix = "".concat(prefix, "modal");
  var modalContainer = /*#__PURE__*/React.createElement(View, _extends({}, others, {
    className: classNames(containerClassName, "".concat(clsPrefix, "-container"), "".concat(clsPrefix, "-container--").concat(placement), (_classNames = {}, _defineProperty(_classNames, "".concat(clsPrefix, "-container--").concat(placement, "-active"), visible), _defineProperty(_classNames, "".concat(clsPrefix, "-container--").concat(placement, "-inactive"), !visible), _classNames)),
    style: __rpx2vw__(Object.assign(Object.assign({}, styleProp), containerStyle))
  }), children);
  var element = show ? /*#__PURE__*/React.createElement(View, {
    "disable-scroll": disableScroll,
    catchTouchMove: disableScroll,
    className: classNames(className, "".concat(clsPrefix), "".concat(clsPrefix, "--").concat(placement), _defineProperty({}, "".concat(clsPrefix, "--no-portal"), !usePortal)),
    ref: ref,
    style: __rpx2vw__(isNumber(zIndex) ? {
      zIndex: zIndex
    } : null)
  }, showMask ? /*#__PURE__*/React.createElement(Mask, {
    className: maskClassName,
    visible: visible,
    onClick: handleMaskClick
  }) : null, modalContainer) : null;

  if (disablePortal || view) {
    return element;
  }

  if (!usePortal) {
    return /*#__PURE__*/React.createElement(View, {
      className: "".concat(clsPrefix, "-theme-wrapper")
    }, element);
  }

  return /*#__PURE__*/React.createElement(Portal, {
    container: container
  }, element);
};

Modal.displayName = 'Modal';
export default /*#__PURE__*/forwardRef(Modal);