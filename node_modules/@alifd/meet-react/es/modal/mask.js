function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState } from "react";
import { isWeb } from '@uni/env';
import View from '../view';

var Mask = function Mask(props, ref) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      className = props.className,
      visible = props.visible,
      view = props.view,
      others = __rest(props, ["prefix", "className", "visible", "view"]);

  var _useState = useState(visible),
      _useState2 = _slicedToArray(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];

  var initOverflow = '';

  if (isWeb) {
    initOverflow = document.body.style.overflow;
  }

  useEffect(function () {
    if (!visible && show) {
      var t1 = setTimeout(function () {
        setShow(false);
      }, 250);
      return function () {
        clearTimeout(t1);
      };
    } else {
      setShow(visible);
    }

    if (isWeb) {
      if (visible) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = initOverflow;
      }

      return function () {
        var activeMasks = document.getElementsByClassName("".concat(clsPrefix, "-mask--active"));

        if (activeMasks.length === 0) {
          document.body.style.overflow = initOverflow;
        }
      };
    }
  }, [visible]);

  if (!show) {
    return null;
  }

  var clsPrefix = "".concat(prefix, "modal");
  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref
  }, others, {
    "disable-scroll": true,
    catchTouchMove: true,
    className: classNames(className, "".concat(clsPrefix, "-mask"), (_classNames = {}, _defineProperty(_classNames, "".concat(clsPrefix, "-mask--active"), visible), _defineProperty(_classNames, "".concat(clsPrefix, "-mask--inactive"), !visible), _classNames))
  }));
};

Mask.displayName = 'Modal.Mask';
export default /*#__PURE__*/forwardRef(Mask);