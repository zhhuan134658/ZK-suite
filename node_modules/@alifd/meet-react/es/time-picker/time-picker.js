function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import React, { createElement, forwardRef, useContext, useEffect, useState } from "react";
import dayjs from 'dayjs';
import { ItemContext } from '../form';
import SelectDrawer from '../select-drawer';
import { isValidDate, toDate } from '../utils/date';
import View from '../view';
import EmbedPicker from './embed-picker';
import './styles/index.css';
import { isFunction } from '../utils';

var TimePicker = function TimePicker(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      sizeProp = props.size,
      alignProp = props.align,
      iconType = props.iconType,
      placeholder = props.placeholder,
      format = props.format,
      hasClear = props.hasClear,
      disabled = props.disabled,
      readOnly = props.readOnly,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$onClear = props.onClear,
      onClear = _props$onClear === void 0 ? function () {} : _props$onClear,
      _props$onCancel = props.onCancel,
      onCancel = _props$onCancel === void 0 ? function () {} : _props$onCancel,
      className = props.className,
      zIndex = props.zIndex,
      others = __rest(props, ["prefix", "value", "defaultValue", "size", "align", "iconType", "placeholder", "format", "hasClear", "disabled", "readOnly", "onChange", "onClear", "onCancel", "className", "zIndex"]);

  var _useState = useState(toDate(valueProp || defaultValue)),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = useState(value || new Date()),
      _useState4 = _slicedToArray(_useState3, 2),
      pickerValue = _useState4[0],
      setPickerValue = _useState4[1];

  var _useContext = useContext(ItemContext),
      isInsideForm = _useContext.isInsideForm,
      contentAlign = _useContext.contentAlign,
      contextSize = _useContext.size;

  var align = alignProp || (isInsideForm ? contentAlign : 'left');
  var size = sizeProp || (isInsideForm ? contextSize : 'medium');
  var isControlled = ('value' in props);

  var handleOk = function handleOk() {
    var newValue = pickerValue;

    if (onChange) {
      onChange(newValue);
    }

    if (!isControlled) {
      setValue(newValue);
    }
  };

  useEffect(function () {
    if ('value' in props) {
      var newValue = toDate(valueProp || defaultValue);

      if (!isValidDate(newValue) || newValue === value) {
        return;
      }

      setValue(newValue);
      setPickerValue(newValue);
    }
  }, [valueProp]);

  var handleCancel = function handleCancel(reason) {
    setPickerValue(value || new Date());

    if (isFunction(onCancel)) {
      onCancel(reason);
    }
  };

  var handleChange = function handleChange(d) {
    return setPickerValue(d);
  };

  var handleClear = function handleClear() {
    if (!isControlled) {
      setPickerValue(new Date());
      setValue(undefined);
    }

    if (onClear) {
      onClear();
    }

    if (onChange) {
      onChange(undefined);
    }
  };

  return /*#__PURE__*/React.createElement(SelectDrawer, {
    disableScroll: true,
    hasClear: hasClear,
    content: value ? dayjs(value).format(format || 'HH:mm') : '',
    align: align,
    size: size,
    iconType: iconType,
    placeholder: placeholder,
    disabled: disabled,
    readOnly: readOnly,
    className: className,
    zIndex: zIndex,
    onOk: handleOk,
    onCancel: handleCancel,
    onClear: handleClear
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefix, "timepicker-container"),
    "disable-scroll": true
  }, /*#__PURE__*/React.createElement(EmbedPicker, _extends({}, others, {
    prefix: prefix,
    value: pickerValue,
    format: format || 'HH:mm',
    onChange: handleChange
  }))));
};

TimePicker.displayName = 'TimePicker';
export default /*#__PURE__*/forwardRef(TimePicker);