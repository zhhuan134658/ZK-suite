function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { getComponentRect, px2rem } from './dom';
import { isNumber } from '../utils';
export var unit = 'rpx';
export function pauseEvent(e) {
  e.stopPropagation();
}

function isMouseEvent(e) {
  return e.pageX;
}

function isTouchEvent(e) {
  return typeof e.changedTouches !== 'undefined';
}

export function getTouchPosition(e) {
  var x = 0;

  if (isMouseEvent(e)) {
    x = e.pageX;
  }

  if (isTouchEvent(e)) {
    x = e.changedTouches[0].pageX;
  }

  return px2rem(x);
}
export function getNodeRect(id) {
  return new Promise(function (resolve) {
    getComponentRect(id, function (e) {
      resolve(e.size);
    }, true);
  });
}
export function getPrecision(step) {
  var stepString = step.toString();
  var precision = 0;

  if (stepString.indexOf('.') >= 0) {
    precision = stepString.length - stepString.indexOf('.') - 1;
  }

  return precision;
}
export function getClosestThumbIndex(position, thumbs) {
  var keys = Object.keys(thumbs);

  if (keys.length === 1) {
    return Promise.resolve(0);
  }

  var index = 0;
  return Promise.all(keys.map(function (key) {
    return getNodeRect(thumbs[key]);
  })).then(function (rects) {
    if (Math.abs(rects[0].left - position) > Math.abs(rects[1].left - position)) {
      index = 1;
    }

    return +keys[index];
  });
}
export function handleMarks(marks, min, max) {
  if (marks instanceof Array) {
    return _toConsumableArray(marks);
  } else if (marks instanceof Object) {
    return Object.keys(marks).map(parseFloat).sort(function (a, b) {
      return a - b;
    });
  } else if (isNumber(marks)) {
    var range = max - min;
    var num = range / marks;
    var current = min;
    var arr = [];

    while (current <= max) {
      arr.push(Number(current.toFixed(2)));
      current += num;
    }

    return arr;
  } else {
    return [];
  }
}
export function isInRange(value, range) {
  if (range.length === 1) {
    range.unshift(0);
  }

  return value >= range[0] && value <= range[1];
}
export function noop() {}