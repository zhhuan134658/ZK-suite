import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import classNames from 'classnames';
import React, { createElement, forwardRef, useMemo } from "react";
import View from '../view';
import { handleMarks, isInRange, unit } from './utils';

var Track = function Track(props, ref) {
  var size = props.size,
      prefix = props.prefix,
      min = props.min,
      max = props.max,
      ratio = props.ratio,
      disabled = props.disabled,
      marks = props.marks,
      rangeWidth = props.rangeWidth,
      marksPosition = props.marksPosition;
  var statePrefix = disabled ? '--disabled' : '';

  var _useMemo = useMemo(function () {
    var markEl = [];
    var labelEl = [];

    var getKey = function getKey(key) {
      if (marks instanceof Object && !Array.isArray(marks)) {
        return marks[key];
      }

      return key;
    };

    handleMarks(marks, min, max).forEach(function (key) {
      var left = (key - min) / (max - min) * rangeWidth;
      var isActive = isInRange((key - min) / (max - min), ratio);
      markEl.push( /*#__PURE__*/React.createElement(View, {
        key: "mark-".concat(key),
        className: classNames("".concat(prefix, "range--mark"), isActive ? "".concat(prefix, "range--mark--active") : '', isActive ? "".concat(prefix, "range--mark").concat(statePrefix) : ''),
        style: __rpx2vw__({
          left: left + unit
        })
      }));
      labelEl.push( /*#__PURE__*/React.createElement(View, {
        key: "label-".concat(key),
        className: classNames(["".concat(prefix, "range--label"), "".concat(prefix, "range--label--").concat(marksPosition), _defineProperty({}, "".concat(prefix, "range--label--active"), isActive)]),
        style: __rpx2vw__({
          left: left + unit
        })
      }, getKey(key)));
    });
    return [markEl, labelEl];
  }, [marks, min, max, ratio, rangeWidth, prefix, statePrefix]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      markItems = _useMemo2[0],
      labelItems = _useMemo2[1];

  var selectedLeft = ratio.length === 2 ? ratio[0] * rangeWidth : 0;
  var width = ratio.length === 2 ? Math.abs(ratio[1] - ratio[0]) * rangeWidth : ratio[0] * rangeWidth;
  return /*#__PURE__*/React.createElement(View, {
    ref: ref,
    className: classNames("".concat(prefix, "range--track"), "".concat(prefix, "range--track--").concat(size), "".concat(prefix, "range--track").concat(statePrefix))
  }, /*#__PURE__*/React.createElement(View, {
    ref: ref,
    className: classNames("".concat(prefix, "range--track--selected"), "".concat(prefix, "range--track--").concat(size), "".concat(prefix, "range--track--selected").concat(statePrefix)),
    style: __rpx2vw__({
      left: selectedLeft + unit,
      width: width + unit
    })
  }), /*#__PURE__*/React.createElement(View, {
    style: __rpx2vw__({
      position: 'static'
    })
  }, markItems), /*#__PURE__*/React.createElement(View, {
    style: __rpx2vw__({
      position: 'static'
    })
  }, labelItems));
};

export default /*#__PURE__*/forwardRef(Track);