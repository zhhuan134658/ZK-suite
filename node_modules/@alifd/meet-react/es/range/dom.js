import { __awaiter } from "tslib";
import { windowWidth, getElementBoundingClientRect } from '../utils';
export function px2rem(px) {
  return px * 750 / windowWidth;
}
export function getComponentRect(id, callback, retry) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var rect;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!callback) {
              _context.next = 5;
              break;
            }

            _context.next = 3;
            return getElementBoundingClientRect(id);

          case 3:
            rect = _context.sent;
            callback({
              result: true,
              size: {
                x: px2rem(rect.x),
                y: px2rem(rect.y),
                width: px2rem(rect.width),
                height: px2rem(rect.height),
                top: px2rem(rect.top),
                bottom: px2rem(rect.bottom),
                left: px2rem(rect.left),
                right: px2rem(rect.right)
              }
            });

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}