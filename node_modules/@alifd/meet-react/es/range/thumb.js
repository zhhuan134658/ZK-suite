import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classNames from 'classnames';
import React, { createElement, forwardRef, Fragment } from "react";
import { Text } from "@alifd/meet-react-component-one";
import View from '../view';
import { unit } from './utils';
import { isNil } from '../utils';

var Thumb = function Thumb(props, ref) {
  var _classNames;

  var prefix = props.prefix,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$offset = props.offset,
      offset = _props$offset === void 0 ? 0 : _props$offset,
      isActive = props.isActive,
      tooltipVisible = props.tooltipVisible,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      value = props.value,
      id = props.id;
  var display;

  if (!isNil(tooltipVisible)) {
    display = tooltipVisible ? 'flex' : 'none';
  } else {
    display = isActive ? 'flex' : 'none';
  }

  var statePrefix = disabled ? '--disabled' : '';
  var thumbCls = classNames("".concat(prefix, "range--thumb"), "".concat(prefix, "range--thumb--").concat(size), (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "range--thumb--active"), isActive), _defineProperty(_classNames, "".concat(prefix, "range").concat(statePrefix, "--thumb"), isActive), _defineProperty(_classNames, "".concat(prefix, "range").concat(statePrefix, "--thumb"), !isActive), _classNames));
  return /*#__PURE__*/React.createElement(View, {
    className: thumbCls,
    style: __rpx2vw__({
      left: offset + unit
    }),
    id: id,
    ref: ref
  }, display === 'flex' && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(View, {
    className: classNames(["".concat(prefix, "range--tooltip"), "".concat(prefix, "range--tooltip-").concat(size, "-left")])
  }, /*#__PURE__*/React.createElement(Text, null, "".concat(value)), /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefix, "range--tooltip--arrow")
  }))));
};

export default /*#__PURE__*/forwardRef(Thumb);