function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, useEffect, useState } from "react";
import Button from '../button';
import Drawer from '../drawer';
import View from '../view';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
export default (function (props) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$visible = props.visible,
      visible = _props$visible === void 0 ? false : _props$visible,
      drawerClassName = props.drawerClassName,
      drawerTitle = props.drawerTitle,
      onCancel = props.onCancel,
      onClose = props.onClose,
      onOk = props.onOk,
      children = props.children,
      others = __rest(props, ["prefix", "visible", "drawerClassName", "drawerTitle", "onCancel", "onClose", "onOk", "children"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      drawerVisible = _useState2[0],
      setDrawerVisible = _useState2[1];

  var clsPrefix = "".concat(prefix, "selectdrawer");
  useEffect(function () {
    if (drawerVisible !== visible) {
      setDrawerVisible(visible);
    }
  }, [visible]);
  var locale = useLocale('SelectDrawer', others, defaultLang.SelectDrawer);
  return /*#__PURE__*/React.createElement(Drawer, _extends({}, others, {
    visible: drawerVisible,
    placement: "bottom",
    closeMode: ['mask'],
    onClose: onClose,
    className: classNames("".concat(clsPrefix, "-drawer"), drawerClassName)
  }), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-toolbar")
  }, /*#__PURE__*/React.createElement(Button, {
    model: "text",
    onClick: onCancel
  }, locale.cancel), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-toolbar-title")
  }, drawerTitle), /*#__PURE__*/React.createElement(Button, {
    model: "text",
    type: "primary",
    onClick: onOk
  }, locale.ok)), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-drawer-content")
  }, children));
});