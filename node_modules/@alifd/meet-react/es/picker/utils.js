function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export function getDataArray() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments.length > 1 ? arguments[1] : undefined;
  var cascade = arguments.length > 2 ? arguments[2] : undefined;

  if (!cascade) {
    return data;
  }

  if (Array.isArray(data) && data.length === 0) {
    return data;
  }

  var array = _toConsumableArray(data);

  var ret = [data];

  var values = _toConsumableArray(value);

  if (values.length === 0 && data.length > 0) {
    values.push(data[0].value);
  }

  var i = 0;

  while (array.length > 0) {
    var _ref = array.find(function (it) {
      return it.value === values[i];
    }) || array[0],
        _ref$children = _ref.children,
        children = _ref$children === void 0 ? [] : _ref$children;

    if (children.length > 0) {
      ret.push(children);
    }

    array = children;
    i++;
  }

  return ret;
}
export function getDataArrayByIndex(data) {
  var indexList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var cascade = arguments.length > 2 ? arguments[2] : undefined;

  if (!cascade) {
    return data;
  }

  var i = 0;

  var array = _toConsumableArray(data);

  var ret = [data];

  while (array && array.length > 0) {
    var index = indexList[i] || 0;

    if (index !== 0 && index >= array.length) {
      index = array.length - 1;
    }

    var children = array[index].children;

    if (children) {
      ret.push(children);
    }

    array = children;
    i++;
  }

  return ret;
}
export function getIndex(dataArray, value) {
  return dataArray.reduce(function (rs, arr, index) {
    arr.forEach(function (obj, j) {
      if (obj.value === value[index]) {
        rs = rs.concat(j);
      }
    });
    return rs;
  }, []);
}
export function formatNewIndexByLast() {
  var newIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var lastIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var isSame = true;

  if (!lastIndex.length) {
    return newIndex;
  }

  return newIndex.map(function (val, index) {
    if (!isSame) {
      return 0;
    } else if (lastIndex[index] !== undefined && val === lastIndex[index]) {
      return val;
    } else {
      isSame = false;
      return val;
    }
  });
}