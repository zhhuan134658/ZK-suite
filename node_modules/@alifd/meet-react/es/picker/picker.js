import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef } from "react";
import { Text } from "@alifd/meet-react-component-one";
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { useValue } from '../utils/hooks';
import View from '../view';
import PickerColumn from './column';
import { getDataArray } from './utils';

var formatValues = function formatValues(dataArray) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return dataArray.map(function (columnData, index) {
    if (columnData.length === 0) {
      console.error('[Picker] column\'s length cannot be 0, please check "data"', dataArray);
      return null;
    }

    return columnData.find(function (it) {
      return it.value === value[index];
    }) ? value[index] : columnData[0].value;
  });
};

var Picker = function Picker(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      cascade = props.cascade,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      style = props.style,
      className = props.className,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      others = __rest(props, ["prefix", "data", "cascade", "onChange", "style", "className", "value", "defaultValue"]);

  var locale = useLocale('Picker', others, defaultLang.Picker);

  var _useValue = useValue(props, [], {
    fitValue: function fitValue(x) {
      if (!Array.isArray(x)) {
        return [x];
      }

      return x;
    },
    compare: function compare(a, b) {
      if (b.length !== a.length) {
        return false;
      }

      return a.join(',') === b.join(',');
    }
  }),
      _useValue2 = _slicedToArray(_useValue, 3),
      value = _useValue2[0],
      setValue = _useValue2[1],
      isControlled = _useValue2[2];

  var handleChange = function handleChange(v, index) {
    var newValue = _toConsumableArray(value);

    newValue[index] = v;
    var formattedNewValue = formatValues(getDataArray(data, newValue, cascade), newValue);
    onChange(formattedNewValue, index);

    if (!isControlled) {
      setValue(formattedNewValue);
    }
  };

  var dataArray = getDataArray(data, value, cascade);
  var values = formatValues(dataArray, value);
  return /*#__PURE__*/React.createElement(View, _extends({}, others, {
    className: classNames("".concat(prefix, "picker"), "".concat(prefix, "picker--web"), className),
    style: __rpx2vw__(style),
    ref: ref
  }), dataArray.map(function (d, index) {
    var columnValue = values[index] === undefined ? d[0].value : values[index];
    return /*#__PURE__*/React.createElement(PickerColumn, {
      prefix: prefix,
      onChange: function onChange(v) {
        return handleChange(v, index);
      },
      key: index,
      data: d,
      value: columnValue
    });
  }), dataArray && dataArray.length === 0 ? /*#__PURE__*/React.createElement(Text, {
    className: "".concat(prefix, "picker-text--empty")
  }, locale.empty) : null);
};

export default /*#__PURE__*/forwardRef(Picker);