function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __rest } from "tslib";
import classNames from 'classnames';
import React, { createElement, forwardRef, useEffect, useState } from "react";
import { toStyleText } from '../utils/style';
import { getDataArray, getDataArrayByIndex, getIndex } from './utils';

var Picker = function Picker(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      data = props.data,
      className = props.className,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      cascade = props.cascade,
      style = props.style,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$maskStyle = props.maskStyle,
      maskStyle = _props$maskStyle === void 0 ? {} : _props$maskStyle,
      _props$indicatorStyle = props.indicatorStyle,
      indicatorStyle = _props$indicatorStyle === void 0 ? {} : _props$indicatorStyle,
      others = __rest(props, ["prefix", "data", "className", "value", "defaultValue", "cascade", "style", "onChange", "maskStyle", "indicatorStyle"]);

  var clsPrefix = "".concat(prefix, "picker");

  var _useState = useState(valueProp || defaultValue || []),
      _useState2 = _slicedToArray(_useState, 2),
      innerValue = _useState2[0],
      setInnerValue = _useState2[1];

  var value = 'value' in props ? valueProp : innerValue;
  var dataArray = getDataArray(data, value, cascade);
  var curPickerIndex = getIndex(dataArray, value);

  var handleChange = function handleChange(e) {
    var newIndex = e.detail.value;

    var _dataArray = getDataArrayByIndex(data, newIndex, cascade);

    var ret = [];

    _dataArray.forEach(function (col, index) {
      var idx = newIndex[index] || 0;

      if (idx !== 0 && idx >= col.length) {
        idx = col.length - 1;
      }

      ret.push(col[idx].value);
    });

    onChange(ret, e);

    if (!('value' in props)) {
      setInnerValue(ret);
    }
  };

  useEffect(function () {
    if (!('value' in props)) {
      return;
    }

    if (!valueProp) {
      if (innerValue.length !== 0 && defaultValue.length === 0) {
        setInnerValue([]);
        return;
      }

      if (innerValue.join(',') !== defaultValue.join(',')) {
        setInnerValue(defaultValue);
      }

      return;
    }

    if (innerValue.join(',') !== valueProp.join(',')) {
      setInnerValue(valueProp);
    }
  }, [innerValue, valueProp]);
  return /*#__PURE__*/React.createElement("picker-view", _extends({
    className: classNames(clsPrefix, className),
    value: curPickerIndex,
    onChange: handleChange,
    "mask-style": toStyleText(maskStyle),
    "indicator-style": toStyleText(Object.assign({
      height: 'var(--picker-height)'
    }, indicatorStyle)),
    ref: ref
  }, others), dataArray.map(function (colArr, colIndex) {
    return /*#__PURE__*/React.createElement("picker-view-column", {
      key: colIndex
    }, colArr.map(function (item, itemIndex) {
      var isSelected = itemIndex === curPickerIndex[colIndex] || !curPickerIndex[colIndex] && itemIndex === 0;
      return /*#__PURE__*/React.createElement("view", {
        key: itemIndex,
        className: classNames("".concat(clsPrefix, "-col-item"), _defineProperty({}, "".concat(clsPrefix, "-col-item--selected"), isSelected))
      }, item.label);
    }));
  }));
};

export default /*#__PURE__*/forwardRef(Picker);