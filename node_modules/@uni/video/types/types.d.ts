import { Uni } from './interface';
declare enum SOURCE_TYPE {
    album = 0,
    camera = 1
}
declare enum CAMERA_TYPE {
    back = 0,
    front = 1
}
export interface ChooseVideoOptions extends Uni.COptions {
    sourceType?: Array<keyof typeof SOURCE_TYPE>;
    compressed?: boolean;
    maxDuration?: number;
    camera?: keyof typeof CAMERA_TYPE;
    success?: (res: ChooseVideoRes) => any;
    fail?: (e: Error) => any;
    complete?: (res: ChooseVideoRes | Error) => any;
}
export interface ChooseVideoRes {
    tempFilePath: string;
    duration: number;
    size: number;
    height: number;
    width: number;
}
declare enum MEDIA_TYPE {
    image = 0,
    video = 1
}
declare enum SIZE_TYPE {
    original = 0,
    compressed = 1
}
export interface ChooseMediaOptions extends Uni.COptions {
    count?: number;
    sourceType?: Array<keyof typeof SOURCE_TYPE>;
    mediaType?: Array<keyof typeof MEDIA_TYPE>;
    maxDuration?: number;
    sizeType?: Array<keyof typeof SIZE_TYPE>;
    camera?: keyof typeof CAMERA_TYPE;
    accept?: string;
    success?: (res: ChooseMediaRes) => any;
    fail?: (e: Error) => any;
    complete?: (res: ChooseMediaRes | Error) => any;
}
interface TempFileType {
    tempFilePath: string;
    size: number;
    duration?: number;
    height?: number;
    width?: number;
    thumbTempFilePath?: string;
}
export interface ChooseMediaRes {
    tempFiles: TempFileType[];
    type?: keyof typeof MEDIA_TYPE;
    files?: any;
}
export declare type CreateVideoContextFn = (id: string, context?: any) => any;
export {};
