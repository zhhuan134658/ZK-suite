"use strict";

exports.__esModule = true;
exports.normalize = void 0;

var _promisify = require("./_utils/promisify");

var _styleOptions = require("./_utils/styleOptions");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var normalize = {
  chooseVideo: function chooseVideo(api, containerName) {
    var formatResponse = function formatResponse(res) {
      return _extends({}, res, {
        tempFilePath: res.tempFilePath || res.filePath
      });
    };

    return function (args) {
      args = (0, _styleOptions.styleIn)(args, containerName);
      return (0, _promisify.promisify)(api)(_extends({}, args, {
        success: function success(res) {
          args.success && args.success(formatResponse(res));
        },
        complete: function complete(res) {
          args.complete && args.complete(res);
        }
      })).then(formatResponse);
    };
  },
  chooseMedia: function chooseMedia(api, containerName) {
    var formatResponse = function formatResponse(res) {
      return _extends({}, res, {
        tempFiles: (res.tempFiles || res.files).map(function (item) {
          return _extends({}, item, {
            tempFilePath: item.tempFilePath || item.path
          });
        })
      });
    };

    return function (args) {
      if (args === void 0) {
        args = {};
      }

      args = (0, _styleOptions.styleIn)(_extends({
        count: 9,
        sizeType: ['original', 'compressed'],
        sourceType: ['camera', 'album'],
        mediaType: ['image', 'video'],
        maxDuration: 60
      }, args), containerName);
      return (0, _promisify.promisify)(api)(_extends({}, args, {
        success: function success(res) {
          args.success && args.success(formatResponse(res));
        },
        fail: function fail(res) {
          args.fail && args.fail(res);
        },
        complete: function complete(res) {
          args.complete && args.complete(res);
        }
      })).then(formatResponse);
    };
  }
};
exports.normalize = normalize;