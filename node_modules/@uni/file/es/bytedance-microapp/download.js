var _excluded = ["url", "header", "success", "fail", "complete"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { normalize } from "../common";
import { CONTAINER_NAME } from "../_utils/constant";
var downloadFile = normalize.download(function (options) {
  var url = options.url,
      header = options.header,
      _success = options.success,
      _fail = options.fail,
      _complete = options.complete,
      rest = _objectWithoutPropertiesLoose(options, _excluded);

  return tt.downloadFile(_extends({
    url: url,
    header: header
  }, rest, {
    success: function success(res) {
      _success && _success({
        tempFilePath: res.tempFilePath
      });
    },
    fail: function fail(res) {
      _fail && _fail(res);
    },
    complete: function complete(res) {
      _complete && _complete(res.tempFilePath ? {
        tempFilePath: res.tempFilePath
      } : res);
    }
  }));
}, CONTAINER_NAME.BYTE);
export default downloadFile;