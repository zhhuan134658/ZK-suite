function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { promisify } from "./_utils/promisify";
import { styleIn } from "./_utils/styleOptions";
export var normalize = {
  upload: function upload(api, containerName) {
    return function (options) {
      var DEFAULT_REQUEST_OPTIONS = {
        hideLoading: false
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, styleIn(options, containerName));

      return api(afterOptions);
    };
  },
  download: function download(api, containerName) {
    var formatRes = function formatRes(res) {
      return _extends({}, res, {
        tempFilePath: res.tempFilePath || res.apFilePath
      });
    };

    return function (options) {
      var _options = styleIn(options, containerName);

      var DEFAULT_REQUEST_OPTIONS = {
        url: ''
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, _options, {
        success: function success(res) {
          _options.success && _options.success(formatRes(res));
        },
        complete: function complete(res) {
          _options.complete && _options.complete(res.tempFilePath ? formatRes(res) : res);
        }
      });

      return api(afterOptions);
    };
  },
  getInfo: function getInfo(api, containerName) {
    var formatRes = function formatRes(res) {
      return _extends({}, res, {
        size: res.size
      });
    };

    return function (options) {
      var _options = styleIn(options, containerName);

      var DEFAULT_REQUEST_OPTIONS = {
        filePath: '',
        digestAlgorithm: 'md5'
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, _options, {
        success: function success(res) {
          _options.success && _options.success(formatRes(res));
        },
        complete: function complete(res) {
          _options.complete && _options.complete(res.size ? formatRes(res) : res);
        }
      });

      return promisify(api)(afterOptions).then(function (res) {
        return formatRes(res);
      });
    };
  },
  getSavedInfo: function getSavedInfo(api, containerName) {
    return function (options) {
      var _options = styleIn(options, containerName);

      var DEFAULT_REQUEST_OPTIONS = {
        filePath: ''
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, _options, {
        success: function success(res) {
          _options.success && _options.success(res);
        },
        complete: function complete(res) {
          _options.complete && _options.complete(res);
        }
      });

      return promisify(api)(afterOptions);
    };
  },
  getSavedList: function getSavedList(api, containerName) {
    var formatRes = function formatRes(res) {
      return _extends({}, res, {
        fileList: res.fileList.map(function (i) {
          return {
            size: i.size,
            createTime: i.createTime,
            filePath: i.filePath || i.apFilePath
          };
        })
      });
    };

    return function (options) {
      var _options = styleIn(options, containerName);

      var afterOptions = _extends({}, _options, {
        success: function success(res) {
          _options.success && _options.success(formatRes(res));
        },
        complete: function complete(res) {
          _options.complete && _options.complete(res.fileList ? formatRes(res) : res);
        }
      });

      return promisify(api)(afterOptions).then(formatRes);
    };
  },
  save: function save(api, containerName) {
    var formatRes = function formatRes(res) {
      return _extends({}, res, {
        savedFilePath: res.savedFilePath || res.apFilePath
      });
    };

    return function (options) {
      var _options = styleIn(options, containerName);

      var DEFAULT_REQUEST_OPTIONS = {
        tempFilePath: ''
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, _options, {
        success: function success(res) {
          _options.success && _options.success(formatRes(res));
        },
        complete: function complete(res) {
          _options.complete && _options.complete(res.size ? formatRes(res) : res);
        }
      });

      return promisify(api)(afterOptions).then(formatRes);
    };
  },
  removeSaved: function removeSaved(api, containerName) {
    return function (options) {
      var _options = styleIn(options, containerName);

      var DEFAULT_REQUEST_OPTIONS = {
        filePath: ''
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, _options);

      return promisify(api)(afterOptions);
    };
  },
  openDocument: function openDocument(api, containerName) {
    return function (options) {
      var _options = styleIn(options, containerName);

      var DEFAULT_REQUEST_OPTIONS = {
        filePath: '',
        fileType: 'pdf'
      };

      var afterOptions = _extends({}, DEFAULT_REQUEST_OPTIONS, _options);

      return promisify(api)(afterOptions);
    };
  }
};