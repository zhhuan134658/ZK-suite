function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { sleep } from "./util";
import { DOMUtil } from "./web";
/**
 * 模拟 localStorage
 * @param globals
 */

export function mockLocalStorage(globals) {
  var localStorage = {
    _data: new Map(),
    setItem: function setItem(key, value) {
      localStorage._data.set(key, String(value));
    },
    getItem: function getItem(key) {
      var _localStorage$_data$g;

      return (_localStorage$_data$g = localStorage._data.get(key)) != null ? _localStorage$_data$g : null;
    },
    removeItem: function removeItem(key) {
      localStorage._data.delete(key);
    },
    clear: function clear() {
      localStorage._data.clear();
    }
  };
  globals.localStorage = localStorage;
  Object.defineProperty(window, 'localStorage', {
    get: function get() {
      return localStorage;
    }
  });
}
/**
 * 模拟 xhr 对象
 * @param globals
 */

export function mockXHR(globals) {
  var response = {
    status: 200,
    data: '',
    headers: ''
  };
  var mockOpen = jest.fn();
  var mockSend = jest.fn( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
      var _response$status, _this$onreadystatecha, _this$onload;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return sleep(10);

            case 2:
              this.readyState = 4;
              this.status = (_response$status = response.status) != null ? _response$status : 200;
              this.response = response.data || '';
              (_this$onreadystatecha = this.onreadystatechange) == null ? void 0 : _this$onreadystatecha.call(this);
              _context.next = 8;
              return sleep(10);

            case 8:
              (_this$onload = this.onload) == null ? void 0 : _this$onload.call(this);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  var mockSetRequestHeader = jest.fn();
  globals.FormData = window.FormData;

  globals.XMLHttpRequest = /*#__PURE__*/function () {
    function _class2() {
      this.open = mockOpen;
      this.send = mockSend;
      this.setRequestHeader = mockSetRequestHeader;

      this.getAllResponseHeaders = function () {
        return response.headers || '';
      };
    }

    return _class2;
  }();

  function setResponse(status, data, headers) {
    if (status === void 0) {
      status = 200;
    }

    response.status = status;
    response.data = data;

    if (headers) {
      response.headers = Object.keys(headers).map(function (key) {
        var value = headers[key];
        return key + ": " + value;
      }).join('\r\n');
    } else {
      response.headers = '';
    }
  }

  return {
    mockOpen: mockOpen,
    mockSend: mockSend,
    mockSetRequestHeader: mockSetRequestHeader,
    setResponse: setResponse
  };
}
/**
 * 模拟用户选择媒体文件
 */

export function mockUserChooseMedia() {
  var target = new DOMUtil('input[type="file"]');
  target.trigger('change', ''); // eslint-disable-next-line @typescript-eslint/dot-notation

  target['files'] = [Buffer.alloc(100)];
  return target;
}
/**
 * 模拟 Math.random 方法，返回固定的值
 * @param callback
 */

export function mockRandomWrapper(_x2) {
  return _mockRandomWrapper.apply(this, arguments);
}

function _mockRandomWrapper() {
  _mockRandomWrapper = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(callback) {
    var originalRandom, _r;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            originalRandom = Math.random;
            _r = 0;

            Math.random = function () {
              return ++_r / 1e4;
            }; // mock random


            _context2.next = 5;
            return callback();

          case 5:
            // eslint-disable-next-line require-atomic-updates
            Math.random = originalRandom;

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _mockRandomWrapper.apply(this, arguments);
}