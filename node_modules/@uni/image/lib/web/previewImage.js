"use strict";

exports.__esModule = true;
exports.default = void 0;

var _common = require("../common");

var _constant = require("../_utils/constant");

var clsPrefix = '__universal_preview_image';
var styles = ("." + clsPrefix + " {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 9999;\n  text-align: center;\n  background: #000;\n  box-sizing: border-box;\n  outline: none;\n  overflow: hidden;\n  animation-duration: .3s;\n  animation-fill-mode: both;\n}\n." + clsPrefix + "_pageindex {\n  position: absolute;\n  top: 12px;\n  left: 0;\n  right: 0;\n  text-align: center;\n  color: #fff;\n  font-size: 16px;\n  z-index: 2;\n}\n." + clsPrefix + "_swiper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  transition-property: transform;\n  box-sizing: content-box;\n}\n." + clsPrefix + "_item {\n  max-height: 70%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n  width: 100%;\n  position: relative;\n  transition-property: transform;\n  overflow: hidden;\n}\n." + clsPrefix + "_img {\n  width: 100%;\n}\n@keyframes " + clsPrefix + "_fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes " + clsPrefix + "_fadeOut {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}").replace(/\n/g, '');
var styleElement = null;

var previewImage = _common.normalize.previewImage(function (args) {
  var _ref = args || {},
      _ref$urls = _ref.urls,
      urls = _ref$urls === void 0 ? [] : _ref$urls;

  var _ref2 = args || {},
      _ref2$current = _ref2.current,
      current = _ref2$current === void 0 ? 0 : _ref2$current;

  if (Object.prototype.toString.call(urls) !== '[object Array]') {
    throw new Error('the arguments must contain urls that type is a Array');
  }

  if (urls.length <= 0) {
    throw new Error('the urls`s length is at least 1');
  }

  if (!Number.isSafeInteger(current)) {
    throw new Error('the current must be a safe integer');
  }

  current = Math.min(Math.max(current, 0), urls.length - 1);

  if (!styleElement) {
    // create a style tag for keyframes
    styleElement = document.createElement('style');
    styleElement.innerHTML = styles;
    document.body.appendChild(styleElement);
  }

  var containerEle = document.createElement('div');
  containerEle.className = clsPrefix;
  containerEle.style.animationName = clsPrefix + "_fadeIn";
  containerEle.addEventListener('click', function () {
    containerEle && (containerEle.style.animationName = clsPrefix + "_fadeOut");
    setTimeout(function () {
      containerEle && document.body.removeChild(containerEle);
      containerEle = null;
    }, 300);
  });
  var pageIndexEle = document.createElement('div');
  pageIndexEle.className = clsPrefix + "_pageindex";
  pageIndexEle.innerText = current + 1 + "/" + urls.length;
  containerEle.appendChild(pageIndexEle);
  var swiperEle = document.createElement('div');
  swiperEle.className = clsPrefix + "_swiper";
  var damp = 1;
  var clientWidth = document.documentElement.clientWidth;
  var startX = 0;
  swiperEle.addEventListener('touchstart', function (e) {
    if (e.touches.length > 1) {
      e.stopPropagation();
      e.preventDefault();
    }

    startX = e.targetTouches[0].pageX;
  });
  swiperEle.addEventListener('touchmove', function (e) {
    if (e.touches.length > 1) {
      e.stopPropagation();
      e.preventDefault();
    }

    var moveX = e.targetTouches[0].pageX - startX;
    swiperEle.style.transform = "translateX(" + (-clientWidth * current + moveX * damp) + "px)";
  });
  swiperEle.addEventListener('touchend', function (e) {
    var endX = e.changedTouches[0].pageX - startX;

    if (Math.abs(endX * damp) > clientWidth / 5) {
      current = endX < 0 ? Math.min(current + 1, urls.length - 1) : Math.max(current - 1, 0);
    }

    pageIndexEle.innerText = current + 1 + "/" + urls.length;
    var transitionDuration = 300;
    swiperEle.style.transitionDuration = transitionDuration + "ms";
    swiperEle.style.transform = "translateX(" + -clientWidth * current + "px)";
    setTimeout(function () {
      swiperEle.style.transitionDuration = '0ms';
    }, transitionDuration);
  });
  swiperEle.style.transform = "translateX(" + -clientWidth * current + "px)";
  containerEle.appendChild(swiperEle);
  urls.forEach(function (url) {
    var swiperItemEle = document.createElement('div');
    swiperItemEle.className = clsPrefix + "_item";
    swiperItemEle.addEventListener('click', function (e) {
      e.stopPropagation();
      containerEle && (containerEle.style.animationName = clsPrefix + "_fadeOut");
      setTimeout(function () {
        containerEle && document.body.removeChild(containerEle);
        containerEle = null;
      }, 300);
    });
    swiperEle.appendChild(swiperItemEle);
    var imageEle = document.createElement('img');
    imageEle.className = clsPrefix + "_img";
    imageEle.src = url;
    swiperItemEle.appendChild(imageEle);
    swiperItemEle.addEventListener('touchstart', function (e) {
      if (e.touches.length > 1) {
        e.stopPropagation();
        e.preventDefault();
        var point1 = e.touches[0];
        var point2 = e.touches[1];
        var xLen = Math.abs(point2.pageX - point1.pageX);
        var yLen = Math.abs(point2.pageY - point1.pageY);
        swiperItemEle.touchDistance = Math.sqrt(xLen * xLen + yLen * yLen);
      } else {
        swiperItemEle.touched = {
          x: e.touches[0].pageX,
          y: e.touches[0].pageY
        };
      }
    });
    swiperItemEle.addEventListener('touchmove', function (e) {
      if (e.touches.length > 1) {
        e.stopPropagation();
        e.preventDefault();
        var xLen = Math.abs(e.touches[0].pageX - e.touches[1].pageX);
        var yLen = Math.abs(e.touches[1].pageY - e.touches[1].pageY);
        var touchDistance = Math.sqrt(xLen * xLen + yLen * yLen);

        if (swiperItemEle.touchDistance) {
          var pinchScale = (swiperItemEle.previousPinchScale || 1) + (touchDistance - swiperItemEle.touchDistance) / swiperItemEle.touchDistance;
          var imageScale = Math.max(1, pinchScale);
          imageEle.style.transform = "scale(" + imageScale + ")";
          swiperItemEle.previousPinchScale = imageScale;
        }

        swiperItemEle.touchDistance = touchDistance;
      } else if (swiperItemEle.previousPinchScale > 1) {
        e.stopPropagation();
        var x = (swiperItemEle.preX || 0) + (e.touches[0].pageX - swiperItemEle.touched.x);
        var y = (swiperItemEle.preY || 0) + (e.touches[0].pageY - swiperItemEle.touched.y);
        imageEle.style.transform = "scale(" + swiperItemEle.previousPinchScale + ") translate(" + x + "px, " + y + "px)";
        swiperItemEle.preX = x;
        swiperItemEle.preY = y;
        swiperItemEle.touched = {
          x: e.touches[0].pageX,
          y: e.touches[0].pageY
        };
      }
    });
  });
  document.body.appendChild(containerEle);
}, _constant.CONTAINER_NAME.WEB);

var _default = previewImage;
exports.default = _default;