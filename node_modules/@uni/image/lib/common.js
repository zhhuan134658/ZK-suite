"use strict";

exports.__esModule = true;
exports.normalize = void 0;

var _promisify = require("./_utils/promisify");

var _styleOptions = require("./_utils/styleOptions");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var normalize = {
  chooseImage: function chooseImage(api, containerName) {
    var formatResponse = function formatResponse(res) {
      return _extends({}, res, {
        tempFiles: res.tempFiles || res.files,
        tempFilePaths: res.tempFilePaths
      });
    };

    return function (args) {
      args = (0, _styleOptions.styleIn)(args, containerName);
      return (0, _promisify.promisify)(api)(_extends({}, args, {
        count: args.count || 1,
        success: function success(res) {
          args.success && args.success(formatResponse(res));
        },
        complete: function complete(res) {
          args.complete && args.complete(res);
        }
      })).then(formatResponse);
    };
  },
  compressImage: function compressImage(api, containerName) {
    var formatResponse = function formatResponse(res) {
      return {
        tempFilePath: res.tempFilePath || (res.filePaths || [])[0] || (res.apFilePaths || [])[0] || ''
      };
    };

    return function (args) {
      args = (0, _styleOptions.styleIn)(args, containerName);
      return (0, _promisify.promisify)(api)(_extends({}, args, {
        success: function success(res) {
          args.success && args.success(formatResponse(res));
        },
        complete: function complete(res) {
          args.complete && args.complete(res);
        }
      })).then(formatResponse);
    };
  },
  getImageInfo: function getImageInfo(api, containerName) {
    return function (args) {
      return (0, _promisify.promisify)(api)((0, _styleOptions.styleIn)(args, containerName));
    };
  },
  previewImage: function previewImage(api, containerName) {
    return function (args) {
      return (0, _promisify.promisify)(api)((0, _styleOptions.styleIn)(args, containerName));
    };
  },
  saveImage: function saveImage(api, containerName) {
    return function (args) {
      return (0, _promisify.promisify)(api)((0, _styleOptions.styleIn)(args, containerName));
    };
  }
};
exports.normalize = normalize;