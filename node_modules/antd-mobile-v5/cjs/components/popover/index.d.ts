/// <reference types="react" />
import './popover.less';
import './popover-menu.less';
export type { PopoverProps, PopoverRef } from './popover';
export type { PopoverMenuProps, Action } from './popover-menu';
declare const _default: import("react").ForwardRefExoticComponent<{
    getContainer?: import("../../utils/render-to-container").GetContainer | undefined;
    destroyOnHide?: boolean | undefined;
    children: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
    mode?: "dark" | "light" | undefined;
    trigger?: "click" | undefined;
    placement?: "left" | "right" | "bottom" | "top" | "topLeft" | "topRight" | "bottomLeft" | "bottomRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | undefined;
    stopPropagation?: "click"[] | undefined;
    content: import("react").ReactNode;
} & Pick<import("rc-tooltip/lib/Tooltip").TooltipProps, "visible" | "align" | "defaultVisible" | "onVisibleChange"> & import("../../utils/native-props").NativeProps<"--z-index"> & import("react").RefAttributes<import("./popover").PopoverRef>> & {
    Menu: import("react").ForwardRefExoticComponent<Omit<import("./popover").PopoverProps, "content"> & {
        actions: import("./popover-menu").Action[];
        onAction?: ((item: import("./popover-menu").Action) => void) | undefined;
    } & import("react").RefAttributes<import("./popover").PopoverRef>>;
};
export default _default;
