/**
 * 获取指定 npm 包版本的 tarball
 */
declare function getNpmTarball(npm: string, version?: string, registry?: string): Promise<string>;
/**
 * 获取 tar 并将其解压到指定的文件夹
 */
declare function getAndExtractTarball(destDir: string, tarball: string, progressFunc?: (state: any) => void, formatFilename?: (filename: string) => string): Promise<string[]>;
/**
 * 从 registry 获取 npm 的信息
 */
declare function getNpmInfo(npm: string, registry?: string): Promise<any>;
/**
 * 获取某个 npm 的所有版本号
 */
declare function getVersions(npm: string, registry?: string): Promise<string[]>;
/**
 * 根据指定范围（比如：1.x，< 5.x），获取符合的所有版本号
 */
declare function getSatisfiesVersions(npm: string, range: string, registry?: string): Promise<string[]>;
/**
 * 根据指定 version 和包名获取符合 semver 规范的最新版本号
 *
 * @param {String} npm 包名
 * @param {String} baseVersion 指定的基准 version
 */
declare function getNpmLatestSemverVersion(npm: string, baseVersion: string, registry?: string): Promise<string>;
/**
 * 获取某个 npm 的最新版本号
 *
 * @param {String} npm
 */
declare function getLatestVersion(npm: any, registry?: string): Promise<string>;
declare function isAliNpm(npmName?: string): boolean;
declare function getNpmRegistry(npmName?: string): string;
declare function getUnpkgHost(npmName?: string): string;
declare function getNpmClient(npmName?: string): string;
declare function checkAliInternal(): Promise<boolean>;
declare const packageJSONFilename = "package.json";
declare function readPackageJSON(projectPath: string): Promise<any>;
/**
 * 获取已安装在本地的模块版本号
 *
 * @param projectPath
 * @param packageName
 */
declare function getPackageLocalVersion(projectPath: string, packageName: string): string;
export { getLatestVersion, getNpmLatestSemverVersion, getNpmRegistry, getUnpkgHost, getNpmClient, getVersions, getSatisfiesVersions, isAliNpm, getNpmInfo, checkAliInternal, getNpmTarball, getAndExtractTarball, packageJSONFilename, readPackageJSON, getPackageLocalVersion, };
