"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var chalk = require("chalk");
var entryHelper_1 = require("./entryHelper");
var getConfig = function (_a, _b) {
    var context = _a.context, onGetWebpackConfig = _a.onGetWebpackConfig;
    var modules = _b.modules, outputDir = _b.outputDir, library = _b.library, filenameStrategy = _b.filenameStrategy;
    var rootDir = context.rootDir, userConfig = context.userConfig, pkg = context.pkg;
    var userLibrary = userConfig.library;
    var name = (pkg !== null && pkg !== void 0 ? pkg : {}).name;
    onGetWebpackConfig('icestark-module', function (config) {
        var entries = (0, entryHelper_1.getModules)(modules);
        if (Object.keys(entries).length > 1 && filenameStrategy === 'index.module') {
            throw Error(chalk.red('With several entries, filenameStrategy could not be set to the value \'index.module\', so just remove it.'));
        }
        config.entryPoints.clear();
        Object.keys(entries).forEach(function (key) {
            config
                .entry(key)
                .add(path.join(rootDir, entries[key]));
        });
        // disable splitchunks
        config.optimization.splitChunks({ cacheGroups: {} });
        // set umd
        var output = path.resolve(rootDir, outputDir !== null && outputDir !== void 0 ? outputDir : 'dist');
        config.output
            .path(output)
            // set output to outputDir/[name]
            .filename(filenameStrategy ? "".concat(filenameStrategy, ".js") : './[name]/index.js')
            .library((library || userLibrary || name || 'module'))
            .libraryTarget('umd');
        config.plugin('MiniCssExtractPlugin').tap(function (_a) {
            var args = _a[0];
            return [__assign(__assign({}, args), { filename: filenameStrategy ? "".concat(filenameStrategy, ".css") : './[name]/index.css' })];
        });
        // hack with multi publicpath
        config.devServer.contentBase(output);
        config.devServer.writeToDisk(true);
    });
};
exports.default = getConfig;
//# sourceMappingURL=setUMDConfig.js.map