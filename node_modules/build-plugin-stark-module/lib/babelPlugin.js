"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var t = require("@babel/types");
var mountStatement = "\n  export function mount(ModuleComponent, targetNode, props) {\n    ReactDOM.render(React.createElement(ModuleComponent, Object.assign({}, props)), targetNode);\n  }\n  ";
var unmountStatement = "\n  export function unmount(targetNode) {\n    ReactDOM.unmountComponentAtNode(targetNode);\n  }\n";
exports.default = (function (api, _a) {
    var entries = _a.entries;
    var checkEntryPoint = function (filename) {
        return entries.some(function (entry) { return filename.includes(entry); });
    };
    return {
        visitor: {
            Program: function (nodePath, state) {
                if (checkEntryPoint(state.filename)) {
                    var node = nodePath.node;
                    var body = node.body;
                    var reactdomStatement_1 = false;
                    var mountExportStatement_1 = false;
                    var unmountExportStatement_1 = false;
                    body.forEach(function (item) {
                        if (t.isImportDeclaration(item)) {
                            if (t.isStringLiteral(item.source, { value: 'react-dom' })) {
                                // 代码 import 了 'react-dom'
                                reactdomStatement_1 = true;
                                // 判断 ReactDOM 是否通过 import ReactDOM from 'react-dom' 的方式引入, 可能的方式有
                                // import { render } from 'react-dom';
                                // import ReactDOM, { render } from 'react-dom';
                                var reactDomDefaultExport = item.specifiers.some(function (value) {
                                    // 有默认导入 default ReactDOM
                                    return t.isImportDefaultSpecifier(value) && t.isIdentifier(value.local, { name: 'ReactDOM' });
                                });
                                // 如果没有默认导入 ReactDOM，则添加一个 default 导入
                                if (!reactDomDefaultExport) {
                                    item.specifiers.push(t.importDefaultSpecifier(t.identifier('ReactDOM')));
                                }
                            }
                        }
                        // 遍历非 defalut 导出函数，判断是否有 unmount 和 mount 导出
                        if (t.isExportNamedDeclaration(item)) {
                            // 如果是 export function mount() {} 这种形式
                            var isFuntionDec = function (name) { return t.isFunctionDeclaration(item.declaration) && t.isIdentifier(item.declaration.id, { name: name }); };
                            // 如果是 export const mount = () => {}  这种形式
                            var isVariableDec = function (name) { return t.isVariableDeclaration(item.declaration) && t.isIdentifier(item.declaration.declarations[0], { name: name }); };
                            if (isFuntionDec('mount') || isVariableDec('mount')) {
                                mountExportStatement_1 = true;
                            }
                            if (isFuntionDec('unmount') || isVariableDec('unmount')) {
                                unmountExportStatement_1 = true;
                            }
                        }
                    });
                    // append react-dom
                    if (!reactdomStatement_1) {
                        body.push(t.importDeclaration([
                            t.importDefaultSpecifier(t.identifier('ReactDOM')),
                        ], t.stringLiteral('react-dom')));
                    }
                    // append `mount` and `unmount`
                    if (!mountExportStatement_1 || !unmountExportStatement_1) {
                        if (!mountExportStatement_1 && !unmountExportStatement_1) {
                            nodePath.pushContainer('body', api.template("".concat(mountStatement, " \n ").concat(unmountStatement))());
                        }
                        else if (!mountExportStatement_1) {
                            nodePath.pushContainer('body', api.template(mountStatement)());
                        }
                        else {
                            nodePath.pushContainer('body', api.template(unmountStatement)());
                        }
                    }
                }
            }
        }
    };
});
//# sourceMappingURL=babelPlugin.js.map