"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var chalk = require("chalk");
var hbsHelpler_1 = require("./hbsHelpler");
var entryHelper_1 = require("./entryHelper");
var any2ArrayAny = function (any) { return Array.isArray(any) ? any : [any]; };
var getVersionByUrl = function (url) {
    var sevReg = /(([0-9]|([1-9]([0-9]*))).){2}([0-9]|([1-9]([0-9]*)))([-](([0-9A-Za-z]|([1-9A-Za-z]([0-9A-Za-z]*)))[.]){0,}([0-9A-Za-z]|([1-9A-Za-z]([0-9A-Za-z]*)))){0,1}([+](([0-9A-Za-z]{1,})[.]){0,}([0-9A-Za-z]{1,})){0,1}/;
    var matches = any2ArrayAny(url)[0].match(sevReg);
    return matches ? matches[0] : '';
};
var formatVersion = function (version, depth) {
    if (depth === void 0) { depth = 0; }
    var map = new Map([
        ['major', 0],
        ['minor', 1],
        ['patch', 2]
    ]);
    var localDepth = (depth !== 0 && depth !== 1 && depth !== 2) ? map.get(depth) : depth;
    return version.split('.').slice(0, localDepth + 1).join('.');
};
var getMark = function (runtime) {
    var root = runtime.root, version = runtime.version, depth = runtime.depth, url = runtime.url;
    var localVersion = version ? String(version) : getVersionByUrl(url);
    return "".concat(root, "@").concat(formatVersion(localVersion, depth));
};
var genRuntimesConfig = function (externals) {
    return Object.keys(externals)
        .filter(function (key) { return typeof externals[key] !== 'string'; })
        .map(function (key) { return (__assign(__assign({}, externals[key]), { id: getMark(externals[key]) })); });
};
// If url was not provided, don't generate runtime.json
var checkUrlExists = function (externals) {
    return Object
        .keys(externals)
        .every(function (key) { var _a; return (_a = externals[key]) === null || _a === void 0 ? void 0 : _a.url; });
};
var genRuntime = function (_a, _b) {
    var context = _a.context;
    var moduleExternals = _b.moduleExternals, modules = _b.modules, outputDir = _b.outputDir, filenameStrategy = _b.filenameStrategy;
    if (!moduleExternals) {
        return;
    }
    if (!checkUrlExists(moduleExternals)) {
        return;
    }
    console.log(chalk.green('runtime.json starts to build...'));
    try {
        var rootDir_1 = context.rootDir;
        var entries = (0, entryHelper_1.getModules)(modules);
        Object
            .keys(entries)
            .forEach(function (key) {
            var flatten = !(filenameStrategy !== null && filenameStrategy !== void 0 ? filenameStrategy : './[name].index').includes('./');
            var output = "".concat(outputDir !== null && outputDir !== void 0 ? outputDir : 'dist').concat(flatten ? "/".concat(key, ".runtime.json") : ("/".concat(key, "/runtime.json")));
            var outputPath = path.join(rootDir_1, output);
            (0, hbsHelpler_1.compileTemplate)({
                template: 'runtime.hbs',
                outputPath: outputPath,
                params: {
                    runtimes: genRuntimesConfig(moduleExternals),
                }
            });
        });
        console.log(chalk.green('build succeed!'));
    }
    catch (e) {
        console.log(chalk.red('runtime.json build error, ', e));
    }
};
exports.default = genRuntime;
//# sourceMappingURL=genRuntime.js.map