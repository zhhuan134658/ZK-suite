"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var build_scripts_config_1 = require("build-scripts-config");
var WebpackPluginImport = require("webpack-plugin-import");
var setUMDConfig_1 = require("./setUMDConfig");
var genRuntime_1 = require("./genRuntime");
var setExternals_1 = require("./setExternals");
var appendLifecycle_1 = require("./appendLifecycle");
var setDevLog_1 = require("./setDevLog");
// TODO: remove this line next update
// @ts-ignore
var plugin = function (_a, options) {
    var _b, _c;
    var onGetWebpackConfig = _a.onGetWebpackConfig, context = _a.context, registerTask = _a.registerTask, onHook = _a.onHook, registerUserConfig = _a.registerUserConfig, hasRegistration = _a.hasRegistration;
    if (options === void 0) { options = {}; }
    var command = context.command, userConfig = context.userConfig, webpack = context.webpack, commandArgs = context.commandArgs;
    var _d = (userConfig || {}), outerMinify = _d.minify, outerSourceMap = _d.sourceMap, outerOutputDir = _d.outputDir;
    var hasOutputDirRegistered = hasRegistration('outputDir', 'userConfig');
    if (!hasOutputDirRegistered) {
        registerUserConfig({
            name: 'outputDir',
            validation: 'string',
        });
    }
    options.outputDir = (_b = options.outputDir) !== null && _b !== void 0 ? _b : outerOutputDir;
    var _e = (_c = options) !== null && _c !== void 0 ? _c : {}, moduleExternals = _e.moduleExternals, minify = _e.minify, sourceMap = _e.sourceMap;
    var mode = command === 'start' ? 'development' : 'production';
    var baseConfig = (0, build_scripts_config_1.getWebpackConfig)(mode);
    baseConfig.name('MicroModule');
    // minify
    var localMinify = outerMinify !== null && outerMinify !== void 0 ? outerMinify : minify;
    if (localMinify !== undefined) {
        baseConfig.optimization.minimize(minify);
    }
    // sourcemap
    var localSourceMap = outerSourceMap !== null && outerSourceMap !== void 0 ? outerSourceMap : sourceMap;
    if (localSourceMap !== undefined) {
        baseConfig.devtool(sourceMap ? 'source-map' : false);
        // eslint-disable-next-line no-unused-expressions
        sourceMap
            && (command === 'build')
            && baseConfig.optimization
                .minimizer('TerserPlugin')
                .tap(function (_a) {
                var opts = _a[0];
                return [
                    __assign(__assign({}, opts), { sourceMap: true }),
                ];
            });
    }
    // definePlugin, Compatible with @ali/build-plugin-ice-def
    var defineVariables = {
        'process.env.NODE_ENV': JSON.stringify(mode || 'development'),
        'process.env.SERVER_PORT': JSON.stringify(commandArgs.port),
    };
    baseConfig.plugin('DefinePlugin')
        .use(webpack.DefinePlugin, [defineVariables])
        .end();
    // register webpack-plugin-import
    // https://github.com/alibaba/ice/tree/master/packages/webpack-plugin-import
    baseConfig.plugin('WebpackPluginImport')
        .use(WebpackPluginImport, [[
            {
                libraryName: /@ali\/ice-.*/,
                stylePath: 'style.js',
            },
        ]])
        .end();
    // set umd
    (0, setUMDConfig_1.default)({ context: context, onGetWebpackConfig: onGetWebpackConfig }, options);
    // set moduleExternals
    if (moduleExternals) {
        (0, setExternals_1.default)({ onGetWebpackConfig: onGetWebpackConfig }, { moduleExternals: moduleExternals });
    }
    // append lifecycle
    (0, appendLifecycle_1.default)({ onGetWebpackConfig: onGetWebpackConfig });
    // registerTask
    registerTask('icestark-module', baseConfig);
    // generate runtime.json
    onHook("after.".concat(command, ".compile"), function (args) {
        (0, genRuntime_1.default)({ context: context }, options);
        if (command === 'start') {
            (0, setDevLog_1.default)(args, options);
        }
    });
};
exports.default = plugin;
//# sourceMappingURL=index.js.map